

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (27 August 2023 16:46:18) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


----End fileIn of /home/pablo/Documents/inge1/linux64/peano.st----!

----End fileIn of /home/pablo/Documents/inge1/linux64/peano.st----!
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:49:41'!
> aNaturalNumber
	^false! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:52:59'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^false] ifFalse: [^(self previous > aNaturalNumber  previous)].! !

!classRemoval: #lll stamp: 'psm 8/27/2023 16:53:04'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 16:53:09'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

ll next!

ll next!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 16:54:47'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 16:54:47'!
lll class
	instanceVariableNames: 'next previous'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:54:47'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:54:47'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:54:47'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^false] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:54:48'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:54:48'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:54:48'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:54:48'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

ll next!

ll > lll!

lll > lll!

lll > ll!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:56:06' prior: 50650861!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:56:15' prior: 50650817!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !

lll > ll !

lll > lll!

ll > lll!

ll > l!

!classRemoval: #lll stamp: 'psm 8/27/2023 16:56:39'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:57:55'!
* aNaturalNumber
	^((self previous * aNaturalNumber) + aNaturalNumber)! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:03' prior: 50650910!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:21'!
* aNaturalNumber
	^aNaturalNumber! !

ll next!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 16:58:47'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 16:58:47'!
lll class
	instanceVariableNames: 'next previous'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:58:47'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

ll * lll!

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 16:59:00'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 16:59:00'!
llll class
	instanceVariableNames: 'next previous'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 16:59:00'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 16:59:00'!
lllll class
	instanceVariableNames: 'next previous'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 16:59:00'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 16:59:00'!
llllll class
	instanceVariableNames: 'next previous'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 16:59:00'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

!classRemoval: #llllll stamp: 'psm 8/27/2023 16:59:11'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 16:59:15'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 16:59:19'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 16:59:23'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:00:40'!
divideA: aNaturalNumber
	^aNaturalNumber! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:03:09'!
divideA: aNaturalNumber
	^((self divideA: (aNaturalNumber - self)) next)! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:03:53'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self)! !
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:06'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self)! !
!l class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:04:24' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.! !
!ll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:04:24' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := l.! !

!methodRemoval: l class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:04:24'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.!

!methodRemoval: ll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:04:24'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := l.!

ll + ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 17:04:33'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 17:04:33'!
lll class
	instanceVariableNames: 'next previous'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
divideA: aNaturalNumber
	^((self divideA: (aNaturalNumber - self)) next)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 17:04:33'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 17:04:33'!
llll class
	instanceVariableNames: 'next previous'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
divideA: aNaturalNumber
	^((self divideA: (aNaturalNumber - self)) next)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:33'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

ll * lll!

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 17:04:41'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 17:04:41'!
lllll class
	instanceVariableNames: 'next previous'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
divideA: aNaturalNumber
	^((self divideA: (aNaturalNumber - self)) next)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 17:04:41'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 17:04:41'!
llllll class
	instanceVariableNames: 'next previous'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
divideA: aNaturalNumber
	^((self divideA: (aNaturalNumber - self)) next)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:04:41'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

lllll / ll!

!classRemoval: #llllll stamp: 'psm 8/27/2023 17:05:17'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 17:05:20'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 17:05:23'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 17:05:26'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:08:39' prior: 50651187!
divideA: aNaturalNumber
	(self < aNaturalNumber )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:10' prior: 50651528!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:32' prior: 50651192!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !

ll + ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 17:09:41'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 17:09:41'!
lll class
	instanceVariableNames: 'next previous'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 17:09:41'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 17:09:41'!
llll class
	instanceVariableNames: 'next previous'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:09:41'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:10:09' prior: 50651197!
/ aNaturalNumber
	^aNaturalNumber ! !
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:11:46' prior: 50651688!
/ aNaturalNumber
	^aNaturalNumber  divideA: self! !

lll / ll!

lll / l!
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:12:34' prior: 50651183!
divideA: aNaturalNumber
	^aNaturalNumber next! !
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:13:10' prior: 50651693!
/ aNaturalNumber
	^(aNaturalNumber  divideA: self) previous! !

lll / l!

l / ll!

llll / ll!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:19:08' prior: 50651535!
divideA: aNaturalNumber
	((aNaturalNumber = self) or: [aNaturalNumber > self ])
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:19:26' prior: 50651590!
divideA: aNaturalNumber
	((aNaturalNumber = self) or: [aNaturalNumber > self ])
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:19:31' prior: 50651660!
divideA: aNaturalNumber
	((aNaturalNumber = self) or: [aNaturalNumber > self ])
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !

llll / ll!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:20:26' prior: 50651718!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:20:34' prior: 50651710!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  ifFalse: [^l]
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:22:57' prior: 50651742!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:23:10' prior: 50651735!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:23:19' prior: 50651726!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !

llll / ll!

lll * ll!

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 17:24:01'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 17:24:01'!
lllll class
	instanceVariableNames: 'next previous'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 17:24:01'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 17:24:01'!
llllll class
	instanceVariableNames: 'next previous'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:24:01'!
restateA: aNaturalNumber
	aNaturalNumber previous  - self previous! !

llllll / ll!

llllll / ll !

lllll / ll  ll .!

lllll / ll !

llll / ll !

llllll - ll!

llllll previous previous !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:31:08' prior: 50651844!
restateA: aNaturalNumber
	^aNaturalNumber previous  - self previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:31:21' prior: 50651917!
restateA: aNaturalNumber
	^aNaturalNumber previous  - self previous! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:32:24' prior: 50650631!
- aNaturalNumber
	(aNaturalNumber  = 1)
	 ifTrue: [^self previous ] 
	ifFalse: [	^aNaturalNumber restateA: self]! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:33:31' prior: 50651938!
- aNaturalNumber
	aNaturalNumber restateA: self! !

!classRemoval: #llllll stamp: 'psm 8/27/2023 17:34:47'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 17:34:50'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 17:34:53'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 17:34:55'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:46' prior: 50650652!
restateA: aNaturalNumber
	^self previous restateA:  aNaturalNumber previous ! !

ll + ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 17:35:57'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 17:35:57'!
lll class
	instanceVariableNames: 'next previous'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
- aNaturalNumber
	aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
restateA: aNaturalNumber
	^self previous restateA:  aNaturalNumber previous ! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 17:35:57'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 17:35:57'!
llll class
	instanceVariableNames: 'next previous'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
- aNaturalNumber
	aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:35:57'!
restateA: aNaturalNumber
	^self previous restateA:  aNaturalNumber previous ! !

llll - ll !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:36:45' prior: 50651973!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

llll - ll  !

!classRemoval: #llll stamp: 'psm 8/27/2023 17:37:06'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 17:37:09'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

ll - l!
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:37:55' prior: 50650596!
restateA: aNaturalNumber
	^(aNaturalNumber previous )! !

ll - l!

ll - l!

l restateA: ll!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:32' prior: 50651945!
- aNaturalNumber
	^aNaturalNumber restateA: self! !

ll - l!

ll * ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 17:38:47'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 17:38:47'!
lll class
	instanceVariableNames: 'next previous'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:47'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:47'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 17:38:48'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 17:38:48'!
llll class
	instanceVariableNames: 'next previous'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:38:48'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

llll - ll!

llll / ll!

llll * ll!

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 17:39:12'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 17:39:12'!
lllll class
	instanceVariableNames: 'next previous'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 17:39:12'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 17:39:12'!
llllll class
	instanceVariableNames: 'next previous'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllll category: 'peano' stamp: 'psm 8/27/2023 17:39:12'!
DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:39:12'!
lllllll class
	instanceVariableNames: 'next previous'!
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:12'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
previous
	^previous! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllll category: 'peano' stamp: 'psm 8/27/2023 17:39:13'!
DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:39:13'!
llllllll class
	instanceVariableNames: 'next previous'!
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
previous
	^previous! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:39:13'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

llllll / ll!

llllll * lll!

DenotativeObject subclass: #lllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:02'!
DenotativeObject subclass: #lllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:02'!
lllllllll class
	instanceVariableNames: 'next previous'!
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
previous
	^previous! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:02'!
DenotativeObject subclass: #llllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:02'!
llllllllll class
	instanceVariableNames: 'next previous'!
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
previous
	^previous! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:02'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #lllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
DenotativeObject subclass: #lllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
lllllllllll class
	instanceVariableNames: 'next previous'!
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous
	^previous! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
DenotativeObject subclass: #llllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
llllllllllll class
	instanceVariableNames: 'next previous'!
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous
	^previous! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #lllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
DenotativeObject subclass: #lllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
lllllllllllll class
	instanceVariableNames: 'next previous'!
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous
	^previous! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
DenotativeObject subclass: #llllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
llllllllllllll class
	instanceVariableNames: 'next previous'!
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous
	^previous! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #lllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
DenotativeObject subclass: #lllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllllllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:03'!
lllllllllllllll class
	instanceVariableNames: 'next previous'!
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:03'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous
	^previous! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:04'!
DenotativeObject subclass: #llllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllllllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:04'!
llllllllllllllll class
	instanceVariableNames: 'next previous'!
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous
	^previous! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #lllllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllllllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:04'!
DenotativeObject subclass: #lllllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllllllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllllllllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:04'!
lllllllllllllllll class
	instanceVariableNames: 'next previous'!
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous
	^previous! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !

DenotativeObject subclass: #llllllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllllllllllllll category: 'peano' stamp: 'psm 8/27/2023 17:42:04'!
DenotativeObject subclass: #llllllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllllllllllllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllllllllllllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:42:04'!
llllllllllllllllll class
	instanceVariableNames: 'next previous'!
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous
	^previous! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllllllllllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:42:04'!
restateA: aNaturalNumber
	^self previous restateA:  (aNaturalNumber previous )! !
!l class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.! !
!ll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lll.
	previous := l.! !
!lll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llll.
	previous := ll.! !
!llll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllll.
	previous := lll.! !
!lllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllll.
	previous := llll.! !
!llllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllll.
	previous := lllll.! !
!lllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllll.
	previous := llllll.! !
!llllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllll.
	previous := lllllll.! !
!lllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllll.
	previous := llllllll.! !
!llllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:29' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllll.
	previous := lllllllll.! !
!lllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllll.
	previous := llllllllll.! !
!llllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllllll.
	previous := lllllllllll.! !
!lllllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllllll.
	previous := llllllllllll.! !
!llllllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllllllll.
	previous := lllllllllllll.! !
!lllllllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllllllll.
	previous := llllllllllllll.! !
!llllllllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllllllllll.
	previous := lllllllllllllll.! !
!lllllllllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllllllllll.
	previous := llllllllllllllll.! !
!llllllllllllllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 17:42:30' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := lllllllllllllllll.! !

!methodRemoval: l class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.!

!methodRemoval: ll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lll.
	previous := l.!

!methodRemoval: lll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llll.
	previous := ll.!

!methodRemoval: llll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllll.
	previous := lll.!

!methodRemoval: lllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllll.
	previous := llll.!

!methodRemoval: llllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllll.
	previous := lllll.!

!methodRemoval: lllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllll.
	previous := llllll.!

!methodRemoval: llllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllll.
	previous := lllllll.!

!methodRemoval: lllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllll.
	previous := llllllll.!

!methodRemoval: llllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllll.
	previous := lllllllll.!

!methodRemoval: lllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllll.
	previous := llllllllll.!

!methodRemoval: llllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllllll.
	previous := lllllllllll.!

!methodRemoval: lllllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllllll.
	previous := llllllllllll.!

!methodRemoval: llllllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllllllll.
	previous := lllllllllllll.!

!methodRemoval: lllllllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllllllll.
	previous := llllllllllllll.!

!methodRemoval: llllllllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := lllllllllllllllll.
	previous := lllllllllllllll.!

!methodRemoval: lllllllllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:30'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := llllllllllllllllll.
	previous := llllllllllllllll.!

!methodRemoval: llllllllllllllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 17:42:31'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := lllllllllllllllll.!

!classRemoval: #llllllllllllllllll stamp: 'psm 8/27/2023 17:45:23'!
DenotativeObject subclass: #llllllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllllllllllll stamp: 'psm 8/27/2023 17:45:27'!
DenotativeObject subclass: #lllllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllllllllllll stamp: 'psm 8/27/2023 17:45:30'!
DenotativeObject subclass: #llllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllllllllll stamp: 'psm 8/27/2023 17:45:38'!
DenotativeObject subclass: #lllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllllllllll stamp: 'psm 8/27/2023 17:45:42'!
DenotativeObject subclass: #llllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllllllll stamp: 'psm 8/27/2023 17:45:45'!
DenotativeObject subclass: #lllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllllllll stamp: 'psm 8/27/2023 17:45:48'!
DenotativeObject subclass: #llllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllllll stamp: 'psm 8/27/2023 17:45:51'!
DenotativeObject subclass: #lllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllllll stamp: 'psm 8/27/2023 17:45:57'!
DenotativeObject subclass: #llllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllll stamp: 'psm 8/27/2023 17:45:59'!
DenotativeObject subclass: #lllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllll stamp: 'psm 8/27/2023 17:46:02'!
DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllll stamp: 'psm 8/27/2023 17:46:05'!
DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllll stamp: 'psm 8/27/2023 17:46:09'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 17:46:11'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 17:46:14'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 17:46:17'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:10' prior: 50652125!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous )! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:25' prior: 50653734!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

ll + ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 17:49:57'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 17:49:57'!
lll class
	instanceVariableNames: 'next previous'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 17:49:57'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 17:49:57'!
llll class
	instanceVariableNames: 'next previous'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:57'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:58'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:58'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:58'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:58'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:58'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:49:58'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

llll - ll!

lllll - ll!

llll + ll!

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 17:50:16'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 17:50:16'!
lllll class
	instanceVariableNames: 'next previous'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 17:50:16'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'next previous'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 17:50:16'!
llllll class
	instanceVariableNames: 'next previous'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:16'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:17'!
divideA: aNaturalNumber
	(aNaturalNumber > self )
	ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	ifFalse: [
		(self = aNaturalNumber )
			ifTrue: [^ll] ifFalse:[^l]. 
		]
	! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:17'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:17'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:17'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:50:17'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

llllll - ll!

llllll - llll!

llllll - lllll!

llllll - llllll!

!classRemoval: #llllll stamp: 'psm 8/27/2023 17:50:57'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 17:51:00'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 17:51:02'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 17:51:05'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

ll
	collaboratorNames: 'previous next'
	in: 'peano'!

!classDefinition: 'll class' category: 'peano' stamp: 'psm 8/27/2023 17:51:24'!
ll class
	instanceVariableNames: 'previous next'!

!classDefinition: #ll category: 'peano' stamp: 'psm 8/27/2023 17:51:24'!
DenotativeObject subclass: #ll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: 'll class' category: 'peano' stamp: 'psm 8/27/2023 17:51:24'!
ll class
	instanceVariableNames: 'previous next'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:17' prior: 50651749!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^l]. 
	].
	! !

ll * ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 17:53:30'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 17:53:31'!
lll class
	instanceVariableNames: 'previous next'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^l]. 
	].
	! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 17:53:31'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 17:53:31'!
llll class
	instanceVariableNames: 'previous next'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^l]. 
	].
	! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:31'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

ll * llll!

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 17:53:35'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 17:53:35'!
lllll class
	instanceVariableNames: 'previous next'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^l]. 
	].
	! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 17:53:35'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 17:53:35'!
llllll class
	instanceVariableNames: 'previous next'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:35'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^l]. 
	].
	! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllll category: 'peano' stamp: 'psm 8/27/2023 17:53:36'!
DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:53:36'!
lllllll class
	instanceVariableNames: 'previous next'!
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^l]. 
	].
	! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
previous
	^previous! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllll category: 'peano' stamp: 'psm 8/27/2023 17:53:36'!
DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llllllll class' category: 'peano' stamp: 'psm 8/27/2023 17:53:36'!
llllllll class
	instanceVariableNames: 'previous next'!
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
/ aNaturalNumber
	^(aNaturalNumber divideA: self) previous! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^l]. 
	].
	! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
previous
	^previous! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:53:36'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

llllllll / ll!

!classRemoval: #llllllll stamp: 'psm 8/27/2023 17:54:08'!
DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllll stamp: 'psm 8/27/2023 17:54:18'!
DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllll stamp: 'psm 8/27/2023 17:54:22'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 17:54:26'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 17:54:29'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 17:54:33'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 17:54:44' prior: 50651542!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:01:41' prior: 50654077!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^ll] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^nil]. 
	].
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:01:53' prior: 50654563!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
		ifFalse: [^nil]. 
	].
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:02:48' prior: 50654572!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [^((self divideA: (aNaturalNumber - self)) next)]  
	].
	^nil
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:10:42' prior: 50654581!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			(cociente isNotNil ifTrue: [^cociente next] ifFalse: [^l] ).
			] 
		ifFalse: [^nil]]! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:10:58' prior: 50654590!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			(cociente isNotNil ifTrue: [^cociente next] ifFalse: [^l] ).
			] 
		ifFalse: [^nil]
		]! !

ll + ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 18:11:06'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 18:11:06'!
lll class
	instanceVariableNames: 'previous next'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			(cociente isNotNil ifTrue: [^cociente next] ifFalse: [^l] ).
			] 
		ifFalse: [^nil]
		]! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 18:11:06'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 18:11:06'!
llll class
	instanceVariableNames: 'previous next'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			(cociente isNotNil ifTrue: [^cociente next] ifFalse: [^l] ).
			] 
		ifFalse: [^nil]
		]! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:06'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

llll + ll!

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 18:11:12'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 18:11:12'!
lllll class
	instanceVariableNames: 'previous next'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			(cociente isNotNil ifTrue: [^cociente next] ifFalse: [^l] ).
			] 
		ifFalse: [^nil]
		]! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 18:11:12'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 18:11:12'!
llllll class
	instanceVariableNames: 'previous next'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:12'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:13'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			(cociente isNotNil ifTrue: [^cociente next] ifFalse: [^l] ).
			] 
		ifFalse: [^nil]
		]! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:13'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:13'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:13'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:13'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

llllll / ll!
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:11:48' prior: 50651704!
/ aNaturalNumber
	^(aNaturalNumber  divideA: self)! !

llllll / ll!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:16:53' prior: 50654602!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next]. cociente ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !

!classRemoval: #llllll stamp: 'psm 8/27/2023 18:17:00'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 18:17:02'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 18:17:04'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 18:17:06'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

ll * ll!

DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lll category: 'peano' stamp: 'psm 8/27/2023 18:17:24'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lll class' category: 'peano' stamp: 'psm 8/27/2023 18:17:25'!
lll class
	instanceVariableNames: 'previous next'!
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next]. cociente ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
previous
	^previous! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llll category: 'peano' stamp: 'psm 8/27/2023 18:17:25'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llll class' category: 'peano' stamp: 'psm 8/27/2023 18:17:25'!
llll class
	instanceVariableNames: 'previous next'!
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next]. cociente ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
previous
	^previous! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:25'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

ll * llll!

DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllll category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lllll class' category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
lllll class
	instanceVariableNames: 'previous next'!
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next]. cociente ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
previous
	^previous! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllll category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llllll class' category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
llllll class
	instanceVariableNames: 'previous next'!
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next]. cociente ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
previous
	^previous! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #lllllll category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

lllllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'lllllll class' category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
lllllll class
	instanceVariableNames: 'previous next'!
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next]. cociente ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
previous
	^previous! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!lllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classDefinition: #llllllll category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

llllllll class
	instanceVariableNames: 'previous next'!

!classDefinition: 'llllllll class' category: 'peano' stamp: 'psm 8/27/2023 18:17:28'!
llllllll class
	instanceVariableNames: 'previous next'!
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
+ aNaturalNumber
	^(previous + aNaturalNumber) next! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:28'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:29'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:29'!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next]. cociente ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:29'!
next
	next ifNil:[next := self cloneNamed: self name, 'l'].
	next previous: self.
	^next! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:29'!
previous
	^previous! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:29'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!llllllll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:17:29'!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

llll / ll!

llll / lll!

llll / lllll!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:19:40' prior: 50654923!
divideA: aNaturalNumber
	(self = aNaturalNumber )
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next] ifNil:[^l] .
			] 
		ifFalse: [^nil]
		]! !
!l class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.! !
!ll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := l.
	next := lll.! !
!lll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := ll.
	next := llll.! !
!llll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := lll.
	next := lllll.! !
!lllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := llll.
	next := llllll.! !
!llllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := lllll.
	next := lllllll.! !
!lllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := llllll.
	next := llllllll.! !
!llllllll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:20:53' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := lllllll.
	next := nil.! !

!methodRemoval: l class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.!

!methodRemoval: ll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := l.
	next := lll.!

!methodRemoval: lll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := ll.
	next := llll.!

!methodRemoval: llll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := lll.
	next := lllll.!

!methodRemoval: lllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := llll.
	next := llllll.!

!methodRemoval: llllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := lllll.
	next := lllllll.!

!methodRemoval: lllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := llllll.
	next := llllllll.!

!methodRemoval: llllllll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:20:53'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := lllllll.
	next := nil.!

!classRemoval: #llllllll stamp: 'psm 8/27/2023 18:25:44'!
DenotativeObject subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllll stamp: 'psm 8/27/2023 18:25:47'!
DenotativeObject subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllll stamp: 'psm 8/27/2023 18:25:49'!
DenotativeObject subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/27/2023 18:27:44'!
DenotativeObject subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/27/2023 18:27:48'!
DenotativeObject subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/27/2023 18:27:51'!
DenotativeObject subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:30:22' prior: 50655414!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes devido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devulevo uno"
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		"si es mayor hago recursion"
		ifTrue: [
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next] ifNil:[^l] .
			] 
		"si es menor como no tengo 0 tengo que devolver nil"
		ifFalse: [^nil]
		]! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:31:56' prior: 50655580!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes devido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devulevo uno"
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		"si es mayor hago recursion"
		ifTrue: [
			"como la recursion me puede devolver un nil tengo que detectarlo"
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next] ifNil:[^l] .
			] 
		"si es menor como no tengo 0 tengo que devolver nil"
		ifFalse: [^nil]
		]! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/27/2023 18:34:11' prior: 50655598!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devulevo uno"
	ifTrue: [^l] 
	ifFalse:[(aNaturalNumber > self )
		"si es mayor hago recursion"
		ifTrue: [
			"como la recursion me puede devolver un nil tengo que detectarlo"
			|cociente|. 
			cociente := (self divideA: (aNaturalNumber - self)).
			cociente ifNotNil: [^cociente next] ifNil:[^l] .
			] 
		"si es menor como no tengo 0 tengo que devolver nil"
		ifFalse: [^nil]
		]! !
!l class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:37:12' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.! !
!ll class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/27/2023 18:37:13' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := l.
	next := nil.! !

!methodRemoval: l class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:37:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := ll.!

!methodRemoval: ll class #initializeCollaboratorsFromFile stamp: 'psm 8/27/2023 18:37:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := l.
	next := nil.!

----STARTUP---- (30 August 2023 20:18:38) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


----End fileIn of /home/pablo/Documents/inge1/linux64/peano.st----!
!conversor class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:21:21' prior: 50650341!
pasarEnteroANatural: aPositiveNumber
	(aPositiveNumber > 0)
	ifTrue: [
	|natural contador|.
	natural  := l.
	contador := aPositiveNumber  .
	[contador > 1] forDuration: aPositiveNumber .
	^natural .
	]. 
	self error: 'tiene que ser positivo'
! !

conversor pasarEnteroANatural: 5!

conversor pasarEnteroANatural: 5!
!conversor class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:22:52' prior: 50651026!
pasarEnteroANatural: aPositiveNumber
	(aPositiveNumber > 0)
	ifTrue: [
	|natural contador|.
	natural  := l.
	contador := aPositiveNumber  .
	[natural next] forDuration: aPositiveNumber .
	^natural .
	]. 
	self error: 'tiene que ser positivo'
! !

conversor pasarEnteroANatural: 5!
!conversor class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:24:35' prior: 50651039!
pasarEnteroANatural: aPositiveNumber
	(aPositiveNumber > 0)
	ifTrue: [
	|natural contador|.
	natural  := l.
	contador := aPositiveNumber  .
	aPositiveNumber forDuration: [natural next] .
	^natural .
	]. 
	self error: 'tiene que ser positivo'
! !
!conversor class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:24:49' prior: 50651051!
pasarEnteroANatural: aPositiveNumber
	(aPositiveNumber > 0)
	ifTrue: [
	|natural|.
	natural  := l.
	aPositiveNumber forDuration: [natural next] .
	^natural .
	]. 
	self error: 'tiene que ser positivo'
! !

conversor pasarEnteroANatural: 5!
!conversor class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:25:06' prior: 50651062!
pasarEnteroANatural: aPositiveNumber
	(aPositiveNumber > 0)
	ifTrue: [
	|natural contador|.
	natural  := l.
	contador := aPositiveNumber  .
	[natural next] for: aPositiveNumber .
	^natural .
	]. 
	self error: 'tiene que ser positivo'
! !

conversor pasarEnteroANatural: 5!

!classRemoval: #llllllllllllllll stamp: 'psm 8/30/2023 20:26:26'!
ll subclass: #llllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllllllllll stamp: 'psm 8/30/2023 20:26:27'!
ll subclass: #lllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllllllllll stamp: 'psm 8/30/2023 20:26:27'!
ll subclass: #llllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllllllll stamp: 'psm 8/30/2023 20:26:28'!
ll subclass: #lllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllllllll stamp: 'psm 8/30/2023 20:26:28'!
ll subclass: #llllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllllll stamp: 'psm 8/30/2023 20:26:29'!
ll subclass: #lllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllllll stamp: 'psm 8/30/2023 20:26:29'!
ll subclass: #llllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllllll stamp: 'psm 8/30/2023 20:26:30'!
ll subclass: #lllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllllll stamp: 'psm 8/30/2023 20:26:30'!
ll subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllllll stamp: 'psm 8/30/2023 20:26:30'!
ll subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llllll stamp: 'psm 8/30/2023 20:26:31'!
ll subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lllll stamp: 'psm 8/30/2023 20:26:31'!
ll subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #llll stamp: 'psm 8/30/2023 20:26:32'!
ll subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #lll stamp: 'psm 8/30/2023 20:26:32'!
ll subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #ll stamp: 'psm 8/30/2023 20:26:33'!
DenotativeObject subclass: #ll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #l stamp: 'psm 8/30/2023 20:26:33'!
DenotativeObject subclass: #l
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

!classRemoval: #conversor stamp: 'psm 8/30/2023 20:26:34'!
DenotativeObject subclass: #conversor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'peano'!

----End fileIn of /home/pablo/Documents/inge1/linux64/peano.st----!

ll + lll!

conversor pasarNaturalAEntero: lllll !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:31:58' prior: 50651308!
+ aNaturalNumber
	^(self previous + aNaturalNumber) next! !

ll + lll!

conversor pasarNaturalAEntero: lllll .!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:33:58' prior: 50651369!
restateA: aNaturalNumber
	(self  < aNaturalNumber ) ifTrue: [	^(aNaturalNumber previous - self previous)].
	self error: self name , ' es mas chico que ' , aNaturalNumber name , ' no se lo puedo restar'! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:34:17' prior: 50651313!
- aNaturalNumber
	^aNaturalNumber restateA: self! !

lll - ll!

lll - lll!

lll - lll!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:35:28' prior: 50651892!
restateA: aNaturalNumber
	(self  < aNaturalNumber ) ifTrue: [	^(aNaturalNumber previous - self previous)].
	self error: self name , ' es mayor o igual que ' , aNaturalNumber name , ' no se lo puedo restar'! !

lll - lll!

----End fileIn of /home/pablo/Documents/inge1/linux64/Numeros Naturales Tests.st----!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:37:39' prior: 50651908!
restateA: aNaturalNumber
	(self  < aNaturalNumber ) ifTrue: [	^(aNaturalNumber previous - self previous)].
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:39:26' prior: 50651336!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devuelvo uno"
	ifTrue: [^l] .
	(self < aNaturalNumber)
		"si es mayor hago recursion"
		ifTrue: [
			| pasoPrevio|.
			pasoPrevio :=aNaturalNumber - self.
			( pasoPrevio < self) ifTrue: [^l] 
			ifFalse: [^(self divideA: pasoPrevio) next]] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !

!classRemoval: #llllllllllllllll stamp: 'psm 8/30/2023 20:43:23'!
ll subclass: #llllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #lllllllllllllll stamp: 'psm 8/30/2023 20:43:25'!
ll subclass: #lllllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #llllllllllllll stamp: 'psm 8/30/2023 20:43:27'!
ll subclass: #llllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #lllllllllllll stamp: 'psm 8/30/2023 20:43:29'!
ll subclass: #lllllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #llllllllllll stamp: 'psm 8/30/2023 20:43:31'!
ll subclass: #llllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #lllllllllll stamp: 'psm 8/30/2023 20:43:33'!
ll subclass: #lllllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #llllllllll stamp: 'psm 8/30/2023 20:43:35'!
ll subclass: #llllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #lllllllll stamp: 'psm 8/30/2023 20:43:37'!
ll subclass: #lllllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #llllllll stamp: 'psm 8/30/2023 20:43:38'!
ll subclass: #llllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #lllllll stamp: 'psm 8/30/2023 20:43:43'!
ll subclass: #lllllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #llllll stamp: 'psm 8/30/2023 20:43:46'!
ll subclass: #llllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #lllll stamp: 'psm 8/30/2023 20:43:49'!
ll subclass: #lllll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #llll stamp: 'psm 8/30/2023 20:43:51'!
ll subclass: #llll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #lll stamp: 'psm 8/30/2023 20:43:55'!
ll subclass: #lll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: #II category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:44:18'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:44:14' prior: 50651354!
next
	next ifNil:[next := II createChildNamed: self name, 'I'].
	next previous: self.
	^next! !
!l class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:44:50' prior: 50651264!
next
	next ifNil:[next := self cloneNamed: self name, 'I'].
	next previous: self.
	^next! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:45:40' prior: 50652140!
next
	next ifNil:[next := ll createChildNamed: self name, 'I'].
	next previous: self.
	^next! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:45:56' prior: 50652152!
next
	next ifNil:[next := ll createChildNamed: self name, 'I'].
	next previous: self.
	^next! !

!classRemoval: #NumerosNaturalesTest stamp: 'psm 8/30/2023 20:46:23'!
DenotativeObject subclass: #NumerosNaturalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales Tests'!

!classRemoval: #II stamp: 'psm 8/30/2023 20:46:29'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: #II category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:46:36'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

II class
	instanceVariableNames: 'previous next'!

!classDefinition: 'II class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:46:36'!
II class
	instanceVariableNames: 'previous next'!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
* aNaturalNumber
	^(self previous * aNaturalNumber + aNaturalNumber)! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
+ aNaturalNumber
	^(self previous + aNaturalNumber) next! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
- aNaturalNumber
	^aNaturalNumber restateA: self! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
/ aNaturalNumber
	^aNaturalNumber divideA: self! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
< aNaturalNumber
	^aNaturalNumber  > self! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
> aNaturalNumber
	(aNaturalNumber = l)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devuelvo uno"
	ifTrue: [^l] .
	(self < aNaturalNumber)
		"si es mayor hago recursion"
		ifTrue: [
			| pasoPrevio|.
			pasoPrevio :=aNaturalNumber - self.
			( pasoPrevio < self) ifTrue: [^l] 
			ifFalse: [^(self divideA: pasoPrevio) next]] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
next
	next ifNil:[next := ll createChildNamed: self name, 'I'].
	next previous: self.
	^next! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
previous
	^previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
previous: aNatualNumber
	previous := aNatualNumber .
	^previous ! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:36'!
restateA: aNaturalNumber
	(self  < aNaturalNumber ) ifTrue: [	^(aNaturalNumber previous - self previous)].
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:46:48' prior: 50652240!
next
	next ifNil:[next := II createChildNamed: self name, 'I'].
	next previous: self.
	^next! !

DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: #I category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:47:00'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

I class
	instanceVariableNames: 'next'!

!classDefinition: 'I class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:47:00'!
I class
	instanceVariableNames: 'next'!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
* aNaturalNumber
	^aNaturalNumber! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
+ aNaturalNumber
	^aNaturalNumber next! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
- aNaturalNumber
	self error: aNaturalNumber name , ' no puedo restarselo a l'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
/ aNaturalNumber
	^(aNaturalNumber  divideA: self)! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
< aNaturalNumber
	^aNaturalNumber  > self! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
> aNaturalNumber
	^false! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
divideA: aNaturalNumber
	^aNaturalNumber next! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
next
	next ifNil:[next := self cloneNamed: self name, 'I'].
	next previous: self.
	^next! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
previous
	^l! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:00'!
restateA: aNaturalNumber
	^(aNaturalNumber previous )! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:47:24' prior: 50652316!
next
	next ifNil:[next := self cloneNamed: self name, 'I'].
	next previous: self.
	^next! !
!conversor class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:48:44' prior: 50651198!
pasarEnteroANatural: aPositiveNumber
	(aPositiveNumber > 0)
	ifTrue: [
	|natural contador|.
	natural  := I.
	contador := aPositiveNumber  .
	[contador > 1] whileTrue: [natural := natural next. contador := contador -1.].
	^natural .
	]. 
	self error: 'tiene que ser positivo'
! !
!conversor class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:48:57' prior: 50651210!
pasarNaturalAEntero: aNaturalNumber
	(aNaturalNumber  = I)
	ifTrue: [^1] .
	^(self pasarNaturalAEntero: aNaturalNumber previous) + 1
	! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:49:13' prior: 50651330!
> aNaturalNumber
	(aNaturalNumber = II)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:49:20' prior: 50652033!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devuelvo uno"
	ifTrue: [^I] .
	(self < aNaturalNumber)
		"si es mayor hago recursion"
		ifTrue: [
			| pasoPrevio|.
			pasoPrevio :=aNaturalNumber - self.
			( pasoPrevio < self) ifTrue: [^l] 
			ifFalse: [^(self divideA: pasoPrevio) next]] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!ll class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:49:26' prior: 50652363!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devuelvo uno"
	ifTrue: [^I] .
	(self < aNaturalNumber)
		"si es mayor hago recursion"
		ifTrue: [
			| pasoPrevio|.
			pasoPrevio :=aNaturalNumber - self.
			( pasoPrevio < self) ifTrue: [^I] 
			ifFalse: [^(self divideA: pasoPrevio) next]] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:49:36' prior: 50652217!
> aNaturalNumber
	(aNaturalNumber = I)
	ifTrue: [^true] ifFalse: [^(self previous > aNaturalNumber  previous)].! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:49:47' prior: 50652223!
divideA: aNaturalNumber
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devuelvo uno"
	ifTrue: [^I] .
	(self < aNaturalNumber)
		"si es mayor hago recursion"
		ifTrue: [
			| pasoPrevio|.
			pasoPrevio :=aNaturalNumber - self.
			( pasoPrevio < self) ifTrue: [^I] 
			ifFalse: [^(self divideA: pasoPrevio) next]] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:49:52' prior: 50652322!
previous
	^I! !

!classRemoval: #l stamp: 'psm 8/30/2023 20:50:04'!
DenotativeObject subclass: #l
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #ll stamp: 'psm 8/30/2023 20:50:24'!
DenotativeObject subclass: #ll
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

II * II!

!classDefinition: #III category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:48'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'III class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:48'!
III class
	instanceVariableNames: ''!

!classDefinition: #IIII category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:48'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIII class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:48'!
IIII class
	instanceVariableNames: ''!

II * IIII!

!classDefinition: #IIIII category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIII class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
IIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIII category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIIII class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
IIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIIII category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
II subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIIIII class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
IIIIIII class
	instanceVariableNames: ''!

!classDefinition: #IIIIIIII category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
II subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classDefinition: 'IIIIIIII class' category: 'Numeros Naturales' stamp: 'psm 8/30/2023 20:50:54'!
IIIIIIII class
	instanceVariableNames: ''!
!I class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:51' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:51' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:52' overrides: 50652511!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:52' overrides: 50652511!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:52' overrides: 50652511!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:52' overrides: 50652511!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.! !
!IIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:52' overrides: 50652511!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.! !
!IIIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 20:51:52' overrides: 50652511!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.!

!methodRemoval: IIIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 20:51:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.!

----End fileIn of /home/pablo/Documents/inge1/linux64/Numeros Naturales Tests.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:52:28'!
PASSED!

II / II!

II / I!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:53:35' prior: 50652312!
divideA: aNaturalNumber
	^aNaturalNumber! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:53:47'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:54:51' prior: 50652294!
- aNaturalNumber
	self error: aNaturalNumber name , 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:55:27'!
PASSED!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:56:12' prior: 50652255!
restateA: aNaturalNumber
	(self  < aNaturalNumber ) ifTrue: [	^(aNaturalNumber previous - self previous)].
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados.'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:56:17'!
PASSED!

I - II!

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:57:02'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:58:05' prior: 50652421!
previous
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:58:22' prior: 50652847!
restateA: aNaturalNumber
	^(aNaturalNumber previous - self previous)! !

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 20:59:27' prior: 50652805!
- aNaturalNumber
	self previous! !

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:55'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:55'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 20:59:55'!
PASSED!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:02:23' prior: 50652209!
/ aNaturalNumber
	(self < aNaturalNumber)
		"si es mayor hago recursion"
		ifTrue: [^aNaturalNumber divideA: self] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:03:45' prior: 50652404!
divideA: aNaturalNumber
	| pasoPrevio|.
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
	"si son iguales devuelvo uno"
	ifTrue: [^I] .
	pasoPrevio :=aNaturalNumber - self.
	( pasoPrevio < self) ifTrue: [^I] 
	ifFalse: [^(self divideA: pasoPrevio) next]! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:04:17' prior: 50652989!
divideA: aNaturalNumber
	| pasoPrevio|.
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
		"si son iguales devuelvo uno"
		ifTrue: [^I] .
	pasoPrevio :=aNaturalNumber - self.
	( pasoPrevio < self)
		 ifTrue: [^I] 
		ifFalse: [^(self divideA: pasoPrevio) next]! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:04:21' prior: 50653002!
divideA: aNaturalNumber
	| pasoPrevio|.
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
		"si son iguales devuelvo uno"
		ifTrue: [^I] .
	pasoPrevio :=aNaturalNumber - self.
	( pasoPrevio < self)
		ifTrue: [^I] 
		ifFalse: [^(self divideA: pasoPrevio) next]! !

I - II!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:04:52' prior: 50653015!
divideA: aNaturalNumber
	| pasoPrevio|.
	"este codigo se divide en muchas partes debido a la falta de un 0"
	(self = aNaturalNumber )
		"si son iguales devuelvo uno"
		ifTrue: [^I] .
	pasoPrevio :=aNaturalNumber - self.
	( pasoPrevio < self)
		ifTrue: [^I] 
		ifFalse: [^(pasoPrevio / self) next]! !

III / II!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:05:31' prior: 50652980!
/ aNaturalNumber
	(aNaturalNumber < self)
		"si es mayor hago recursion"
		ifTrue: [^aNaturalNumber divideA: self] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !

III / II!

III / III!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:05:50'!
PASSED!

IIII / II!

IIII / II!

IIII / II!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:07:44' prior: 50653028!
divideA: aNaturalNumber
	| pasoPrevio|.
	"este codigo se divide en muchas partes debido a la falta de un 0"
	
	(self = aNaturalNumber )
		"si son iguales devuelvo uno"
		ifTrue: [^I] .
	
	pasoPrevio :=aNaturalNumber - self.
	( pasoPrevio < self)
		ifTrue: [^I] 
		ifFalse: [^(pasoPrevio / self) next]! !

IIII / II!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:11:11'!
<= aNaturalNumber
	^(self = aNaturalNumber)  or: (self < aNaturalNumber)! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:11:51'!
<= aNaturalNumber
	^true! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:12:12' prior: 50653041!
/ aNaturalNumber
	(aNaturalNumber <= self)
		"si es mayor hago recursion"
		ifTrue: [^aNaturalNumber divideA: self] .
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:13:13' prior: 50652299!
/ aNaturalNumber
	(aNaturalNumber  = self)
	ifTrue: [^self]! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:13:40' prior: 50653119!
/ aNaturalNumber
	(aNaturalNumber  = self)
		ifTrue: [^self].
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:47'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:47'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:13:47'!
PASSED!

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:14:27'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:15:29' prior: 50652928!
previous
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados.'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:15:32'!
PASSED!

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:16:01' prior: 50653203!
previous
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:17:23' prior: 50653245!
previous
	self error: self name , ' descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:17:41'!
ERROR!
!NumerosNaturalesTest class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:25:30' prior: 50652714!
test12DivisionNoSoportaDividirPorUnNumeroMayor

	Assert should: [ III /  IIII ] signal: Error withDescription: III descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor.
	
	Assert should: [ I /  II] signal: Error withDescription: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:25:34'!
PASSED!

III / IIII!

III / IIII!
!I class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50653385!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50653385!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50653385!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50653385!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.! !
!IIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50653385!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.! !
!IIIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:27:02' overrides: 50653385!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:02'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:02'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:03'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:03'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:03'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:03'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:03'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.!

!methodRemoval: IIIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:27:03'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.!

III / III!

IIII / III!
!I class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:03' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:03' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:03' overrides: 50653505!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:04' overrides: 50653505!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:04' overrides: 50653505!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:04' overrides: 50653505!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.! !
!IIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:04' overrides: 50653505!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.! !
!IIIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:30:04' overrides: 50653505!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.!

!methodRemoval: IIIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:30:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:32:23' prior: 50652940!
- aNaturalNumber
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:32:30'!
PASSED!

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:33:25' prior: 50653617!
- aNaturalNumber
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados.'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:33:28'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:33:46' prior: 50653659!
- aNaturalNumber
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:39:18' prior: 50653701!
- aNaturalNumber
	self error:'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:39:29'!
PASSED!
!NumerosNaturalesTest class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:39:59' prior: 50652670!
test05RestaNoSoportaNumerosNegativos

	Assert should: [ I - II ] signal: Error withDescription: I DescripcionDeErrorDeNumerosNegativosNoSoportados.
! !

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:40:18'!
PASSED!
!NumerosNaturalesTest class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:40:28' prior: 50653749!
test05RestaNoSoportaNumerosNegativos

	Assert should: [ I - II ] signal: Error withDescription: I descripcionDeErrorDeNumerosNegativosNoSoportados.
! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:41:21' prior: 50653707!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:41:30'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:42:54' prior: 50653251!
previous
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:43:01' prior: 50653802!
- aNaturalNumber
	^self error: self name , ' descripcionDeErrorDeNumerosNegativosNoSoportados'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 21:43:06'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 21:43:23' prior: 50653850!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!
!I class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50653906!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50653906!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50653906!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50653906!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.! !
!IIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50653906!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.! !
!IIIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 21:43:36' overrides: 50653906!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.!

!methodRemoval: IIIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 21:43:36'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.!

----STARTUP---- (30 August 2023 22:11:17) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


----End fileIn of /home/pablo/Documents/inge1/linux64/Numeros Naturales Tests.st----!

----End fileIn of /home/pablo/Documents/inge1/linux64/Numeros Naturales.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:13:34' prior: 50650489!
previous
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:13:55' prior: 50650541!
/ aNaturalNumber
	(aNaturalNumber <= self)
		"si es mayor hago recursion"
		ifTrue: [^aNaturalNumber divideA: self] .
	^self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:17:58'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:34:18' prior: 50650454!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:23'!
PASSED!

'puto no hay negativos'!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:34:47' prior: 50650920!
- aNaturalNumber
	^self error: 'puto no hay negativos'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:34:51'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:35:07' prior: 50650962!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:36:48' prior: 50651003!
- aNaturalNumber
	self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'
	^self! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:37:01'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:37:22' prior: 50651009!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'! !

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:39:06'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:40:12' prior: 50651051!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 22:40:19'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 22:40:36' prior: 50650869!
previous
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'.! !
!I class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:03' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:03' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:04' overrides: 50651148!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:04' overrides: 50651148!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:04' overrides: 50651148!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:04' overrides: 50651148!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.! !
!IIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:04' overrides: 50651148!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.! !
!IIIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 22:41:04' overrides: 50651148!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.!

!methodRemoval: IIIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 22:41:04'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.!

!methodRemoval: I class #- stamp: 'psm 8/30/2023 22:41:23'!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'.!

I - II!

!classRemoval: #conversor stamp: 'psm 8/30/2023 22:42:25'!
DenotativeObject subclass: #conversor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIIIIII stamp: 'psm 8/30/2023 22:42:25'!
II subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIIIII stamp: 'psm 8/30/2023 22:42:26'!
II subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIIII stamp: 'psm 8/30/2023 22:42:26'!
II subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIIII stamp: 'psm 8/30/2023 22:42:27'!
II subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #IIII stamp: 'psm 8/30/2023 22:42:27'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #III stamp: 'psm 8/30/2023 22:42:27'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #II stamp: 'psm 8/30/2023 22:42:28'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #I stamp: 'psm 8/30/2023 22:42:28'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales'!

!classRemoval: #NumerosNaturalesTest stamp: 'psm 8/30/2023 22:42:34'!
DenotativeObject subclass: #NumerosNaturalesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros Naturales Tests'!

----End fileIn of /home/pablo/Documents/inge1/linux64/Numeros Naturales.st----!

----End fileIn of /home/pablo/Documents/inge1/linux64/Numeros Naturales Tests.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:24:47' prior: 50651350!
- aNaturalNumber
	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados.! !

I - II!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:24:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:25:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:25:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:25:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:25:00'!
PASSED!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:26:37' prior: 50651871!
- aNaturalNumber
	^self error: 'descripcionDeErrorDeNumerosNegativosNoSoportados'.! !

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:29:15'!
descripcionDeErrorDeNumerosNegativosNoSoportados
	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:29:30' prior: 50651913!
- aNaturalNumber
	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:29:50'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:31:41'!
ERROR!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:32:13' prior: 50651437!
/ aNaturalNumber
	| descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor |
	(aNaturalNumber <= self)
		"si es mayor hago recursion"
		ifTrue: [^aNaturalNumber divideA: self] .
	^self error: descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:33:05' prior: 50652048!
/ aNaturalNumber
	(aNaturalNumber <= self)
		"si es mayor hago recursion"
		ifTrue: [^aNaturalNumber divideA: self] .
	^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor! !
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:33:42'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:34:09' prior: 50651356!
/ aNaturalNumber
	(aNaturalNumber  = self)
		ifTrue: [^self].
	self error: 'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:34:16' prior: 50652075!
/ aNaturalNumber
	(aNaturalNumber  = self)
		ifTrue: [^self].
	self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:34:36'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:34:43'!
PASSED!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:37:58' prior: 50652068!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	^self name , 'es menor que el dividendo no se puede realizar la division'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:38:09'!
ERROR!
!II class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:39:15' prior: 50652133!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor
	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:39:44' prior: 50651385!
previous
	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados.! !
!NumerosNaturalesTest class methodsFor: 'as yet unclassified' stamp: 'psm 8/30/2023 23:40:44' prior: 50651812!
test05RestaNoSoportaNumerosNegativos

	Assert should: [ I - II ] signal: Error withDescription: 'descripcionDeErrorDeNumerosNegativosNoSoportados'.
! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'psm 8/30/2023 23:40:54'!
PASSED!
!I class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50652243!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50652243!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.! !
!IIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50652243!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.! !
!IIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50652243!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.! !
!IIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50652243!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.! !
!IIIIIIII class methodsFor: '--** private fileout/in **--' stamp: 'psm 8/30/2023 23:42:00' overrides: 50652243!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := I.
	next := III.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := II.
	next := IIII.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := III.
	next := IIIII.!

!methodRemoval: IIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIII.
	next := IIIIII.!

!methodRemoval: IIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIII.
	next := IIIIIII.!

!methodRemoval: IIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIII.
	next := IIIIIIII.!

!methodRemoval: IIIIIIII class #initializeCollaboratorsFromFile stamp: 'psm 8/30/2023 23:42:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	previous := IIIIIII.
	next := nil.!

----STARTUP---- (7 September 2023 17:16:19) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


True not !

true not !

Boolean new not!

nil !

nil !

nil ifNil: [true]!

thisContext!

MethodContext class!

MethodContext class class!

Metaclass class!

Metaclass class class !

Metaclass class class class!

----STARTUP---- (18 September 2023 15:11:31) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


----End fileIn of /home/pablo/Documents/inge1/linux64/Stack-Exercise.st----!
!OOStack methodsFor: 'operations' stamp: 'psm 9/18/2023 15:15:17' overrides: 16901772!
= anotherStack
	"Definimos esta operacion para poder testear prolijamente en SentenceFinderByPrefixTest"
	| allElementsAreEqual |
	"chequeo en caso que sea la misma posicion de memoria"
	self == anotherStack ifTrue: [^true]. 
	
	allElementsAreEqual := (anotherStack isKindOf: self class) and: (anotherStack size = self size).

	(allElementsAreEqual and: (self size > 0)) ifTrue: [
		| selfTop sndTop |
		selfTop := self pop.
		sndTop := anotherStack pop.
		allElementsAreEqual  := (self = anotherStack)  and: (selfTop value = sndTop value).
		self push: selfTop.
		anotherStack push: sndTop.
	].

	^allElementsAreEqual ! !
!OOStack methodsFor: 'operations' stamp: 'psm 9/18/2023 15:16:01' prior: 50650871 overrides: 16901772!
= anotherStack
	"Definimos esta operacion para poder testear prolijamente en SentenceFinderByPrefixTest"
	| allElementsAreEqual |
	"chequeo en caso que sea la misma posicion de memoria"
	self == anotherStack ifTrue: [^true]. 
	
	allElementsAreEqual := (anotherStack isKindOf: self class) and: (anotherStack size = self size).

	(allElementsAreEqual and: (self size > 0)) ifTrue: [
		| selfTop anotherTop |
		selfTop := self pop.
		anotherTop := anotherStack pop.
		allElementsAreEqual  := (self = anotherStack)  and: (selfTop value = anotherTop value).
		self push: selfTop.
		anotherStack push: anotherTop.
	].

	^allElementsAreEqual ! !
!OOStack methodsFor: 'operations' stamp: 'psm 9/18/2023 15:17:17' prior: 50650894 overrides: 16901772!
= anotherStack
	"Definimos esta operacion para poder testear prolijamente en SentenceFinderByPrefixTest"
	| haveSameClassTopAndSize |
	"chequeo en caso que sea la misma posicion de memoria"
	self == anotherStack ifTrue: [^true]. 
	
	haveSameClassTopAndSize := (anotherStack isKindOf: self class) and: (anotherStack size = self size).

	(haveSameClassTopAndSize and: (self size > 0)) ifTrue: [
		| selfTop anotherTop |
		selfTop := self pop.
		anotherTop := anotherStack pop.
		haveSameClassTopAndSize  := (self = anotherStack)  and: (selfTop value = anotherTop value).
		self push: selfTop.
		anotherStack push: anotherTop.
	].

	^haveSameClassTopAndSize ! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'psm 9/18/2023 15:21:38' prior: 50650608!
test10_differentStacksEqualityFailed
	
	self deny: (bigStack = emptyStack ).


! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'psm 9/18/2023 15:21:57' prior: 50650601!
test09_differentStacksEqualitySuccesful
	
	self assert: (bigStack = bigStack2 ).


! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'psm 9/18/2023 15:22:07' prior: 50650594!
test08_sameStackEqualitySuccesful

	self assert: (bigStack = bigStack ).


! !

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 15:22:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 15:22:12'!
PASSED!
!StackBase methodsFor: 'testing' stamp: 'psm 9/18/2023 15:25:27' overrides: 50650918!
= aStackBase
	^self == aStackBase ! !
!StackElement methodsFor: 'testing' stamp: 'psm 9/18/2023 15:33:02' overrides: 50650918!
= aStackElement

	^aStackElement value = self value and: aStackElement lowerElement = self lowerElement .! !
!StackBase methodsFor: 'testing' stamp: 'psm 9/18/2023 15:34:54' prior: 50651008 overrides: 50650918!
= aStackBase
	^aStackBase isKindOf: self class.! !
!OOStack methodsFor: 'testing' stamp: 'psm 9/18/2023 15:36:23' prior: 50650918 overrides: 16901772!
= anotherStack
	"Definimos esta operacion para poder testear prolijamente en SentenceFinderByPrefixTest"
	| haveSameClassTopAndSize |
	"chequeo en caso que sea la misma posicion de memoria"
	self == anotherStack ifTrue: [^true]. 
	
	haveSameClassTopAndSize := (anotherStack isKindOf: self class) and: (anotherStack size = self size).

	(haveSameClassTopAndSize and: (self size > 0)) ifTrue: [
		| selfTop anotherTop |
		selfTop := self pop.
		anotherTop := anotherStack pop.
		haveSameClassTopAndSize  := (self = anotherStack)  and: (selfTop = anotherTop).
		self push: selfTop.
		anotherStack push: anotherTop.
	].

	^haveSameClassTopAndSize ! !
!OOStack methodsFor: 'testing' stamp: 'psm 9/18/2023 15:41:31' prior: 50651024 overrides: 16901772!
= anotherStack
	"Definimos esta operacion para poder testear prolijamente en SentenceFinderByPrefixTest
	| haveSameClassTopAndSize |
	chequeo en caso que sea la misma posicion de memoria
	self == anotherStack ifTrue: [^true]. 
	
	haveSameClassTopAndSize := (anotherStack isKindOf: self class) and: (anotherStack size = self size).

	(haveSameClassTopAndSize and: (self size > 0)) ifTrue: [
		| selfTop anotherTop |
		selfTop := self pop.
		anotherTop := anotherStack pop.
		haveSameClassTopAndSize  := (self = anotherStack)  and: (selfTop = anotherTop).
		self push: selfTop.
		anotherStack push: anotherTop.
	].

	^haveSameClassTopAndSize "
	^((anotherStack isKindOf: self class) or: (anotherStack isKindOf: topElement class)) 
		and: anotherStack = topElement .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'psm 9/18/2023 15:41:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:41:47'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 15:41:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:41:47'!
ERROR!
!StackElement methodsFor: 'testing' stamp: 'psm 9/18/2023 15:43:14' prior: 50651012 overrides: 50651048!
= aStackElement

	^(aStackElement isKindOf: self class) and: aStackElement value = self value and: aStackElement lowerElement = self lowerElement .! !

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:43:21'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 15:43:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:43:21'!
ERROR!
!StackElement methodsFor: 'testing' stamp: 'psm 9/18/2023 15:44:20' prior: 50651161 overrides: 50651048!
= aStackElement

	^(aStackElement isKindOf: self class) and: (aStackElement value = self value and: aStackElement lowerElement = self lowerElement ).! !
!StackElement methodsFor: 'testing' stamp: 'psm 9/18/2023 15:44:25' prior: 50651221 overrides: 50651048!
= aStackElement

	^(aStackElement isKindOf: self class) and:
		 (aStackElement value = self value and: aStackElement lowerElement = self lowerElement ).! !

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:44:32'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 15:44:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:44:32'!
ERROR!
!StackElement methodsFor: 'testing' stamp: 'psm 9/18/2023 15:46:28' prior: 50651230 overrides: 50651048!
= aStackElement

	^(aStackElement isKindOf: self class) and:
		 [aStackElement value = self value and: aStackElement lowerElement = self lowerElement ].! !
!OOStack methodsFor: 'testing' stamp: 'psm 9/18/2023 15:46:55' prior: 50651048 overrides: 16901772!
= anotherStack
	"Definimos esta operacion para poder testear prolijamente en SentenceFinderByPrefixTest
	| haveSameClassTopAndSize |
	chequeo en caso que sea la misma posicion de memoria
	self == anotherStack ifTrue: [^true]. 
	
	haveSameClassTopAndSize := (anotherStack isKindOf: self class) and: (anotherStack size = self size).

	(haveSameClassTopAndSize and: (self size > 0)) ifTrue: [
		| selfTop anotherTop |
		selfTop := self pop.
		anotherTop := anotherStack pop.
		haveSameClassTopAndSize  := (self = anotherStack)  and: (selfTop = anotherTop).
		self push: selfTop.
		anotherStack push: anotherTop.
	].

	^haveSameClassTopAndSize "
	^((anotherStack isKindOf: self class) or: (anotherStack isKindOf: topElement class)) 
		and: [anotherStack = topElement] .! !

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 15:47:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 15:47:06'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'stackAuxiliaryOperationsForTesting' stamp: 'psm 9/18/2023 15:47:44' prior: 50650463!
bigStackRemainsTheSameAfterUsingPrefix: aPrefix
	sentenceFinderByPrefix findSentencesIn: bigStack withPrefix: aPrefix.
	self assert: (bigStack = bigStack2).
	! !

!methodRemoval: SentenceFinderByPrefixTest #thisStack:isEqualToThisStack: stamp: 'psm 9/18/2023 15:47:54'!
thisStack: fstStack isEqualToThisStack: sndStack
	"Definimos esta operacion para poder testear prolijamente en SentenceFinderByPrefixTest"
	| allElementsAreEqual |
	"chequeo en caso que sea la misma posicion de memoria"
	fstStack = sndStack ifTrue: [^true]. 
	
	allElementsAreEqual := (sndStack isKindOf: fstStack class) and: (sndStack size = fstStack size).

	(allElementsAreEqual and: (fstStack size > 0)) ifTrue: [
		| fstTop sndTop |
		fstTop := fstStack pop.
		sndTop := sndStack pop.
		allElementsAreEqual  := (self thisStack: fstStack isEqualToThisStack: sndStack)  and: (fstTop value = sndTop value).
		fstStack push: fstTop.
		sndStack push: sndTop.
	].

	^allElementsAreEqual !
!OOStack methodsFor: 'testing' stamp: 'psm 9/18/2023 15:49:27' prior: 50651298 overrides: 16901772!
= anotherStack
	
	^((anotherStack isKindOf: self class) or: (anotherStack isKindOf: topElement class)) 
		and: [anotherStack = topElement] .! !
!OOStack methodsFor: 'testing' stamp: 'psm 9/18/2023 15:54:42' prior: 50651409 overrides: 16901772!
= anotherStack
	"chanchada orientada a objetos: uso interesante de polimorfismo"
	^((anotherStack isKindOf: self class) or: (anotherStack isKindOf: topElement class)) 
		and: [anotherStack = topElement] .! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'psm 9/18/2023 15:57:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 15:57:41'!
PASSED!

----STARTUP---- (18 September 2023 17:07:45) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


----End fileIn of /home/pablo/Documents/inge1/linux64/Stack-Exercise.st----!

!classDefinition: #OOStackTop category: 'Stack-Exercise' stamp: 'psm 9/18/2023 19:25:37'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackTop subclass: #StackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackBase category: 'Stack-Exercise' stamp: 'psm 9/18/2023 19:25:37'!
OOStackTop subclass: #StackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackTop subclass: #StackElement
	instanceVariableNames: 'lowerElement value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: 'Stack-Exercise' stamp: 'psm 9/18/2023 19:25:53'!
OOStackTop subclass: #StackElement
	instanceVariableNames: 'lowerElement value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackTop methodsFor: 'testing' stamp: 'psm 9/18/2023 19:26:08'!
isEmpty

	self subclassResponsibility! !
!OOStackTop methodsFor: 'operations' stamp: 'psm 9/18/2023 19:26:29'!
lowerElement

	self subclassResponsibility! !
!OOStackTop methodsFor: 'testing' stamp: 'psm 9/18/2023 19:26:37' overrides: 16901663!
size

	self subclassResponsibility! !
!OOStackTop methodsFor: 'operations' stamp: 'psm 9/18/2023 19:26:45' overrides: 16902254!
value

	self subclassResponsibility! !
!StackBase methodsFor: 'operations' stamp: 'psm 9/18/2023 19:28:11' prior: 50650687 overrides: 50650908!
value
	^ OOStack stackEmptyErrorDescription ! !
!StackBase methodsFor: 'operations' stamp: 'psm 9/18/2023 19:28:22' prior: 50650682 overrides: 50650899!
lowerElement
	^ OOStack stackEmptyErrorDescription ! !

!methodRemoval: StackBase #= stamp: 'psm 9/18/2023 19:40:26'!
= aStackBase
	^aStackBase isKindOf: self class.!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stackElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'psm 9/18/2023 20:02:57'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentences'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:03:43' prior: 50650802!
lookForSentencesIn: aStack withPrefix: aPrefix

    | stackElements |
validSentences := OrderedCollection new.
    stackElements := Array new: aStack size.
    
    self 
	iterateInStack: aStack 
	withPrefix: aPrefix 
	toBeRestoredIn: stackElements 
	andSaveFindsIn: validSentences .

    self restoreStack: aStack withElements: stackElements .

    ^validSentences.

	! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentences stackElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentences stackElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentences stackElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentences stackElementes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentences stackElementes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentencees stackElementes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'psm 9/18/2023 20:05:41'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'validSentencees stackElementes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:06:19' prior: 50650940!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: aStack size.
    
    self 
	iterateInStack: aStack 
	withPrefix: aPrefix 
	toBeRestoredIn: stackElementes 
	andSaveFindsIn: validSentencees .

    self restoreStack: aStack withElements: stackElementes .

    ^validSentencees.

	! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack prefix validSentencees stackElementes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'psm 9/18/2023 20:06:49'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack prefix validSentencees stackElementes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix class methodsFor: 'instance creation' stamp: 'psm 9/18/2023 20:08:48'!
initializeWith: aStack over: aPrefix
	^self new initializationWith: aStack Over: aPrefix ! !
!SentenceFinderByPrefix methodsFor: 'initialization' stamp: 'psm 9/18/2023 20:09:55'!
initializationWith: aStack over: aPrefix
	stack := aStack .
	prefix := aPrefix .! !
!SentenceFinderByPrefix class methodsFor: 'instance creation' stamp: 'psm 9/18/2023 20:10:13' prior: 50651026!
initializeWith: aStack over: aPrefix
	^self new initializationWith: aStack over: aPrefix ! !
!SentenceFinderByPrefix class methodsFor: 'instance creation' stamp: 'psm 9/18/2023 20:10:18' prior: 50651039!
initializeWith: aStack over: aPrefix

	^self new initializationWith: aStack over: aPrefix ! !
!SentenceFinderByPrefix methodsFor: 'initialization' stamp: 'psm 9/18/2023 20:11:12' prior: 50651032!
initializationWith: aStack over: aPrefix

	self validPrefix: aPrefix .
	stack := aStack .
	prefix := aPrefix .! !
!SentenceFinderByPrefix methodsFor: 'check for valid entry' stamp: 'psm 9/18/2023 20:12:29'!
validStack: aStack
	(aStack isKindOf: OOStack) ifFalse: [self error: self class invalidStackError]! !
!SentenceFinderByPrefix class methodsFor: 'error messages' stamp: 'psm 9/18/2023 20:12:58'!
invalidStackError
	^'el Stack debe ser de tipo OOStack'! !
!SentenceFinderByPrefix methodsFor: 'initialization' stamp: 'psm 9/18/2023 20:13:23' prior: 50651053!
initializationWith: aStack over: aPrefix

	self validPrefix: aPrefix .
	self validStack: aStack .
	
	stack := aStack .
	prefix := aPrefix .! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:14:14' prior: 50650778!
array: anArray at: index ifItHasPrefix: aPrefix saveAtTheBeginingOf: validSentences

	((stackElementes at: index) is: aPrefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:14:36'!
at: index ifItHasPrefix: aPrefix saveAtTheBeginingOf: validSentences

	((stackElementes at: index) is: aPrefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:14:36' prior: 50650788!
iterateInStack: aStack withPrefix: aPrefix toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 aStack size to: 1 by: -1 do: [:index|
 		stackElements at: index put: aStack pop.
    	        self 
			at: index 
			ifItHasPrefix: aPrefix 
			saveAtTheBeginingOf: validSentences .
        ].

	! !

!methodRemoval: SentenceFinderByPrefix #array:at:ifItHasPrefix:saveAtTheBeginingOf: stamp: 'psm 9/18/2023 20:14:36'!
array: anArray at: index ifItHasPrefix: aPrefix saveAtTheBeginingOf: validSentences

	((stackElementes at: index) is: aPrefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:14:58'!
at: index ifItHasPrefix: aPrefix 

	((stackElementes at: index) is: aPrefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:14:58' prior: 50651101!
iterateInStack: aStack withPrefix: aPrefix toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 aStack size to: 1 by: -1 do: [:index|
 		stackElements at: index put: aStack pop.
    	        self 
			at: index 
			ifItHasPrefix: aPrefix 
			.
        ].

	! !

!methodRemoval: SentenceFinderByPrefix #at:ifItHasPrefix:saveAtTheBeginingOf: stamp: 'psm 9/18/2023 20:14:58'!
at: index ifItHasPrefix: aPrefix saveAtTheBeginingOf: validSentences

	((stackElementes at: index) is: aPrefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:15:16' prior: 50651125!
at: index ifItHasPrefix: aPrefix 

	((stackElementes at: index) is: prefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:15:27' overrides: 16901507!
at: index  

	((stackElementes at: index) is: prefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:15:27' prior: 50651134!
iterateInStack: aStack withPrefix: aPrefix toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 aStack size to: 1 by: -1 do: [:index|
 		stackElements at: index put: aStack pop.
    	        self 
			at: index 
			.
        ].

	! !

!methodRemoval: SentenceFinderByPrefix #at:ifItHasPrefix: stamp: 'psm 9/18/2023 20:15:27'!
at: index ifItHasPrefix: aPrefix 

	((stackElementes at: index) is: prefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:16:02'!
checkForPrefixInSentenceAt: index  

	((stackElementes at: index) is: prefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes at: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:16:02' prior: 50651174!
iterateInStack: aStack withPrefix: aPrefix toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 aStack size to: 1 by: -1 do: [:index|
 		stackElements at: index put: aStack pop.
    	        self 
			checkForPrefixInSentenceAt: index 
			.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:16:02' prior: 50651165 overrides: 16901507!
at: index  

	((stackElementes checkForPrefixInSentenceAt: index) is: prefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes checkForPrefixInSentenceAt: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:16:02' prior: 50651193!
checkForPrefixInSentenceAt: index  

	((stackElementes checkForPrefixInSentenceAt: index) is: prefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes checkForPrefixInSentenceAt: index). ].

	! !

!methodRemoval: SentenceFinderByPrefix #at: stamp: 'psm 9/18/2023 20:16:02'!
at: index  

	((stackElementes checkForPrefixInSentenceAt: index) is: prefix substringAt: 1)
            ifTrue:[validSentencees addFirst: (stackElementes checkForPrefixInSentenceAt: index). ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:16:53' prior: 50651202!
iterateInStack: aStack withPrefix: aPrefix toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 aStack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:17:27'!
iterateInStack: aStack toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 aStack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:17:27' prior: 50650996!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: aStack size.
    
    self 
	iterateInStack: aStack 
	toBeRestoredIn: stackElementes 
	andSaveFindsIn: validSentencees .

    self restoreStack: aStack withElements: stackElementes .

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #iterateInStack:withPrefix:toBeRestoredIn:andSaveFindsIn: stamp: 'psm 9/18/2023 20:17:27'!
iterateInStack: aStack withPrefix: aPrefix toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 aStack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:18:11' prior: 50651255!
iterateInStack: aStack toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:18:23'!
toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:18:23' prior: 50651266!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: aStack size.
    
    self 
	toBeRestoredIn: stackElementes 
	andSaveFindsIn: validSentencees .

    self restoreStack: aStack withElements: stackElementes .

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #iterateInStack:toBeRestoredIn:andSaveFindsIn: stamp: 'psm 9/18/2023 20:18:23'!
iterateInStack: aStack toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:18:40'!
toBeRestoredIn: stackElements 
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:18:40' prior: 50651315!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: aStack size.
    
    self 
	toBeRestoredIn: stackElementes 
	.

    self restoreStack: aStack withElements: stackElementes .

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #toBeRestoredIn:andSaveFindsIn: stamp: 'psm 9/18/2023 20:18:40'!
toBeRestoredIn: stackElements andSaveFindsIn: validSentences
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:18:58'!
toBeRestoredIn 
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:18:58' prior: 50651349!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: aStack size.
    
    self 
	toBeRestoredIn.

    self restoreStack: aStack withElements: stackElementes .

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #toBeRestoredIn: stamp: 'psm 9/18/2023 20:18:58'!
toBeRestoredIn: stackElements 
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:19:23'!
iterateInStackToBeRestoredIn 
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:19:23' prior: 50651380!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: aStack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: aStack withElements: stackElementes .

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #toBeRestoredIn stamp: 'psm 9/18/2023 20:19:23'!
toBeRestoredIn 
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:19:48' prior: 50651410!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:20:09'!
lookForSentencesIn: aStack 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:20:09' prior: 50650835!
findSentencesIn: aStack withPrefix: aPrefix

    self validPrefix: aPrefix.

    ^self lookForSentencesIn: aStack .

	! !

!methodRemoval: SentenceFinderByPrefix #lookForSentencesIn:withPrefix: stamp: 'psm 9/18/2023 20:20:09'!
lookForSentencesIn: aStack withPrefix: aPrefix

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:20:26'!
lookForSentencesIn 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:20:26' prior: 50651454!
findSentencesIn: aStack withPrefix: aPrefix

    self validPrefix: aPrefix.

    ^self lookForSentencesIn.

	! !

!methodRemoval: SentenceFinderByPrefix #lookForSentencesIn: stamp: 'psm 9/18/2023 20:20:26'!
lookForSentencesIn: aStack 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:21:10'!
lookForSentencesInSatckWithPrefix 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:21:10' prior: 50651485!
findSentencesIn: aStack withPrefix: aPrefix

    self validPrefix: aPrefix.

    ^self lookForSentencesInSatckWithPrefix.

	! !

!methodRemoval: SentenceFinderByPrefix #lookForSentencesIn stamp: 'psm 9/18/2023 20:21:10'!
lookForSentencesIn 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self 
	iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:21:19' prior: 50651503!
lookForSentencesInSatckWithPrefix 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self iterateInStackToBeRestoredIn.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:21:28'!
iterateInStackToBeRestored 
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:21:29' prior: 50651533!
lookForSentencesInSatckWithPrefix 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self iterateInStackToBeRestored.

    self restoreStack: stack withElements: stackElementes .

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #iterateInStackToBeRestoredIn stamp: 'psm 9/18/2023 20:21:29'!
iterateInStackToBeRestoredIn 
	 stack size to: 1 by: -1 do: [:index|
 		stackElementes at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:22:00' prior: 50650818!
restoreStack: aStack withElements: stackElements

    stackElementes do: [:stackElement | stack push: stackElement ].

	! !
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:22:13'!
restoreStack: aStack 

    stackElementes do: [:stackElement | stack push: stackElement ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:22:13' prior: 50651553!
lookForSentencesInSatckWithPrefix 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self iterateInStackToBeRestored.

    self restoreStack: stack .

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #restoreStack:withElements: stamp: 'psm 9/18/2023 20:22:13'!
restoreStack: aStack withElements: stackElements

    stackElementes do: [:stackElement | stack push: stackElement ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:22:28'!
restoreStack 

    stackElementes do: [:stackElement | stack push: stackElement ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:22:28' prior: 50651588!
lookForSentencesInSatckWithPrefix 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self iterateInStackToBeRestored.

    self restoreStack.

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #restoreStack: stamp: 'psm 9/18/2023 20:22:29'!
restoreStack: aStack 

    stackElementes do: [:stackElement | stack push: stackElement ].

	!
!SentenceFinderByPrefix methodsFor: 'auxiliar operations' stamp: 'psm 9/18/2023 20:22:51'!
restoreStackWithStackElements 

    stackElementes do: [:stackElement | stack push: stackElement ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:22:51' prior: 50651612!
lookForSentencesInSatckWithPrefix 

    validSentencees := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self iterateInStackToBeRestored.

    self restoreStackWithStackElements.

    ^validSentencees.

	! !

!methodRemoval: SentenceFinderByPrefix #restoreStack stamp: 'psm 9/18/2023 20:22:51'!
restoreStack 

    stackElementes do: [:stackElement | stack push: stackElement ].

	!
!SentenceFinderByPrefix methodsFor: 'operations' stamp: 'psm 9/18/2023 20:23:24'!
withPrefix: aPrefix

    self validPrefix: aPrefix.

    ^self lookForSentencesInSatckWithPrefix.

	! !

!methodRemoval: SentenceFinderByPrefix #findSentencesIn:withPrefix: stamp: 'psm 9/18/2023 20:23:24'!
findSentencesIn: aStack withPrefix: aPrefix

    self validPrefix: aPrefix.

    ^self lookForSentencesInSatckWithPrefix.

	!
!SentenceFinderByPrefix methodsFor: 'operations' stamp: 'psm 9/18/2023 20:23:39' prior: 50651651!
withPrefix: aPrefix

    ^self lookForSentencesInSatckWithPrefix.

	! !
!SentenceFinderByPrefix methodsFor: 'operations' stamp: 'psm 9/18/2023 20:23:44'!
withPrefix

    ^self lookForSentencesInSatckWithPrefix.

	! !

!methodRemoval: SentenceFinderByPrefix #withPrefix: stamp: 'psm 9/18/2023 20:23:45'!
withPrefix: aPrefix

    ^self lookForSentencesInSatckWithPrefix.

	!
!SentenceFinderByPrefix methodsFor: 'operations' stamp: 'psm 9/18/2023 20:23:52'!
find

    ^self lookForSentencesInSatckWithPrefix.

	! !

!methodRemoval: SentenceFinderByPrefix #withPrefix stamp: 'psm 9/18/2023 20:23:52'!
withPrefix

    ^self lookForSentencesInSatckWithPrefix.

	!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'psm 9/18/2023 20:24:26'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack prefix validSentences stackElementes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:24:26' prior: 50651225!
checkForPrefixInSentenceAt: index  

	((stackElementes checkForPrefixInSentenceAt: index) is: prefix substringAt: 1)
            ifTrue:[validSentences addFirst: (stackElementes checkForPrefixInSentenceAt: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:24:26' prior: 50651635!
lookForSentencesInSatckWithPrefix 

    validSentences := OrderedCollection new.
    stackElementes := Array new: stack size.
    
    self iterateInStackToBeRestored.

    self restoreStackWithStackElements.

    ^validSentences.

	! !

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'psm 9/18/2023 20:24:37'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack prefix validSentences stackElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:24:37' prior: 50651710!
lookForSentencesInSatckWithPrefix 

    validSentences := OrderedCollection new.
    stackElements := Array new: stack size.
    
    self iterateInStackToBeRestored.

    self restoreStackWithStackElements.

    ^validSentences.

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:24:37' prior: 50651628!
restoreStackWithStackElements 

    stackElements do: [:stackElement | stack push: stackElement ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:24:37' prior: 50651699!
checkForPrefixInSentenceAt: index  

	((stackElements checkForPrefixInSentenceAt: index) is: prefix substringAt: 1)
            ifTrue:[validSentences addFirst: (stackElements checkForPrefixInSentenceAt: index). ].

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:24:37' prior: 50651544!
iterateInStackToBeRestored 
	 stack size to: 1 by: -1 do: [:index|
 		stackElements at: index put: stack pop.
    	        self checkForPrefixInSentenceAt: index.
        ].

	! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'psm 9/18/2023 20:26:52' prior: 50650497!
test011_prefixWithSpacesFails

	self
		should: [SentenceFinderByPrefix initializeWith: bigStack over: 'wi n'.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix spacesInPrefixError .].


! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'psm 9/18/2023 20:27:42' prior: 50650508!
test01_nonEmptyString
	self
		should: [(SentenceFinderByPrefix initializeWith: emptyStack over: '') find.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix emptyPrefixError .].
	
! !
!SentenceFinderByPrefixTest methodsFor: 'testing' stamp: 'psm 9/18/2023 20:27:57' prior: 50651768!
test011_prefixWithSpacesFails

	self
		should: [(SentenceFinderByPrefix initializeWith: bigStack over: 'wi n') find.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix spacesInPrefixError .].


! !
!SentenceFinderByPrefix class methodsFor: 'instance creation' stamp: 'psm 9/18/2023 20:28:27'!
with: aStack over: aPrefix

	^self new initializationWith: aStack over: aPrefix ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:28:27' prior: 50651790!
test011_prefixWithSpacesFails

	self
		should: [(SentenceFinderByPrefix with: bigStack over: 'wi n') find.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix spacesInPrefixError .].


! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'psm 9/18/2023 20:28:27' prior: 50651779!
test01_nonEmptyString
	self
		should: [(SentenceFinderByPrefix with: emptyStack over: '') find.]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix emptyPrefixError .].
	
! !

!methodRemoval: SentenceFinderByPrefix class #initializeWith:over: stamp: 'psm 9/18/2023 20:28:27'!
initializeWith: aStack over: aPrefix

	^self new initializationWith: aStack over: aPrefix !
!SentenceFinderByPrefixTest methodsFor: 'stackAuxiliaryOperationsForTesting' stamp: 'psm 9/18/2023 20:29:41' prior: 50650449!
assertExpectedOutput: aCollectionOfValidSentences withStackOfSentences: aStackOfSentences andPrefix: aPrefix
	| anOrderedCollection |

	anOrderedCollection := (SentenceFinderByPrefix with: aStackOfSentences over: aPrefix) find.
	self assert: (anOrderedCollection = aCollectionOfValidSentences).
! !
!SentenceFinderByPrefixTest methodsFor: 'stackAuxiliaryOperationsForTesting' stamp: 'psm 9/18/2023 20:30:03' prior: 50650463!
bigStackRemainsTheSameAfterUsingPrefix: aPrefix
	(SentenceFinderByPrefix with: bigStack over: aPrefix) find.
	self assert: (bigStack = bigStack2).
	! !

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 20:30:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 20:30:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 20:30:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 20:30:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 20:30:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 20:30:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 20:30:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 20:30:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 20:30:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 20:30:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 20:30:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 20:30:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 20:30:07'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'psm 9/18/2023 20:49:56'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'psm 9/18/2023 20:49:56'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'psm 9/18/2023 20:49:56'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test011_prefixWithSpacesFails stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01_nonEmptyString stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02_succesfulFindOnStackWithOnlyPrefix stamp: 'psm 9/18/2023 20:49:56'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03_succesfulFindOnStackWithOneWord stamp: 'psm 9/18/2023 20:49:56'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04_failedFindOnStackWithOneWord stamp: 'psm 9/18/2023 20:49:56'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05_failedFindOnEmptyStack stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06_succesfulFindOnBigStack stamp: 'psm 9/18/2023 20:49:56'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07_failedFindOnBigStackBecauseOfLowerCase stamp: 'psm 9/18/2023 20:49:56'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08_sameStackEqualitySuccesful stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test09_differentStacksEqualitySuccesful stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test10_differentStacksEqualityFailed stamp: 'psm 9/18/2023 20:49:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test11_stackRemainsTheSameAfterFailedFindByPrefix stamp: 'psm 9/18/2023 20:49:56'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test12_stackRemainsTheSameAfterSuccesfulFindByPrefix stamp: 'psm 9/18/2023 20:49:56'!
ERROR!

----STARTUP---- (25 September 2023 17:32:59) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


----End fileIn of /home/pablo/Documents/inge1/linux64/ISW1-2023-2C-Parcial-1.st----!
!Delantero class methodsFor: 'no messages' stamp: 'psm 9/25/2023 17:36:12'!
decideTirarAColocarSuFuerzaBaseEs: fuerzaDelDelantero

! !

Object subclass: #Delantero
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Delantero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:36:25'!
Object subclass: #Delantero
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:36:52' prior: 50651531!
decideTirarAColocarSuFuerzaBaseEs: fuerzaDelDelantero

	^self new initializeWith: fuerzaDelDelantero 

! !
!Delantero methodsFor: 'no messages' stamp: 'psm 9/25/2023 17:37:37'!
initializeWith: unaFuerza! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:37:47' prior: 50651555!
initializeWith: unaFuerza

	fuerza := unaFuerza ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:38:01' prior: 50651559!
initializeWith: fuerzaDelDelantero

	fuerza := fuerzaDelDelantero ! !
!Pelota class methodsFor: 'no messages' stamp: 'psm 9/25/2023 17:38:28'!
jabulaniSudafricanaRapida! !

Object subclass: #Pelota
	instanceVariableNames: 'tipo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Pelota category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:38:37'!
Object subclass: #Pelota
	instanceVariableNames: 'tipo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Pelota class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:39:10' prior: 50651569!
jabulaniSudafricanaRapida

	^self new esJabulaniSudafricanaRapida! !
!Pelota methodsFor: 'no messages' stamp: 'psm 9/25/2023 17:39:45'!
esJabulaniSudafricanaRapida
	
	tipo := #jabulani! !
!Arquero class methodsFor: 'no messages' stamp: 'psm 9/25/2023 17:41:13'!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: fuerzaDelArquero

	^self new variablesRawTypesUnload: fuerzaDelArquero ! !

!classDefinition: #Arquero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:41:53'!
Object subclass: #Arquero
	instanceVariableNames: 'partida'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Arquero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:42:03'!
Object subclass: #Arquero
	instanceVariableNames: 'partida fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Arquero methodsFor: 'no messages' stamp: 'psm 9/25/2023 17:42:01'!
vaAdelantadoYconFuerza: fuerzaDelArquero 

	partida := #adelantado.
	fuerza := fuerzaDelArquero ! !

!classDefinition: #Arquero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:42:30'!
Object subclass: #Arquero
	instanceVariableNames: 'posicionDePartida fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:42:30' prior: 50651615!
vaAdelantadoYconFuerza: fuerzaDelArquero 

	posicionDePartida := #adelantado.
	fuerza := fuerzaDelArquero ! !
!Penales class methodsFor: 'nil' stamp: 'psm 9/25/2023 17:43:56'!
conDelantero: unDelantero yArquero: unArquero

	self new inicilizoConDelantero: unDelantero yArquero: unArquero 
! !
!Penales class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:44:03' prior: 50651635!
conDelantero: unDelantero yArquero: unArquero

	self new inicializoConDelantero: unDelantero yArquero: unArquero 
! !

!classDefinition: #Penales category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:44:43'!
Object subclass: #Penales
	instanceVariableNames: 'delantero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Penales category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:44:44'!
Object subclass: #Penales
	instanceVariableNames: 'delantero arquero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Penales methodsFor: 'nil' stamp: 'psm 9/25/2023 17:44:41'!
inicializoConDelantero: unDelantero yArquero: unArquero 

	delantero := unDelantero.
	arquero := unArquero .! !

1@2 between: 0@0 and: 3@3!

3@2 between: 0@0 and: 3@3!

3@3 between: 0@0 and: 3@3 !

Object subclass: #Penales
	instanceVariableNames: 'delantero puntajeDeDelantero arquero puntajeDeArquero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Penales category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 17:47:55'!
Object subclass: #Penales
	instanceVariableNames: 'delantero puntajeDeDelantero arquero puntajeDeArquero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Penales methodsFor: 'nil' stamp: 'psm 9/25/2023 17:48:28' overrides: 16920235!
initialize
	
	puntajeDeDelantero := 0.
	puntajeDeArquero  := 0.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:48:52'!
puntajeDeDelantero

	^puntajeDeDelantero ! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:49:08'!
puntajeDeArquero

	^puntajeDeArquero ! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:51:48' prior: 50651441!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self tieneQueEstarEnElArco: posicionDeDisparoDelantero.
	self tieneQueEstarEnElArco: posicionDePrediccionDelArquero.! !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 17:52:58'!
tieneQueEstarEnElArco: posicionDeApuntado.
	posicionDeApuntado between: 0@0 and: 3@3! !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 17:53:36' prior: 50651713!
tieneQueEstarEnElArco: posicionDeApuntado.
	(posicionDeApuntado between: 0@0 and: 3@3) 
		ifFalse:[self error: 'algo']! !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 17:54:31' prior: 50651719!
tieneQueEstarEnElArco: posicionDeApuntado.
	
	^posicionDeApuntado between: 0@0 and: 3@3! !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 17:55:47' prior: 50651701!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self class direccionArqueroFueraDeRango ].! !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 17:56:01' prior: 50651732!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 17:56:15'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 17:56:40'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 17:56:48'!
ERROR!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 17:58:08' prior: 50651594!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: fuerzaDelArquero

	^self new vaAdelantadoYconFuerza: fuerzaDelArquero ! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 17:58:12'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 17:58:12'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 17:58:25'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 17:58:46'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 17:58:46'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 17:58:49'!
FAILURE!

-1@0 between: 0@0 and: 3@3 !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:01:37'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:01:43'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:01:43'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:01:52'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:05:18'!
FAILURE!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:05:18'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:05:19'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:05:19'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:05:19'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:05:19'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:05:19'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:05:19'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:05:19'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:05:39'!
FAILURE!

 error messageText!
!Penales class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:09:50' prior: 50651642!
conDelantero: unDelantero yArquero: unArquero

	^self new inicializoConDelantero: unDelantero yArquero: unArquero 
! !

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:10:02'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:10:02'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:10:02'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:10:02'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:10:02'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:10:02'!
FAILURE!
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 18:11:39' prior: 50651726!
tieneQueEstarEnElArco: posicionDeApuntado.
	
	^posicionDeApuntado between: 0@0 and: 2@2! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:11:40'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:11:40'!
FAILURE!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:11:40'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:11:40'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:11:40'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:11:40'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:11:40'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:12:48'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:12:48'!
FAILURE!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:12:48'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:12:48'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:12:48'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:12:48'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:12:48'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:12:49'!
ERROR!

!classDefinition: #Penales category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 18:14:32'!
Object subclass: #Penales
	instanceVariableNames: 'delantero puntajeDeDelantero arquero puntajeDeArquero direccionUltimoRemate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:14:31'!
varDireccionRemateResultante

	^direccionUltimoRemate! !

1 next!

1 increment !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 18:19:05' prior: 50651748!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	
	(posicionDeDisparoDelantero = posicionDePrediccionDelArquero ) 
		ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
		ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
		
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:19:09'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:19:09'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:19:10'!
FAILURE!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:19:10'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:19:10'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:19:10'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:19:10'!
ERROR!
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:20:24' prior: 50651549!
decideTirarAColocarSuFuerzaBaseEs: fuerzaDelDelantero

	^self new tiraAcolorcarConFuerza: fuerzaDelDelantero 

! !

!methodRemoval: Delantero #initializeWith: stamp: 'psm 9/25/2023 18:20:46'!
initializeWith: fuerzaDelDelantero

	fuerza := fuerzaDelDelantero !

!classDefinition: #Delantero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 18:21:29'!
Object subclass: #Delantero
	instanceVariableNames: 'fuerza modoDeDisparo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Delantero methodsFor: 'no messages' stamp: 'psm 9/25/2023 18:21:28'!
tiraAcolorcarConFuerza: fuerzaDelDelantero 
	modoDeDisparo := #aColocar.
	fuerza := fuerzaDelDelantero ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:22:09'!
modoDeDisparo

	^modoDeDisparo ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:22:51'!
posicionDePartida
	^posicionDePartida ! !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 18:25:20' prior: 50652923!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	
	(arquero posicionDePartida = #adelantado and: delantero modoDeDisparo = #	aColocar)
		ifTrue : [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero ) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:25:27'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:25:27'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:25:27'!
ERROR!
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 18:26:46' prior: 50653118!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	
	(arquero posicionDePartida = #adelantado and: delantero modoDeDisparo = #	aColocar)
		ifTrue : [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero ) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'ayuda diseñador del juego' stamp: 'psm 9/25/2023 18:27:31' prior: 50653284!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	
	(arquero posicionDePartida = #adelantado and: delantero modoDeDisparo = #	aColocar)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero ) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:27:35'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:27:35'!
FAILURE!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:27:35'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:27:35'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:27:35'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:27:35'!
ERROR!
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:31:15' prior: 50653103!
tiraAcolorcarConFuerza: fuerzaDelDelantero 
	modoDeDisparo := #aColocar.
	fuerza := fuerzaDelDelantero * 1/2! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:31:23' prior: 50653479!
tiraAcolorcarConFuerza: fuerzaDelDelantero 
	modoDeDisparo := #aColocar.
	fuerza := fuerzaDelDelantero / 2! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:34:19' prior: 50653313!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	
	(arquero posicionDePartida = #adelantado and: delantero modoDeDisparo = #	aColocar and: unaPelota TimeLineEvent = #playera)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero ) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:34:31' prior: 50653493!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	
	(arquero posicionDePartida = #adelantado and: delantero modoDeDisparo = #	aColocar and: unaPelota tipoDePelota = #playera)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero ) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:34:55'!
tipoDePelota
	^tipo ! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:36:10' prior: 50653523!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	
	(arquero posicionDePartida = #adelantado 
	and: delantero modoDeDisparo = #	aColocar 
	and: unaPelota tipoDePelota = #playera)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: delantero fuerza <= arquero fuerza) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:36:34'!
fuerza
	^fuerza ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:36:47'!
fuerza
	^fuerza ! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:37:06'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:37:06'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:37:06'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:37:36'!
ERROR!
!Penales methodsFor: 'debug' stamp: 'psm 9/25/2023 18:37:57'!
varFuerzaResultanteDeTiro
	self shouldBeImplemented.! !

!classDefinition: #Penales category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 18:38:21'!
Object subclass: #Penales
	instanceVariableNames: 'delantero puntajeDeDelantero arquero puntajeDeArquero direccionUltimoRemate varFuerzaUltimoTiro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Penales methodsFor: 'debug' stamp: 'psm 9/25/2023 18:38:19' prior: 50653733!
varFuerzaResultanteDeTiro
	
	^varFuerzaUltimoTiro! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:38:56' prior: 50653556!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	
	(arquero posicionDePartida = #adelantado 
	and: delantero modoDeDisparo = #	aColocar 
	and: unaPelota tipoDePelota = #playera)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: delantero fuerza <= arquero fuerza) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:39:03'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:39:03'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:39:03'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:39:24'!
ERROR!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:39:34'!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: aRenameMe1 
	self shouldBeImplemented.! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:40:37' prior: 50653927!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerzaDeArquero 
	self new vaDesdeLalineaYconFuerza: unaFuerzaDeArquero ! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:40:49'!
ERROR!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:40:57'!
vaDesdeLalineaYconFuerza: unaFuerzaDeArquero 
	self shouldBeImplemented.! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:41:32' prior: 50653944!
vaDesdeLalineaYconFuerza: unaFuerzaDeArquero 
	posicionDePartida := #enLaLinea.
	fuerza := unaFuerzaDeArquero / 2.! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:41:36'!
ERROR!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:42:34' prior: 50653933!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerzaDeArquero 

	^self new vaDesdeLalineaYconFuerza: unaFuerzaDeArquero ! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:42:43'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:42:43'!
FAILURE!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:42:43'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:42:43'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:42:43'!
ERROR!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:43:52' prior: 50651629!
vaAdelantadoYconFuerza: fuerzaDelArquero 

	posicionDePartida := #adelantado.
	fuerza := fuerzaDelArquero * 3/2 ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:43:58' prior: 50653950!
vaDesdeLalineaYconFuerza: unaFuerzaDeArquero 
	posicionDePartida := #enLaLinea.
	fuerza := unaFuerzaDeArquero.! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:44:03'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:44:03'!
FAILURE!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:44:03'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:44:03'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:44:25'!
FAILURE!
!PenalesTest methodsFor: 'assertions' stamp: 'psm 9/25/2023 18:44:32' overrides: 16961444!
assert: aRenameMe1 description: aRenameMe2 
	self shouldBeImplemented.! !

!classDefinition: #Arquero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 18:46:05'!
Object subclass: #Arquero
	instanceVariableNames: 'posicionDePartida fuerza varFuerzaDeAtajada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:46:04'!
varFuerzaResultanteDeAtajada
	^varFuerzaDeAtajada! !

!methodRemoval: Arquero #varFuerzaResultanteDeAtajada stamp: 'psm 9/25/2023 18:46:43'!
varFuerzaResultanteDeAtajada
	^varFuerzaDeAtajada!

Object subclass: #Arquero
	instanceVariableNames: 'posicionDePartida fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Arquero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 18:46:50'!
Object subclass: #Arquero
	instanceVariableNames: 'posicionDePartida fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Penales category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 18:47:39'!
Object subclass: #Penales
	instanceVariableNames: 'delantero puntajeDeDelantero arquero puntajeDeArquero direccionUltimoRemate varFuerzaUltimoTiro varFuerzaDeAtajada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:47:37'!
varFuerzaResultanteDeAtajada
	^varFuerzaDeAtajada! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:48:19' prior: 50653753!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	(arquero posicionDePartida = #adelantado 
	and: delantero modoDeDisparo = #	aColocar 
	and: unaPelota tipoDePelota = #playera)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: delantero fuerza <= arquero fuerza) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:48:55' prior: 50654113!
vaDesdeLalineaYconFuerza: fuerzaDelArquero 
	posicionDePartida := #enLaLinea.
	fuerza := fuerzaDelArquero.! !

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:49:25'!
ERROR!
!Penales methodsFor: 'testeo' stamp: 'psm 9/25/2023 18:50:01' prior: 50654308!
varFuerzaResultanteDeAtajada

	^varFuerzaDeAtajada! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:50:13'!
ERROR!

!methodRemoval: PenalesTest #assert:description: stamp: 'psm 9/25/2023 18:50:43'!
assert: aRenameMe1 description: aRenameMe2 
	self shouldBeImplemented.!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:50:49'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:50:49'!
FAILURE!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:50:49'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:50:49'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:50:49'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:50:56'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:52:22'!
FAILURE!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:54:20' prior: 50654106!
vaAdelantadoYconFuerza: fuerzaDelArquero 

	posicionDePartida := #adelantado.
	fuerza := (fuerzaDelArquero * 3/2).! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 18:57:18' prior: 50654347!
vaDesdeLalineaYconFuerza: fuerzaDelArquero 
	posicionDePartida := #enLaLinea.
	fuerza := fuerzaDelArquero * 3/2.! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 18:57:20'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:57:20'!
FAILURE!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 18:57:20'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 18:57:20'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:01:05' prior: 50654313!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:
	[(delantero modoDeDisparo = #	aColocar 
	and: unaPelota tipoDePelota = #playera)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero y = posicionDePrediccionDelArquero y
			and: delantero fuerza <= arquero fuerza) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: delantero fuerza <= arquero fuerza) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:01:30' prior: 50654801!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:
	[(delantero modoDeDisparo = #	aColocar 
	and: unaPelota tipoDePelota = #playera)
		ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
		ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
			and: delantero fuerza <= arquero fuerza) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: delantero fuerza <= arquero fuerza) 
			ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
			ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:01:48' prior: 50654650!
vaAdelantadoYconFuerza: fuerzaDelArquero 

	posicionDePartida := #adelantado.
	fuerza := fuerzaDelArquero.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:02:57' prior: 50654843!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
				and: delantero fuerza <= arquero fuerza) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: delantero fuerza <= arquero fuerza) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:03:14'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:03:14'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:03:14'!
ERROR!
!Pelota class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:04:04'!
playeraLentaCostaAzul

	^self new esPlayeraLentaCostaAzul! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:04:24'!
esPlayeraLentaCostaAzul
	
	tipo := #playera! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:04:37' prior: 50654892!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
				and: delantero fuerza <= arquero fuerza) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: delantero fuerza <= arquero fuerza) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:04:47'!
FAILURE!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:04:47'!
FAILURE!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:04:47'!
FAILURE!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:04:47'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:04:47'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:04:54'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:07:24' prior: 50655081!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	unaPelota tipoDePelota = #playera ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8].
	varFuerzaDeAtajada := arquero fuerza.
	
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:07:29'!
FAILURE!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:07:29'!
FAILURE!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:07:29'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:07:29'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:07:29'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:10:06' prior: 50655265!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #nodi)].
	
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:11:20' prior: 50655448!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:11:29'!
FAILURE!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:11:29'!
FAILURE!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:11:29'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:11:29'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:12:30'!
FAILURE!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:17:19' prior: 50654657!
vaDesdeLalineaYconFuerza: fuerzaDelArquero 
	posicionDePartida := #enLaLinea.
	fuerza := fuerzaDelArquero.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:18:48' prior: 50655495!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:18:50'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:18:50'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:18:50'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:23:11' prior: 50655692!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoDelantero x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:23:25'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:23:25'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:23:37'!
ERROR!

12 @ 1 y!

12@1 y!

(12@1) y!

12@1!

12@1!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:32:12' prior: 50655882!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	| posicionDeDisparoObtenida |
	
	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	(delantero modoDeDisparo = #aMatar 
	and: (posicionDeDisparoDelantero = 2@2 or: posicionDeDisparoDelantero = 0@2))
		ifTrue: [posicionDeDisparoObtenida := 1@(posicionDeDisparoDelantero x).]
		ifFalse: [posicionDeDisparoObtenida := posicionDeDisparoDelantero ].
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoObtenida x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoObtenida = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:32:13'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:32:14'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:32:14'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:32:14'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:32:14'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:32:14'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:32:14'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:32:14'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:32:14'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:32:14'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:32:52' prior: 50656078!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	| posicionDeDisparoObtenida |
	
	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	(delantero modoDeDisparo = #aMatar 
	and: (posicionDeDisparoDelantero = 2@2 or: posicionDeDisparoDelantero = 0@2))
		ifTrue: [posicionDeDisparoObtenida := (posicionDeDisparoDelantero x)@1.]
		ifFalse: [posicionDeDisparoObtenida := posicionDeDisparoDelantero ].
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoObtenida x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoObtenida = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:33:19' prior: 50656277!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	| posicionDeDisparoObtenida |
	
	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	posicionDeDisparoObtenida := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar 
	and: (posicionDeDisparoDelantero = 2@2 or: posicionDeDisparoDelantero = 0@2))
		ifTrue: [posicionDeDisparoObtenida := (posicionDeDisparoDelantero x)@1.].
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoObtenida x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoObtenida = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:33:21'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:33:21'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:33:21'!
ERROR!
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:34:59'!
decideTirarAMatarSuFuerzaBaseEs: fuerzaDelDelantero

	^self new tiraAMatarConFuerza: fuerzaDelDelantero 

! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:35:29'!
tiraAMatarConFuerza: fuerzaDelDelantero  
	modoDeDisparo := #aMatar.
	fuerza := fuerzaDelDelantero.! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:35:33' prior: 50653486!
tiraAcolorcarConFuerza: fuerzaDelDelantero 
	modoDeDisparo := #aColocar.
	fuerza := fuerzaDelDelantero / 2.! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:35:41'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:35:41'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:35:51'!
ERROR!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:36:32' prior: 50656340!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	| posicionDeDisparoObtenida |
	
	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	posicionDeDisparoObtenida := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar 
	and: (posicionDeDisparoDelantero = (2@2) or: posicionDeDisparoDelantero = (0@2)))
		ifTrue: [posicionDeDisparoObtenida := ((posicionDeDisparoDelantero x)@1).].
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoObtenida x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoObtenida = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:36:35'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:36:35'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:38:57' prior: 50656699!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	| posicionDeDisparoObtenida |
	
	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	posicionDeDisparoObtenida := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar 
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y = 2 or: posicionDeDisparoDelantero y = 0))
		ifTrue: [posicionDeDisparoObtenida := ((posicionDeDisparoDelantero x)@1).].
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoObtenida x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoObtenida = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:40:06' prior: 50656899!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	| posicionDeDisparoObtenida |
	
	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	direccionUltimoRemate := posicionDeDisparoDelantero .
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	posicionDeDisparoObtenida := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [posicionDeDisparoObtenida := ((posicionDeDisparoDelantero x)@1).].
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoObtenida x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoObtenida = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:40:09'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:40:09'!
FAILURE!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:40:18'!
FAILURE!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:41:33'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:43:05' prior: 50656963!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	| posicionDeDisparoObtenida |
	
	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	posicionDeDisparoObtenida := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [posicionDeDisparoObtenida := ((posicionDeDisparoDelantero x)@1).].
		
	direccionUltimoRemate := posicionDeDisparoObtenida .
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(posicionDeDisparoObtenida x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(posicionDeDisparoObtenida = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:43:10'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:43:10'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:45:10' prior: 50657172!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:45:11'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:45:11'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:45:12'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:46:05' prior: 50657372!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:46:07'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:46:07'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:46:26' prior: 50657569!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:47:25'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:47:25'!
FAILURE!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:47:29'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:51:57' prior: 50657765!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [(delantero modoDeDisparo = #aColocar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.].
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani and: arquero posicionDePartida = #enLaLinea)
		ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:51:59'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:51:59'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:54:45' prior: 50657966!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [(delantero modoDeDisparo = #aColocar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.].
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
			(delantero modoDeDisparo = #aMatar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 1.2.].
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:54:53'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:54:53'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 19:55:55' prior: 50658165!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [(delantero modoDeDisparo = #aColocar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.].
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
			(delantero modoDeDisparo = #aMatar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 1.2.].
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:55:55'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:55:55'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:55:55'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:55:55'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:55:55'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:55:55'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:55:55'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:55:55'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:55:56'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:58:03'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 19:58:12'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 19:58:12'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 19:58:17'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:05:17' prior: 50658368!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [(delantero modoDeDisparo = #aColocar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.].
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 1.2.]
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado) 
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 20:05:20'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:05:20'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 20:05:20'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 20:05:20'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 20:05:20'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:05:20'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:05:20'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 20:05:20'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 20:06:05'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:06:05'!
FAILURE!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 20:06:05'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 20:06:05'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 20:06:05'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:06:05'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:06:05'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 20:06:05'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:10:25' prior: 50658717!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ].
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [(delantero modoDeDisparo = #aColocar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.].
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 1.2.]
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 20:10:26'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 20:10:26'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 20:10:26'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:10:27'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 20:10:27'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 20:10:27'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 20:10:27'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:10:27'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:10:27'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 20:10:27'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:12:37'!
posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	(self tieneQueEstarEnElArco: posicionDeDisparoDelantero)
		ifFalse: [self error:  self class direccionTiroFueraDeRango ].
		
	(self tieneQueEstarEnElArco: posicionDePrediccionDelArquero)
		ifFalse: [self error: self class direccionArqueroFueraDeRango ]! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:13:40' prior: 50659058!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [(delantero modoDeDisparo = #aColocar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.].
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 1.2.]
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:13:42'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 20:13:42'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 20:13:42'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 20:13:42'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:13:42'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:13:42'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 20:13:42'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:15:45' prior: 50659279!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero fuerza.
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [(delantero modoDeDisparo = #aColocar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 0.8.].
			(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
			
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 1.2.]
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

Pelota subclass: #Playera
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Playera category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:16:05'!
Pelota subclass: #Playera
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

Pelota subclass: #Jabulani
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Jabulani category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:16:13'!
Pelota subclass: #Jabulani
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Pelota class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:16:36' prior: 50651585!
jabulaniSudafricanaRapida

	^Jabulani new esJabulaniSudafricanaRapida! !
!Pelota class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:16:45' prior: 50655071!
playeraLentaCostaAzul

	^Playera new esPlayeraLentaCostaAzul! !
!Pelota class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:19:01'!
esPateadaAMatarFuerzaResultante
! !
!Pelota class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:19:18' prior: 50659580!
esPateadaAMatarFuerzaResultante
	
	^self subclassResponsibility 
! !
!Pelota class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:19:26'!
esPateadaAColocarFuerzaResultante
	
	^self subclassResponsibility 
! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:19:56'!
esPateadaAColocarFuerzaResultante
	
	^self subclassResponsibility 
! !

!methodRemoval: Pelota class #esPateadaAColocarFuerzaResultante stamp: 'psm 9/25/2023 20:19:56'!
esPateadaAColocarFuerzaResultante
	
	^self subclassResponsibility 
!
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:20:02'!
esPateadaAMatarFuerzaResultante
	
	^self subclassResponsibility 
! !

!methodRemoval: Pelota class #esPateadaAMatarFuerzaResultante stamp: 'psm 9/25/2023 20:20:02'!
esPateadaAMatarFuerzaResultante
	
	^self subclassResponsibility 
!

Delantero subclass: #DelanteroAMatar
	instanceVariableNames: 'fuerza modoDeDisparo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

Delantero subclass: #DelanteroAMatar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #DelanteroAMatar category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:20:35'!
Delantero subclass: #DelanteroAMatar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

Delantero subclass: #DelanteroAColocar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #DelanteroAColocar category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:20:42'!
Delantero subclass: #DelanteroAColocar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:21:13'!
patearPelota: unaPelota

	^self subclassResponsibility ! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:21:31' overrides: 50659646!
patearPelota: unaPelota

	^self subclassResponsibility ! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:21:31' overrides: 50659646!
patearPelota: unaPelota

	^self subclassResponsibility ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:21:31' prior: 50659646!
patearPelota: unaPelota

	self subclassResponsibility! !

Arquero subclass: #ArqueroEnLinea
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #ArqueroEnLinea category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:22:03'!
Arquero subclass: #ArqueroEnLinea
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #ArqueroAdelantado category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:22:13'!
Arquero subclass: #ArqueroAdelantado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:23:38' prior: 50659658 overrides: 50659663!
patearPelota: unaPelota

	^unaPelota ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:24:03'!
esPateadaAColocarFuerzaResultante: unaFuerza
	
	^self subclassResponsibility 
! !

!methodRemoval: Pelota #esPateadaAColocarFuerzaResultante stamp: 'psm 9/25/2023 20:24:03'!
esPateadaAColocarFuerzaResultante
	
	^self subclassResponsibility 
!
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:24:21'!
esPateadaAMatarFuerzaResultante: unaFuerza
	
	^self subclassResponsibility 
! !

!methodRemoval: Pelota #esPateadaAMatarFuerzaResultante stamp: 'psm 9/25/2023 20:24:21'!
esPateadaAMatarFuerzaResultante
	
	^self subclassResponsibility 
!
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:24:45' prior: 50659652 overrides: 50659663!
patearPelota: unaPelota

	^unaPelota esPateadaAMatarFuerzaResultante: fuerza! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:25:00' prior: 50659694 overrides: 50659663!
patearPelota: unaPelota

	^unaPelota esPateadaAColocarFuerzaResultante: fuerza! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:25:34' overrides: 50659708!
esPateadaAMatarFuerzaResultante: unaFuerza
	
	^self subclassResponsibility 
! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:25:34' overrides: 50659708!
esPateadaAMatarFuerzaResultante: unaFuerza
	
	^self subclassResponsibility 
! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:25:34' prior: 50659708!
esPateadaAMatarFuerzaResultante: unaFuerza

	self subclassResponsibility! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:25:48' overrides: 50659698!
esPateadaAColocarFuerzaResultante: unaFuerza
	
	^self subclassResponsibility 
! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:25:49' overrides: 50659698!
esPateadaAColocarFuerzaResultante: unaFuerza
	
	^self subclassResponsibility 
! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:25:49' prior: 50659698!
esPateadaAColocarFuerzaResultante: unaFuerza

	self subclassResponsibility! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:27:22' prior: 50659739 overrides: 50659745!
esPateadaAMatarFuerzaResultante: unaFuerza
	
	^unaFuerza * 1.2 
! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:27:55' prior: 50659757 overrides: 50659763!
esPateadaAColocarFuerzaResultante: unaFuerza
	
	^unaFuerza 
! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:28:16' prior: 50659751 overrides: 50659763!
esPateadaAColocarFuerzaResultante: unaFuerza
	
	^unaFuerza * 0.8
! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:29:26' prior: 50659733 overrides: 50659745!
esPateadaAMatarFuerzaResultante: unaFuerza
	
	^unaFuerza 
! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:30:04' prior: 50659481!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [	(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
			
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifTrue: [	varFuerzaUltimoTiro := varFuerzaUltimoTiro * 1.2.]
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:30:12' prior: 50659792!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero fuerza.
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [	(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
			
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 20:30:19'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:30:19'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 20:30:20'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 20:30:28'!
ERROR!
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:31:22' prior: 50653084!
decideTirarAColocarSuFuerzaBaseEs: fuerzaDelDelantero

	^DelanteroAColocar new tiraAcolorcarConFuerza: fuerzaDelDelantero 

! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:31:35' prior: 50656539!
decideTirarAMatarSuFuerzaBaseEs: fuerzaDelDelantero

	^DelanteroAMatar new tiraAMatarConFuerza: fuerzaDelDelantero 

! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:32:00' overrides: 50653109!
modoDeDisparo

	^modoDeDisparo ! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:32:01' overrides: 50653109!
modoDeDisparo

	^modoDeDisparo ! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:32:01' prior: 50653109!
modoDeDisparo

	self subclassResponsibility! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:32:17' prior: 50660075 overrides: 50660080!
modoDeDisparo

	^#aColocar ! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:32:30' prior: 50660070 overrides: 50660080!
modoDeDisparo

	^#aMatar ! !

!methodRemoval: Delantero #tiraAMatarConFuerza: stamp: 'psm 9/25/2023 20:32:42'!
tiraAMatarConFuerza: fuerzaDelDelantero  
	modoDeDisparo := #aMatar.
	fuerza := fuerzaDelDelantero.!

!methodRemoval: Delantero #tiraAcolorcarConFuerza: stamp: 'psm 9/25/2023 20:32:45'!
tiraAcolorcarConFuerza: fuerzaDelDelantero 
	modoDeDisparo := #aColocar.
	fuerza := fuerzaDelDelantero / 2.!
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:33:28'!
initializeWith: unaFuerza
	fuerza := unaFuerza .! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:34:13'!
inicializaCon: unaFuerza
	fuerza := unaFuerza .! !

!methodRemoval: DelanteroAMatar #initializeWith: stamp: 'psm 9/25/2023 20:34:13'!
initializeWith: unaFuerza
	fuerza := unaFuerza .!
!DelanteroAMatar class methodsFor: 'nil' stamp: 'psm 9/25/2023 20:34:57'!
inicializaCon: unaFuerza

	^self new inicializaCon: unaFuerza .! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:35:07'!
inicializaCon: unaFuerza

	self subclassResponsibility! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:35:41' prior: 50660126!
inicializaCon: unaFuerza

	self subclassResponsibility! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:36:20' prior: 50660131!
inicializaCon: unaFuerza

	^self new inicializaCon: unaFuerza .! !

!methodRemoval: DelanteroAMatar class #inicializaCon: stamp: 'psm 9/25/2023 20:36:20'!
inicializaCon: unaFuerza

	^self new inicializaCon: unaFuerza .!
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:36:37'!
inicializaCon: unaFuerza

	self subclassResponsibility! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:37:02' overrides: 50660146!
inicializaCon: unaFuerza
	fuerza := unaFuerza / 2.! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:37:29' prior: 50660054!
decideTirarAColocarSuFuerzaBaseEs: fuerzaDelDelantero

	^DelanteroAColocar inicializaCon: fuerzaDelDelantero 

! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:37:36' prior: 50660062!
decideTirarAMatarSuFuerzaBaseEs: fuerzaDelDelantero

	^DelanteroAMatar inicializaCon: fuerzaDelDelantero 

! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 20:38:15'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 20:38:15'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 20:38:15'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 20:38:15'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:38:15'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 20:38:15'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 20:38:15'!
FAILURE!

Object subclass: #Delantero
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Delantero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:38:27'!
Object subclass: #Delantero
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:38:44' overrides: 50653113!
posicionDePartida
	^posicionDePartida ! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:38:44' overrides: 50653113!
posicionDePartida
	^posicionDePartida ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:38:44' prior: 50653113!
posicionDePartida

	self subclassResponsibility! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:42'!
pateandoConEstaFuerza: unaFuerza

	^self new inicializaCon: unaFuerza .! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:42'!
pateandoConEstaFuerza: unaFuerza

	self subclassResponsibility! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:42' overrides: 50660341!
pateandoConEstaFuerza: unaFuerza
	fuerza := unaFuerza / 2.! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:42' overrides: 50660341!
pateandoConEstaFuerza: unaFuerza
	fuerza := unaFuerza .! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:43' prior: 50660164!
decideTirarAMatarSuFuerzaBaseEs: fuerzaDelDelantero

	^DelanteroAMatar pateandoConEstaFuerza: fuerzaDelDelantero 

! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:43' prior: 50660136!
inicializaCon: unaFuerza

	^self new pateandoConEstaFuerza: unaFuerza .! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:43' prior: 50660157!
decideTirarAColocarSuFuerzaBaseEs: fuerzaDelDelantero

	^DelanteroAColocar pateandoConEstaFuerza: fuerzaDelDelantero 

! !
!Delantero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:39:43' prior: 50660336!
pateandoConEstaFuerza: unaFuerza

	^self new pateandoConEstaFuerza: unaFuerza .! !

!methodRemoval: Delantero class #inicializaCon: stamp: 'psm 9/25/2023 20:39:43'!
inicializaCon: unaFuerza

	^self new pateandoConEstaFuerza: unaFuerza .!

!methodRemoval: Delantero #inicializaCon: stamp: 'psm 9/25/2023 20:39:43'!
inicializaCon: unaFuerza

	self subclassResponsibility!

!methodRemoval: DelanteroAColocar #inicializaCon: stamp: 'psm 9/25/2023 20:39:43'!
inicializaCon: unaFuerza
	fuerza := unaFuerza / 2.!

!methodRemoval: DelanteroAMatar #inicializaCon: stamp: 'psm 9/25/2023 20:39:43'!
inicializaCon: unaFuerza
	fuerza := unaFuerza .!
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:40:31' prior: 50660326 overrides: 50660331!
posicionDePartida
	^#adelantado! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:40:44' prior: 50660321 overrides: 50660331!
posicionDePartida
	^#enLinea! !

Object subclass: #Arquero
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!

!classDefinition: #Arquero category: 'ISW1-2023-2C-Parcial-1' stamp: 'psm 9/25/2023 20:40:52'!
Object subclass: #Arquero
	instanceVariableNames: 'fuerza'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-Parcial-1'!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:41:57' prior: 50659854!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [	(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
			
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:42:25'!
atajaPelota: unaPelota pateadaPor: unDelantero ! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:42:33' overrides: 50660484!
atajaPelota: unaPelota pateadaPor: unDelantero ! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:42:33' overrides: 50660484!
atajaPelota: unaPelota pateadaPor: unDelantero ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:42:33' prior: 50660484!
atajaPelota: unaPelota pateadaPor: unDelantero

	self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:43:47' prior: 50660494 overrides: 50660499!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^fuerza! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:44:38' prior: 50660489 overrides: 50660499!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaPor: self pateadaPor: unDelantero.! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:45:01'!
esAtajadaPor: unArquero pateadaPor: unDelantero! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:45:11' overrides: 50660518!
esAtajadaPor: unArquero pateadaPor: unDelantero! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:45:11' overrides: 50660518!
esAtajadaPor: unArquero pateadaPor: unDelantero! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:45:11' prior: 50660518!
esAtajadaPor: unArquero pateadaPor: unDelantero

	self subclassResponsibility! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:46:03'!
arequeroEnLineaAtajaPelota: unaPelota pateadaPor: unDelantero

	self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:46:03' overrides: 50660538!
arequeroEnLineaAtajaPelota: unaPelota pateadaPor: unDelantero 

	^fuerza! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:46:03' overrides: 50660538!
arequeroEnLineaAtajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaPor: self pateadaPor: unDelantero.! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:46:03' prior: 50660423!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero arequeroEnLineaAtajaPelota: unaPelota pateadaPor: delantero .
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [	(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
			
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!methodRemoval: Arquero #atajaPelota:pateadaPor: stamp: 'psm 9/25/2023 20:46:03'!
atajaPelota: unaPelota pateadaPor: unDelantero

	self subclassResponsibility!

!methodRemoval: ArqueroAdelantado #atajaPelota:pateadaPor: stamp: 'psm 9/25/2023 20:46:03'!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^fuerza!

!methodRemoval: ArqueroEnLinea #atajaPelota:pateadaPor: stamp: 'psm 9/25/2023 20:46:03'!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaPor: self pateadaPor: unDelantero.!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:46:31'!
atajaPelota: unaPelota pateadaPor: unDelantero

	self subclassResponsibility! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:46:31' overrides: 50660635!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^fuerza! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:46:31' overrides: 50660635!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaPor: self pateadaPor: unDelantero.! !

!methodRemoval: Arquero #arequeroEnLineaAtajaPelota:pateadaPor: stamp: 'psm 9/25/2023 20:46:31'!
arequeroEnLineaAtajaPelota: unaPelota pateadaPor: unDelantero

	self subclassResponsibility!

!methodRemoval: ArqueroAdelantado #arequeroEnLineaAtajaPelota:pateadaPor: stamp: 'psm 9/25/2023 20:46:31'!
arequeroEnLineaAtajaPelota: unaPelota pateadaPor: unDelantero 

	^fuerza!

!methodRemoval: ArqueroEnLinea #arequeroEnLineaAtajaPelota:pateadaPor: stamp: 'psm 9/25/2023 20:46:32'!
arequeroEnLineaAtajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaPor: self pateadaPor: unDelantero.!
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:47:08'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero

	self subclassResponsibility! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:47:08' overrides: 50660672!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:47:08' overrides: 50660672!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:47:08' prior: 50660647 overrides: 50660635!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaEnLineaPor: self pateadaPor: unDelantero.! !

!methodRemoval: Pelota #esAtajadaPor:pateadaPor: stamp: 'psm 9/25/2023 20:47:08'!
esAtajadaPor: unArquero pateadaPor: unDelantero

	self subclassResponsibility!

!methodRemoval: Jabulani #esAtajadaPor:pateadaPor: stamp: 'psm 9/25/2023 20:47:08'!
esAtajadaPor: unArquero pateadaPor: unDelantero!

!methodRemoval: Playera #esAtajadaPor:pateadaPor: stamp: 'psm 9/25/2023 20:47:08'!
esAtajadaPor: unArquero pateadaPor: unDelantero!
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:18'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero fuerza: conFuerza 

	self subclassResponsibility! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:18' overrides: 50660709!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero fuerza: conFuerza ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:18' overrides: 50660709!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero fuerza: conFuerza ! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:18' prior: 50660689 overrides: 50660635!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaEnLineaPor: self pateadaPor: unDelantero fuerza: unaFuerza.! !

!methodRemoval: Pelota #esAtajadaEnLineaPor:pateadaPor: stamp: 'psm 9/25/2023 20:48:18'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero

	self subclassResponsibility!

!methodRemoval: Jabulani #esAtajadaEnLineaPor:pateadaPor: stamp: 'psm 9/25/2023 20:48:19'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero!

!methodRemoval: Playera #esAtajadaEnLineaPor:pateadaPor: stamp: 'psm 9/25/2023 20:48:19'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero!
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:48'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: conFuerza 

	self subclassResponsibility! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:48' overrides: 50660751!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: conFuerza ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:48' overrides: 50660751!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: conFuerza ! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:48' prior: 50660729 overrides: 50660635!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaEnLineaPor: self pateadaPor: unDelantero conFuerza: unaFuerza.! !

!methodRemoval: Pelota #esAtajadaEnLineaPor:pateadaPor:fuerza: stamp: 'psm 9/25/2023 20:48:48'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero fuerza: conFuerza 

	self subclassResponsibility!

!methodRemoval: Jabulani #esAtajadaEnLineaPor:pateadaPor:fuerza: stamp: 'psm 9/25/2023 20:48:48'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero fuerza: conFuerza !

!methodRemoval: Playera #esAtajadaEnLineaPor:pateadaPor:fuerza: stamp: 'psm 9/25/2023 20:48:48'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero fuerza: conFuerza !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:48:57' prior: 50660758 overrides: 50660751!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: unaFuerza ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:49:04' prior: 50660751!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: unaFuerza 

	self subclassResponsibility! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:49:11' prior: 50660764 overrides: 50660802!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: unaFuerza ! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:49:30' prior: 50660771 overrides: 50660635!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unaPelota esAtajadaEnLineaPor: self pateadaPor: unDelantero conFuerza: fuerza.! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:49:57' prior: 50660796 overrides: 50660802!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 3/2! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:51:04' prior: 50660558!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	unaPelota tipoDePelota = #playera 
		ifTrue: [	(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
			
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			].
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:51:39' prior: 50660816 overrides: 50660635!
atajaPelota: unaPelota pateadaPor: unDelantero 

	^unDelantero esAtajadoEnLineaPor: self pateadaPor: unaPelota conFuerza: fuerza.! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:52:08'!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:52:12' overrides: 50660899!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:52:12' overrides: 50660899!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:52:12' prior: 50660899!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza

	self subclassResponsibility! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:52:55' prior: 50660911 overrides: 50660917!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza

	^unaFuerza ! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:53:31' prior: 50660905 overrides: 50660917!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza

	^unaPelota esAtajadaEnLineaPor: unArquero pateadaPor: self conFuerza: unaFuerza ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:53:49'!
esAtajadaEnLineaPor: unArquero pateadaAMatarPor: unDelantero conFuerza: unaFuerza 

	self subclassResponsibility! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:53:49' overrides: 50660940!
esAtajadaEnLineaPor: unArquero pateadaAMatarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 3/2! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:53:49' overrides: 50660940!
esAtajadaEnLineaPor: unArquero pateadaAMatarPor: unDelantero conFuerza: unaFuerza ! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:53:49' prior: 50660932 overrides: 50660917!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza

	^unaPelota esAtajadaEnLineaPor: unArquero pateadaAMatarPor: self conFuerza: unaFuerza ! !

!methodRemoval: Pelota #esAtajadaEnLineaPor:pateadaPor:conFuerza: stamp: 'psm 9/25/2023 20:53:49'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: unaFuerza 

	self subclassResponsibility!

!methodRemoval: Jabulani #esAtajadaEnLineaPor:pateadaPor:conFuerza: stamp: 'psm 9/25/2023 20:53:49'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 3/2!

!methodRemoval: Playera #esAtajadaEnLineaPor:pateadaPor:conFuerza: stamp: 'psm 9/25/2023 20:53:49'!
esAtajadaEnLineaPor: unArquero pateadaPor: unDelantero conFuerza: unaFuerza !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:54:12' prior: 50660954 overrides: 50660940!
esAtajadaEnLineaPor: unArquero pateadaAMatarPor: unDelantero conFuerza: unaFuerza

	^unaFuerza ! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:56:31' prior: 50660925 overrides: 50660917!
esAtajadoEnLineaPor: unArquero pateadaPor: unaPelota conFuerza: unaFuerza

	^unaPelota esAtajadaEnLineaPor: unArquero pateadaAColocarPor: self conFuerza: unaFuerza ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:56:55'!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:56:59' overrides: 50661003!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza ! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:57:00' overrides: 50661003!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:57:00' prior: 50661003!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza

	self subclassResponsibility! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:57:25' prior: 50661015 overrides: 50661021!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:57:49' prior: 50661009 overrides: 50661021!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:58:28' prior: 50661036 overrides: 50661021!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 2 ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:58:40' prior: 50661021!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 2 ! !

!methodRemoval: Playera #esAtajadaEnLineaPor:pateadaAColocarPor:conFuerza: stamp: 'psm 9/25/2023 20:58:40'!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 2 !

!methodRemoval: Jabulani #esPateadaAColocarFuerzaResultante: stamp: 'psm 9/25/2023 20:58:47'!
esPateadaAColocarFuerzaResultante: unaFuerza
	
	^unaFuerza 
!
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 20:59:43' overrides: 50659763!
esPateadaAColocarFuerzaResultante: unaFuerza
	
	^unaFuerza! !

!methodRemoval: Jabulani #esAtajadaEnLineaPor:pateadaAColocarPor:conFuerza: stamp: 'psm 9/25/2023 20:59:52'!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:00:26' prior: 50660830!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	"unaPelota tipoDePelota = #playera 
		ifTrue: [	(arquero posicionDePartida = #enLaLinea)
				ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 2]].
			
	(unaPelota tipoDePelota = #jabulani )
		ifTrue: [(delantero modoDeDisparo = #aMatar)
				ifFalse:[(arquero posicionDePartida = #enLaLinea)
					ifTrue: [varFuerzaDeAtajada := varFuerzaDeAtajada * 3/2].
				]
			]."
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:00:28'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:00:28'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:00:38'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:00:38'!
ERROR!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:00:45'!
ERROR!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:01:35' prior: 50653962!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerzaDeArquero 

	^ArqueroEnLinea vaDesdeLalineaYconFuerza: unaFuerzaDeArquero ! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:01:38' prior: 50661418!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerzaDeArquero 

	^ArqueroEnLinea new vaDesdeLalineaYconFuerza: unaFuerzaDeArquero ! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:01:54' prior: 50651908!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: fuerzaDelArquero

	^ArqueroAdelantado new vaAdelantadoYconFuerza: fuerzaDelArquero ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:02:39'!
atajaConfuerza: fuerzaDelArquero

	fuerza := fuerzaDelArquero.! !

!methodRemoval: Arquero #vaDesdeLalineaYconFuerza: stamp: 'psm 9/25/2023 21:02:58'!
vaDesdeLalineaYconFuerza: fuerzaDelArquero 
	posicionDePartida := #enLaLinea.
	fuerza := fuerzaDelArquero.!

!methodRemoval: Arquero #vaAdelantadoYconFuerza: stamp: 'psm 9/25/2023 21:03:01'!
vaAdelantadoYconFuerza: fuerzaDelArquero 

	posicionDePartida := #adelantado.
	fuerza := fuerzaDelArquero.!
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:03:13' prior: 50661426!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerzaDeArquero 

	^ArqueroEnLinea new atajaConfuerza: unaFuerzaDeArquero ! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:03:25' prior: 50661434!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: fuerzaDelArquero

	^ArqueroAdelantado new atajaConfuerza: fuerzaDelArquero ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:03:41'!
atajaConFuerza: fuerzaDelArquero

	fuerza := fuerzaDelArquero.! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:03:41' prior: 50661466!
esperaPorTiroYSeAdelantaSuFuerzaBaseEs: fuerzaDelArquero

	^ArqueroAdelantado new atajaConFuerza: fuerzaDelArquero ! !
!Arquero class methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:03:41' prior: 50661459!
eligeDireccionAntesDeTiroSuFuerzaBaseEs: unaFuerzaDeArquero 

	^ArqueroEnLinea new atajaConFuerza: unaFuerzaDeArquero ! !

!methodRemoval: Arquero #atajaConfuerza: stamp: 'psm 9/25/2023 21:03:41'!
atajaConfuerza: fuerzaDelArquero

	fuerza := fuerzaDelArquero.!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:03:53'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:03:53'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:06:35'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:06:35'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:06:43'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:08:41'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:08:41'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:08:48'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:08:48'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:08:48'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:08:48'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:08:48'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:08:48'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:08:48'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:08:49'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:08:49'!
FAILURE!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:08:53'!
FAILURE!
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:11:05' prior: 50661050!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 3/2 ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:11:49' overrides: 50662057!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 3/2 ! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:11:49' overrides: 50662057!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 3/2 ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:11:49' prior: 50662057!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza

	self subclassResponsibility! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:12:20' prior: 50662064 overrides: 50662078!
esAtajadaEnLineaPor: unArquero pateadaAColocarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza * 2 ! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:12:27'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:12:27'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:12:27'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:12:27'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:12:27'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:12:27'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:12:27'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:12:27'!
FAILURE!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:13:27'!
FAILURE!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:13:27'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:13:27'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:13:27'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:13:28'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:13:28'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:13:28'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:13:28'!
FAILURE!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:13:30'!
FAILURE!
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:14:24' prior: 50660947 overrides: 50660940!
esAtajadaEnLineaPor: unArquero pateadaAMatarPor: unDelantero conFuerza: unaFuerza 

	^unaFuerza! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:14:33'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:14:33'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:14:33'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:14:33'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:14:33'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:14:33'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:14:33'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:14:47' prior: 50661080!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:15:34' prior: 50662517!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := delantero quiereDispararA: posicionDeDisparoDelantero.
	(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).].
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:15:59'!
quiereDispararA: posicionDeDisparoDelantero! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:16:04' overrides: 50662617!
quiereDispararA: posicionDeDisparoDelantero! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:16:04' overrides: 50662617!
quiereDispararA: posicionDeDisparoDelantero! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:16:04' prior: 50662617!
quiereDispararA: posicionDeDisparoDelantero

	self subclassResponsibility! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:16:16' prior: 50662627 overrides: 50662632!
quiereDispararA: posicionDeDisparoDelantero

	^posicionDeDisparoDelantero ! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:17:48' prior: 50662622 overrides: 50662632!
quiereDispararA: posicionDeDisparoDelantero

	((posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [^((posicionDeDisparoDelantero x)@1)].
	
	^posicionDeDisparoDelantero 
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:18:09' prior: 50662567!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := delantero quiereDispararA: posicionDeDisparoDelantero.
	"(delantero modoDeDisparo = #aMatar
	and: (posicionDeDisparoDelantero x ~= 1) 
	and: (posicionDeDisparoDelantero y ~= 1))
		ifTrue: [direccionUltimoRemate := ((posicionDeDisparoDelantero x)@1).]."
		
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 21:18:10'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 21:18:10'!
FAILURE!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 21:18:10'!
FAILURE!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 21:18:10'!
FAILURE!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:18:10'!
FAILURE!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 21:18:10'!
FAILURE!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 21:18:10'!
FAILURE!
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:18:22' prior: 50662656!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := delantero quiereDispararA: posicionDeDisparoDelantero.
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [puntajeDeArquero := puntajeDeArquero + 1]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:19:46'!
arqueroAtaja
	puntajeDeArquero := puntajeDeArquero + 1
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:20:13' prior: 50662844!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := delantero quiereDispararA: posicionDeDisparoDelantero.
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [puntajeDeDelantero := puntajeDeDelantero + 1]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [puntajeDeDelantero := puntajeDeDelantero + 1]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:20:31'!
delanteroMeteGol

	puntajeDeDelantero := puntajeDeDelantero + 1
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:20:59' prior: 50662893!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := delantero quiereDispararA: posicionDeDisparoDelantero.
	
	(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [self delanteroMeteGol ]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [self delanteroMeteGol ]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [self delanteroMeteGol ]]
			
		
		
		! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:24:37' prior: 50662941!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := delantero quiereDispararA: posicionDeDisparoDelantero.
	
	unaPelota enLosPenales: self fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada 
	"(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [self delanteroMeteGol ]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [self delanteroMeteGol ]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [self delanteroMeteGol ]]"
			
		
		
		! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:08'!
enLosPenales: unosPenales fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:18' overrides: 50663029!
enLosPenales: unosPenales fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada ! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:18' overrides: 50663029!
enLosPenales: unosPenales fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada ! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:18' prior: 50663029!
enLosPenales: unosPenales fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self subclassResponsibility! !
!Pelota methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:38'!
enLosPenales: unosPenales fuePateadaPor: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self subclassResponsibility! !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:38' overrides: 50663069!
enLosPenales: unosPenales fuePateadaPor: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:38' overrides: 50663069!
enLosPenales: unosPenales fuePateadaPor: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada ! !
!Penales methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:25:38' prior: 50662982!
arbitroPitaConPelota: unaPelota delanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero

	self posicionesValidasDeDelanteroRemataAlArcoConDireccion: posicionDeDisparoDelantero 
		arqueroSeLanzaEnDirección: posicionDePrediccionDelArquero .
		
	varFuerzaUltimoTiro := delantero patearPelota: unaPelota .
	varFuerzaDeAtajada := arquero atajaPelota: unaPelota pateadaPor: delantero .
	
	direccionUltimoRemate := delantero quiereDispararA: posicionDeDisparoDelantero.
	
	unaPelota enLosPenales: self fuePateadaPor: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada 
	"(arquero posicionDePartida = #adelantado or: 
	(delantero modoDeDisparo = #aMatar and: unaPelota tipoDePelota = #jabulani ) )
	ifTrue:[(delantero modoDeDisparo = #	aColocar 
		and: unaPelota tipoDePelota = #playera)
			ifTrue: [self delanteroMeteGol ]
			ifFalse: [(direccionUltimoRemate x = posicionDePrediccionDelArquero x
				and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [self delanteroMeteGol ]
				]
			]
	ifFalse: [(direccionUltimoRemate = posicionDePrediccionDelArquero 
			and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
				ifTrue: [self arqueroAtaja ]
				ifFalse: [self delanteroMeteGol ]]"
			
		
		
		! !

!methodRemoval: Pelota #enLosPenales:fuePateadaPro:en:yFuerza:trataDeAtajar:en:yFuerza: stamp: 'psm 9/25/2023 21:25:38'!
enLosPenales: unosPenales fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self subclassResponsibility!

!methodRemoval: Jabulani #enLosPenales:fuePateadaPro:en:yFuerza:trataDeAtajar:en:yFuerza: stamp: 'psm 9/25/2023 21:25:38'!
enLosPenales: unosPenales fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada !

!methodRemoval: Playera #enLosPenales:fuePateadaPro:en:yFuerza:trataDeAtajar:en:yFuerza: stamp: 'psm 9/25/2023 21:25:38'!
enLosPenales: unosPenales fuePateadaPro: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada !
!Jabulani methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:27:20' prior: 50663080 overrides: 50663069!
enLosPenales: unosPenales fuePateadaPor: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada 

	^delantero enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada ! !
!Playera methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:27:49' prior: 50663090 overrides: 50663069!
enLosPenales: unosPenales fuePateadaPor: delantero en: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada 

	^delantero enLosPenales: unosPenales pateaPlayeraEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:07'!
enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:15'!
enLosPenales: unosPenales pateaPlayeraEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:27' overrides: 50663210!
enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:27' overrides: 50663210!
enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:27' prior: 50663210!
enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self subclassResponsibility! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:37' overrides: 50663219!
enLosPenales: unosPenales pateaPlayeraEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:37' overrides: 50663219!
enLosPenales: unosPenales pateaPlayeraEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!Delantero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:28:37' prior: 50663219!
enLosPenales: unosPenales pateaPlayeraEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self subclassResponsibility! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:31:23' prior: 50663239 overrides: 50663248!
enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	^arquero enLosPenales: unosPenales sePateoUnaJabulaniAcolocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:31:52' prior: 50663229 overrides: 50663248!
enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	^arquero enLosPenales: unosPenales sePateoUnaJabulaniAMatarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:32:05' prior: 50663289 overrides: 50663248!
enLosPenales: unosPenales pateaJabulaniEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	^arquero enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:32:26'!
enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:32:35' overrides: 50663336!
enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:32:35' overrides: 50663336!
enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:32:35' prior: 50663336!
enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self subclassResponsibility! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:36:17'!
chequeaSolosHorizontalEN: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:36:56'!
chequeaSolosHorizontalEN: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada penales: penales ! !

!methodRemoval: Arquero #chequeaSolosHorizontalEN:conFuerza:desde:conFuerza: stamp: 'psm 9/25/2023 21:36:57'!
chequeaSolosHorizontalEN: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:37:12'!
chequeaSolosHorizontalEn: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada enLosPenales: penales ! !

!methodRemoval: Arquero #chequeaSolosHorizontalEN:conFuerza:desde:conFuerza:penales: stamp: 'psm 9/25/2023 21:37:12'!
chequeaSolosHorizontalEN: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada penales: penales !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:37:21' prior: 50663395!
chequeaSolosHorizontalEn: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada enLosPenales: unospenales ! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:38:42' prior: 50663410!
chequeaSolosHorizontalEn: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada enLosPenales: unospenales 
	
	(unDisparo x = unaPosicion x and: fuerzaDisparo <= fuerzaAtajada ) 
		ifTrue: [unospenales arqueroAtaja ]
		ifFalse: [unospenales delanteroMeteGol]! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:39:51'!
enLosPenales: unosPenales sePateoUnaJabulaniAMatarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:40:56' prior: 50663430!
enLosPenales: unosPenales sePateoUnaJabulaniAMatarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self chequeaSolosHorizontalEn: posicionDeDisparoDelantero conFuerza: varFuerzaUltimoTiro desde: posicionDePrediccionDelArquero conFuerza: varFuerzaDeAtajada enLosPenales: unosPenales ! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:42:59' prior: 50663346 overrides: 50663365!
enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	(posicionDeDisparoDelantero = posicionDePrediccionDelArquero 
	and: varFuerzaUltimoTiro <= varFuerzaDeAtajada ) 
		ifTrue: [unosPenales arqueroAtaja ]
		ifFalse: [unosPenales delanteroMeteGol ]! !
!ArqueroAdelantado methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:44:06' prior: 50663356 overrides: 50663365!
enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self chequeaSolosHorizontalEn: posicionDeDisparoDelantero conFuerza: varFuerzaUltimoTiro desde: posicionDePrediccionDelArquero conFuerza: varFuerzaDeAtajada enLosPenales: unosPenales ! !
!ArqueroEnLinea methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:44:39' prior: 50663455 overrides: 50663365!
enLosPenales: unosPenales sePateoUnaJabulaniAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	self chequeaSolosHorizontalEn: posicionDeDisparoDelantero conFuerza: varFuerzaUltimoTiro desde: posicionDePrediccionDelArquero conFuerza: varFuerzaDeAtajada enLosPenales: unosPenales ! !
!DelanteroAColocar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:46:06' prior: 50663269 overrides: 50663278!
enLosPenales: unosPenales pateaPlayeraEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	^arquero enLosPenales: unosPenales sePateoUnaPlayeraAColocarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !
!DelanteroAMatar methodsFor: 'as yet unclassified' stamp: 'psm 9/25/2023 21:46:29' prior: 50663259 overrides: 50663278!
enLosPenales: unosPenales pateaPlayeraEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajar: arquero en: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada

	
	^arquero enLosPenales: unosPenales sePateoUnaPlayeraAMatarEn: posicionDeDisparoDelantero yFuerza: varFuerzaUltimoTiro trataDeAtajarEn: posicionDePrediccionDelArquero yFuerza: varFuerzaDeAtajada! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 22:10:36'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 22:10:36'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 22:10:40'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 22:12:00'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 22:12:00'!
ERROR!

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 9/25/2023 22:14:41'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 9/25/2023 22:14:41'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 9/25/2023 22:14:44'!
ERROR!

----STARTUP---- (28 September 2023 17:10:24) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


Object subclass: #Roman
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!

!classDefinition: #Roman category: 'Roman' stamp: 'psm 9/28/2023 18:08:28'!
Object subclass: #Roman
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!

TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!

!classDefinition: #RomanTest category: 'Roman' stamp: 'psm 9/28/2023 18:08:45'!
TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!
!RomanTest methodsFor: 'no messages' stamp: 'psm 9/28/2023 18:09:30'!
test01

	self assert: false.! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:09:31'!
FAILURE!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:11:46' prior: 50663977!
test01

	
	
	
	
	self assert: 1 asRoman equals: 'I'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:11:56' prior: 50663984!
test01

	
	self assert: 1 asRoman equals: 'I'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:14:15'!
ERROR!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:14:15'!
ERROR!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:18:19'!
ERROR!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:19:32'!
asRoman
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:19:45' prior: 50664000!
asRoman
	
	^'I'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:19:47'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:19:47'!
PASSED!

!classRemoval: #Roman stamp: 'psm 9/28/2023 18:19:58'!
Object subclass: #Roman
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:25:02'!
test02

	
	self assert: 2 asRoman equals: 'II'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:25:15'!
test03

	
	self assert: 3 asRoman equals: 'III'! !

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:25:19'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:26:30' prior: 50664004!
asRoman
	
	(self = 1) ifTrue:[^'I'] ifFalse: [^'II']! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:26:36'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:26:36'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:26:36'!
FAILURE!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:26:36'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:28:00' prior: 50664028!
asRoman
	
	self = 1 ifTrue:[^'I'].
	self = 2 ifTrue:[^'II'] .
	self = 3 ifTrue:[^'III']! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:28:17'!
test04! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:28:30' prior: 50664048!
test04

	
	self assert: 4 asRoman equals: 'IV'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:28:42'!
test05

	
	self assert: 4 asRoman equals: 'V'! !

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:28:44'!
FAILURE!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:28:44'!
FAILURE!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:28:59' prior: 50664056!
test05

	
	self assert: 5 asRoman equals: 'V'! !

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:29:01'!
FAILURE!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:29:01'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:30:03' prior: 50664042!
asRoman
	
	self = 1 ifTrue:[^'I'].
	self = 2 ifTrue:[^'II'] .
	self = 3 ifTrue:[^'III'].
	self = 4 ifTrue:[^'IV'].
	^'V'! !

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:30:07'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:30:10'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:32:52' prior: 50664074!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 1 ifTrue:[^'I'].
	self = 2 ifTrue:[^'II'] .
	self = 3 ifTrue:[^'III'].
	self = 4 ifTrue:[^'IV'].
	^'V'! !

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:32:56'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:33:00'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:33:00'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:33:00'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:33:00'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:33:00'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:33:10' prior: 50664086!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	^'V'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:33:13'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:33:13'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:33:13'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:33:13'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:33:13'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:34:42'!
test06

	
	self assert: 6 asRoman equals: 'VI'! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:35:00' prior: 50664109!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	^'VI'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:35:05'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:35:05'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:35:05'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:35:05'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:35:05'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:35:05'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:36:47'!
test07

	
	self assert: 7 asRoman equals: 'VII'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:36:49'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:36:49'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:36:49'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:36:49'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:36:49'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:36:49'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:36:49'!
FAILURE!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:36:49'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:37:27' prior: 50664132!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	self = 6  ifTrue:[^'VI']
	^'VII'! !

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:37:29'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:37:40'!
ERROR!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:38:13' prior: 50664176!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	self = 6  ifTrue:[^'VI'].
	^'VII'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:38:19'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:38:19'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:38:19'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:38:19'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:38:19'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:38:19'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:38:19'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:38:39'!
test08

	
	self assert: 8 asRoman equals: 'VIII'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:38:42'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:38:42'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:38:42'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:38:42'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:38:42'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:38:42'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:38:42'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:38:42'!
FAILURE!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:38:42'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:39:30' prior: 50664189!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	self = 6  ifTrue:[^'VI'].
	self = 7  ifTrue:[^'VII'].
	^'VIII'! !

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:39:33'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:39:56'!
test09

	
	self assert: 9 asRoman equals: 'IX'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:39:59'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:39:59'!
FAILURE!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:39:59'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:40:39' prior: 50664238!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	self = 6  ifTrue:[^'VI'].
	self = 7  ifTrue:[^'VII'].
	self = 8  ifTrue:[^'VIII'].
	^'IX'! !

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:40:42'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:40:44'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:42:22'!
test10

	
	self assert: 10 asRoman equals: 'X'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:42:23'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:42:23'!
FAILURE!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:42:23'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:42:46' prior: 50664276!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	self = 6  ifTrue:[^'VI'].
	self = 7  ifTrue:[^'VII'].
	self = 8  ifTrue:[^'VIII'].
	self = 9  ifTrue:[^'IX'].
	^'X'! !

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:42:49'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:43:05'!
PASSED!

String!

String!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:45:58' prior: 50664337!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	
	(self between: 5 and: 8)  
		ifTrue: [^'V'  appendToString: [String new: (self - 4) withAll: $I]].
		
	self = 5 ifTrue:[^'V'].
	self = 6  ifTrue:[^'VI'].
	self = 7  ifTrue:[^'VII'].
	self = 8  ifTrue:[^'VIII'].
	self = 9  ifTrue:[^'IX'].
	^'X'! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'psm 9/28/2023 18:45:59'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'psm 9/28/2023 18:45:59'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'psm 9/28/2023 18:45:59'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'psm 9/28/2023 18:45:59'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:46:16' prior: 50664373!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	
	(self between: 5 and: 8)  
		ifTrue: [^'V'  appendToString: [String new: (self - 4) withAll: $I]].
		
	self = 9  ifTrue:[^'IX'].
	^'X'! !

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:46:20'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:46:20'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:46:20'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:46:20'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:46:20'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:46:20'!
ERROR!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:46:20'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:46:20'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:46:20'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:46:20'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:46:20'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:46:33' prior: 50664419!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	
	(self between: 5 and: 8)  
		ifTrue: [^'V'  appendToString: [String new: (self - 5) withAll: $I]].
		
	self = 9  ifTrue:[^'IX'].
	^'X'! !

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:46:36'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:46:38'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:46:38'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:46:38'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:46:38'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:46:38'!
ERROR!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:46:38'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:46:38'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:46:38'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:46:38'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:46:38'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:46:51'!
ERROR!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:46:51'!
ERROR!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:47:38' prior: 50664454!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	
	(self between: 5 and: 8)  
		ifTrue: [^'V'  , (String new: (self - 5) withAll: $I)].
		
	self = 9  ifTrue:[^'IX'].
	^'X'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:47:42'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:47:48' prior: 50664494!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	
	(self between: 5 and: 8)  
		ifTrue: [^'V' , (String new: (self - 5) withAll: $I)].
		
	self = 9  ifTrue:[^'IX'].
	^'X'! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:49:50' prior: 50664527!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	^'X'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:49:57'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:52:27'!
test11

	
	self assert: 11 asRoman equals: 'XI'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:52:38'!
test12

	
	self assert: 12 asRoman equals: 'XII'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:52:54'!
test13

	
	self assert: 13 asRoman equals: 'XIII'! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:53:39' prior: 50664538!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	self = 11  ifTrue:[^'XI'].
	self = 12  ifTrue:[^'XII'].
	^'XIII'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 18:53:45'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 18:56:27'!
test14

	
	self assert: 14 asRoman equals: 'XIV'! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:56:50' prior: 50664586!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	self = 11  ifTrue:[^'XI'].
	self = 12  ifTrue:[^'XII'].
	self = 13  ifTrue:[^'XIII'].
	^'XIV'! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:58:20' prior: 50664633!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 13)  
		ifTrue: [^'X' , (self - 10) asRoman].
		
	self = 11  ifTrue:[^'XI'].
	self = 12  ifTrue:[^'XII'].
	self = 13  ifTrue:[^'XIII'].
	^'XIV'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 18:58:29'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:58:44' prior: 50664648!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 13)  
		ifTrue: [^'X' , (self - 10) asRoman].
		
	^'XIV'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 18:58:48'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 18:59:34' prior: 50664696!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 13)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 14  ifTrue:[^'XIV'].	
	^'XV'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:00:01'!
test15

	
	self assert: 15 asRoman equals: 'XV'! !

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:00:03'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:00:24'!
test16

	
	self assert: 16 asRoman equals: 'XVI'! !

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:00:32'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:00:53' prior: 50664741!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 13)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 14  ifTrue:[^'XIV'].	
	self = 15  ifTrue:[^'XV'].
	^'XVI'! !

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:00:56'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:00:59'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:02:04' prior: 50664803!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 15)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	^'XVI'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:02:09'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:03:01'!
test17

	
	self assert: 17 asRoman equals: 'XVII'! !

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:03:25'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:03:44' prior: 50664892!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 16)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	^'XVII'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:03:50'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:03:57' prior: 50664941!
test17

	
	self assert: 18 asRoman equals: 'XVIII'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:04:12' prior: 50665000!
test17

	
	self assert: 17 asRoman equals: 'XVII'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:04:17'!
test18

	
	self assert: 18 asRoman equals: 'XVIII'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:04:21'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:04:21'!
FAILURE!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:04:21'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:04:37' prior: 50664948!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 17)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	^'XVIII'! !

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:04:40'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:04:41'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:04:54'!
test19

	
	self assert: 19 asRoman equals: 'XIX'! !

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:04:56'!
FAILURE!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:05:20'!
test20

	
	self assert: 20 asRoman equals: 'XX'! !

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:05:28'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:05:51' prior: 50665057!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 20)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	^'XXI'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:05:56'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:06:23'!
test30

	
	self assert: 30 asRoman equals: 'XXX'! !

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:06:25'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:06:37' prior: 50665127!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 29)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	^'XXX'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:06:41'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:07:23'!
test31

	
	self assert: 31 asRoman equals: 'XXXI'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:07:26'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:07:26'!
FAILURE!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:07:26'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:07:36' prior: 50665192!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 31)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	^'XXX'! !

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:07:40'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:08:04' prior: 50665308!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	^'XL'! !
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:08:33'!
test39

	
	self assert: 39 asRoman equals: 'XXXIX'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:08:35'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:08:53'!
test40

	
	self assert: 40 asRoman equals: 'XL'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:08:55'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:09:29'!
test49

	
	self assert: 49 asRoman equals: 'XLIX'! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:09:58' prior: 50665324!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:['XL'].
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:10:31' prior: 50665457!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:['XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:10:34'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:10:35'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:10:35'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:10:35'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:10:35'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:10:35'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:10:35'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:10:35'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:10:35'!
FAILURE!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:10:35'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:11:14' prior: 50665472!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:['XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 10) asRoman].
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:11:27' prior: 50665545!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:['XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:11:38' prior: 50665562!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:11:42'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:12:11'!
test50

	
	self assert: 50 asRoman equals: 'L'! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:12:15'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:12:15'!
FAILURE!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:12:15'!
FAILURE!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:12:32' prior: 50665579!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	^'L'
	! !

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:12:34'!
PASSED!

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:12:37'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:12:38'!
PASSED!
!RomanTest methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 19:13:16'!
test89

	
	self assert: 89 asRoman equals: 'LXXXIX'! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:13:43' prior: 50665716!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:14:12' prior: 50665798!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
	
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!

!testRun: #RomanTest #test89 stamp: 'psm 9/28/2023 19:14:17'!
PASSED!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:14:52' prior: 50665816!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:15:15' prior: 50665897!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:16:02' prior: 50665919!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
		
	self = 100 ifTrue: [^'C'].
	
	(self between: 101 and: 199)  
		ifTrue: [^(100 asRoman) , (self - 100) asRoman].
	
	
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:16:33' prior: 50665943!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
		
	self = 100 ifTrue: [^'C'].
	
	(self between: 101 and: 399)  
		ifTrue: [^(100 asRoman) , (self - 100) asRoman].
	
	
	
	
	
	! !

200 asRoman!

370 asRoman!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:18:29' prior: 50665971!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
		
	self = 100 ifTrue: [^'C'].
	
	(self between: 101 and: 399)  
		ifTrue: [^(100 asRoman) , (self - 100) asRoman].
		
	self = 400 ifTrue: [^'CD'].
	
	(self between: 401 and: 499)  
		ifTrue: [^(400 asRoman) , (self - 400) asRoman].
	
	
	
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:18:57' prior: 50666000!
asRoman
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
		
	self = 100 ifTrue: [^'C'].
	
	(self between: 101 and: 399)  
		ifTrue: [^(100 asRoman) , (self - 100) asRoman].
		
	self = 400 ifTrue: [^'CD'].
	
	(self between: 401 and: 499)  
		ifTrue: [^(400 asRoman) , (self - 400) asRoman].
		
	self = 500 ifTrue: [^'D'].
	
	(self between: 501 and: 899)  
		ifTrue: [^(500 asRoman) , (self - 500) asRoman].
	
	
	
	
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:20:57'!
asRomanOne: one five: five Ten: ten
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: $I].
		
	self = 4 ifTrue:[^'IV'].
	self = 5 ifTrue:[^'V'].
	
	(self between: 6 and: 8)  
		ifTrue: [^'V' , (self - 5) asRoman].
		
	self = 9  ifTrue:[^'IX'].
	self = 10  ifTrue:[^'X'].
	
	
	
	
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:22:54' prior: 50666032!
asRoman
	
	(self between: 1 and: 10)
		ifTrue: [^self asRomanOne: $i five: $V Ten: $X].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
		
	self = 100 ifTrue: [^'C'].
	
	(self between: 101 and: 399)  
		ifTrue: [^(100 asRoman) , (self - 100) asRoman].
		
	self = 400 ifTrue: [^'CD'].
	
	(self between: 401 and: 499)  
		ifTrue: [^(400 asRoman) , (self - 400) asRoman].
		
	self = 500 ifTrue: [^'D'].
	
	(self between: 501 and: 899)  
		ifTrue: [^(500 asRoman) , (self - 500) asRoman].
	
	
	
	
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:24:21' prior: 50666067!
asRomanOne: one five: five Ten: ten
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: one].
		
	self = 4 ifTrue:[^one asString, five].
	self = 5 ifTrue:[^five].
	
	(self between: 6 and: 8)  
		ifTrue: [^five , (self - 5) asRoman].
		
	self = 9  ifTrue:[^one asString, ten].
	self = 10  ifTrue:[^ten].
	
	
	
	
	
	
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:24:24'!
FAILURE!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:24:24'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:24:24'!
PASSED!

!testRun: #RomanTest #test89 stamp: 'psm 9/28/2023 19:24:24'!
ERROR!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:25:21' prior: 50666110!
asRomanOne: one five: five Ten: ten
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: one].
		
	self = 4 ifTrue:[^one asString, five].
	self = 5 ifTrue:[^five asString ].
	
	(self between: 6 and: 8)  
		ifTrue: [^five , (self - 5) asRoman].
		
	self = 9  ifTrue:[^one asString, ten].
	self = 10  ifTrue:[^ten asString ].
	
	
	
	
	
	
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:25:26'!
FAILURE!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:25:26'!
FAILURE!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:25:26'!
FAILURE!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:25:26'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:25:26'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:25:26'!
FAILURE!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:25:26'!
FAILURE!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:25:26'!
FAILURE!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:25:26'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:25:26'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:25:26'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:25:26'!
FAILURE!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:25:26'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:25:26'!
PASSED!

!testRun: #RomanTest #test89 stamp: 'psm 9/28/2023 19:25:26'!
ERROR!

1 asRoman!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:25:54' prior: 50666080!
asRoman
	
	(self between: 1 and: 10)
		ifTrue: [^self asRomanOne: $I five: $V Ten: $X].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
		
	self = 100 ifTrue: [^'C'].
	
	(self between: 101 and: 399)  
		ifTrue: [^(100 asRoman) , (self - 100) asRoman].
		
	self = 400 ifTrue: [^'CD'].
	
	(self between: 401 and: 499)  
		ifTrue: [^(400 asRoman) , (self - 400) asRoman].
		
	self = 500 ifTrue: [^'D'].
	
	(self between: 501 and: 899)  
		ifTrue: [^(500 asRoman) , (self - 500) asRoman].
	
	
	
	
	
	
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:25:57'!
PASSED!

!testRun: #RomanTest #test89 stamp: 'psm 9/28/2023 19:25:57'!
ERROR!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:26:24' prior: 50666184!
asRomanOne: one five: five Ten: ten
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: one].
		
	self = 4 ifTrue:[^one asString, five  asString ].
	self = 5 ifTrue:[^five asString ].
	
	(self between: 6 and: 8)  
		ifTrue: [^five , (self - 5) asRoman].
		
	self = 9  ifTrue:[^one asString, ten  asString ].
	self = 10  ifTrue:[^ten asString ].
	
	
	
	
	
	
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:26:29'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:26:29'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:26:29'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:26:29'!
ERROR!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:26:29'!
ERROR!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:26:29'!
ERROR!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

!testRun: #RomanTest #test89 stamp: 'psm 9/28/2023 19:26:29'!
PASSED!

6 asRoman!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:27:04' prior: 50666349!
asRomanOne: one five: five Ten: ten
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: one].
		
	self = 4 ifTrue:[^one asString, five  asString ].
	self = 5 ifTrue:[^five asString ].
	
	(self between: 6 and: 8)  
		ifTrue: [^five asString, (self - 5) asRoman].
		
	self = 9  ifTrue:[^one asString, ten  asString ].
	self = 10  ifTrue:[^ten asString ].
	
	
	
	
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:27:41' prior: 50666424!
asRomanOne: one five: five Ten: ten
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: one].
		
	self = 4 ifTrue:[^one, five].
	self = 5 ifTrue:[^five].
	
	(self between: 6 and: 8)  
		ifTrue: [^five, (self - 5) asRoman].
		
	self = 9  ifTrue:[^one, ten].
	self = 10  ifTrue:[^ten ].
	
	
	
	
	
	
	
	! !
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:27:57' prior: 50666259!
asRoman
	
	(self between: 1 and: 10)
		ifTrue: [^self asRomanOne: 'I' five: 'V' Ten: 'X'].
	
	(self between: 11 and: 39)  
		ifTrue: [^'X' , (self - 10) asRoman].
	
	self = 40 ifTrue:[^'XL'].
	
	(self between: 41 and: 49)  
		ifTrue: [^(40 asRoman) , (self - 40) asRoman].
	
	self = 50 ifTrue:[^'L'].
	
	(self between: 51 and: 89)  
		ifTrue: [^(50 asRoman) , (self - 50) asRoman].
		
	self = 90 ifTrue: [^'XC'].
	
	(self between: 91 and: 99)  
		ifTrue: [^(90 asRoman) , (self - 90) asRoman].
		
	self = 100 ifTrue: [^'C'].
	
	(self between: 101 and: 399)  
		ifTrue: [^(100 asRoman) , (self - 100) asRoman].
		
	self = 400 ifTrue: [^'CD'].
	
	(self between: 401 and: 499)  
		ifTrue: [^(400 asRoman) , (self - 400) asRoman].
		
	self = 500 ifTrue: [^'D'].
	
	(self between: 501 and: 899)  
		ifTrue: [^(500 asRoman) , (self - 500) asRoman].
	
	
	
	
	
	
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:28:00'!
ERROR!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:28:00'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:28:01'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:28:01'!
ERROR!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:28:01'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:28:01'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:28:01'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:28:01'!
PASSED!

!testRun: #RomanTest #test89 stamp: 'psm 9/28/2023 19:28:01'!
PASSED!

1 asRoman!
!SmallInteger methodsFor: 'roman number' stamp: 'psm 9/28/2023 19:29:05' prior: 50666439!
asRomanOne: one five: five Ten: ten
	
	(self between: 1 and: 3)  
		ifTrue: [^String new: self withAll: one asCharacterSet first].
		
	self = 4 ifTrue:[^one, five].
	self = 5 ifTrue:[^five].
	
	(self between: 6 and: 8)  
		ifTrue: [^five, (self - 5) asRoman].
		
	self = 9  ifTrue:[^one, ten].
	self = 10  ifTrue:[^ten ].
	
	
	
	
	
	
	
	! !

!testRun: #RomanTest #test01 stamp: 'psm 9/28/2023 19:29:13'!
ERROR!

!testRun: #RomanTest #test02 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test03 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test04 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test05 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test06 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test07 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test08 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test09 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test10 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test11 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test12 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test13 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test14 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test15 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test16 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test17 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test18 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test19 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test20 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test30 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test31 stamp: 'psm 9/28/2023 19:29:14'!
ERROR!

!testRun: #RomanTest #test39 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test40 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test49 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test50 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

!testRun: #RomanTest #test89 stamp: 'psm 9/28/2023 19:29:14'!
PASSED!

----End fileIn of /home/pablo/Documents/inge1/linux64/TDDBabyStepsGame.st----!

!classRemoval: #RomanTest stamp: 'psm 9/28/2023 20:26:47'!
TestCase subclass: #RomanTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!

----STARTUP---- (28 September 2023 20:27:14) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


----End fileIn of /home/pablo/Documents/inge1/linux64/TDDBabyStepsGame.st----!

TDDBabyStepsGame start!

TDDBabyStepsGameContador start!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'psm 9/28/2023 20:28:54'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'psm 9/28/2023 20:29:19'!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

Object subclass: #TDDBabyStepsContador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #TDDBabyStepsContador category: 'TDDBabyStepsGameContador' stamp: 'psm 9/28/2023 20:32:58'!
Object subclass: #TDDBabyStepsContador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContador methodsFor: 'no messages' stamp: 'psm 9/28/2023 20:33:14'!
valor
	
	^0! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:33:17'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:33:17'!
ERROR!

Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'psm 9/28/2023 20:33:58'!
Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classRemoval: #TDDBabyStepsContador stamp: 'psm 9/28/2023 20:34:16'!
Object subclass: #TDDBabyStepsContador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!Contador methodsFor: 'no messages' stamp: 'psm 9/28/2023 20:34:25'!
valor
	
	^0! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:34:28'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:35:13'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'psm 9/28/2023 20:35:13'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:35:13'!
ERROR!

!methodRemoval: TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:35:13'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'psm 9/28/2023 20:35:13'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:35:13'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:36:26'!
incrementar

	valor := 1! !
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:36:50' prior: 50665821!
valor
	
	valor ifNil: [^0]
	^1! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:37:02'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:37:02'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:38:20'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:38:20'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:38:22'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:39:36' prior: 50665869!
valor
	
	valor isNil ifTrue: [^0]
	^1! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:39:39'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:39:39'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:40:07'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:40:07'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:41:01' prior: 50665893!
valor
	
	valor isNotNil ifTrue: [^1]
	^0! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:41:03'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:41:03'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:41:06'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:41:22'!
ERROR!

nil isNil !
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:42:19' prior: 50665913!
valor
	
	(valor isNotNil) ifTrue: [^1]
	^0! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:42:22'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:42:22'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:42:32'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:42:32'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:42:34'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:43:53' prior: 50665933!
valor
	
	valor ifNil:  [^1]
	^0! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:43:58'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:43:58'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:44:04'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:44:21' prior: 50665865!
incrementar

	valor := 1.! !
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:44:27' prior: 50665957!
valor
	
	valor ifNil:  [^1].
	^0! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:44:30'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:44:30'!
FAILURE!
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:45:11' overrides: 16920235!
initialize

	valor := 0! !
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:45:22' prior: 50665977!
valor
	
	^valor! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:45:25'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:45:25'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:45:38'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:45:38'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:45:44'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:45:44'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'psm 9/28/2023 20:45:44'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'psm 9/28/2023 20:45:44'!
FAILURE!

!methodRemoval: TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'psm 9/28/2023 20:45:44'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'psm 9/28/2023 20:45:44'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'psm 9/28/2023 20:45:44'!
FAILURE!
!Contador methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 20:46:12' prior: 50665973!
incrementar

	valor := valor + 1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:46:15'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:46:15'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'psm 9/28/2023 20:46:15'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:46:20'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:46:20'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'psm 9/28/2023 20:46:20'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'psm 9/28/2023 20:46:20'!
extraTest
	
	self assert: true.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'psm 9/28/2023 20:46:20'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'psm 9/28/2023 20:46:20'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'psm 9/28/2023 20:46:20'!
PASSED!

nil ifNil: [0] ifNotNil: [1]!

Object new ifNil: [0] ifNotNil: [1]!

!classRemoval: #Contador stamp: 'psm 9/28/2023 20:54:23'!
Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classRemoval: #TDDBabyStepsContadorTest stamp: 'psm 9/28/2023 20:54:24'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'psm 9/28/2023 20:54:38'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 20:56:58'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:57:06'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:57:06'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 20:57:28'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 20:57:48' prior: 50666151!
asRot13

	^$a! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:57:51'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:57:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:00'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:00'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 20:58:33' prior: 50666155!
asRot13

	^$n! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:47'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 20:58:47'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:47'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:47'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 20:58:47'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:58:47'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:59:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:59:00'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 20:59:00'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:00:41' prior: 50666176!
asRot13

	self = $a ifTrue:[^$n]
	^$z! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:00:42'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:00:55'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:09'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:01:16' prior: 50666235!
asRot13

	self = $a ifTrue:[^$n].
	^$z! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:29'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:01:29'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:29'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:29'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:01:29'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:01:29'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:02:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:02:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:02:11'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:02:11'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:02:47' prior: 50666252!
asRot13

	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	^$z! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:03:06' prior: 50666335!
asRot13

	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	^$a! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:16'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:03:16'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:16'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:16'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:03:16'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:03:16'!
FAILURE!

 $m!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:05:52' prior: 50666340!
asRot13

	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	^$m! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:05:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:05:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:05:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:05:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:06:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:06:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:06:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:06:05'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:06:05'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:06:05'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:06:05'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:06:05'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:06:05'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:08:40' prior: 50666406!
asRot13

	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:08:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:08:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:08:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:08:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:08:45'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:08:45'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:08:45'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:08:45'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:09:18' prior: 50666471!
asRot13

	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	^$`! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:09:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:09:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:09:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:09:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:09:25'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:09:25'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:09:25'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:09:25'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:09:26'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:09:26'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:10:13' prior: 50666514!
asRot13

	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	self = $` ifTrue:[^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:10:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:10:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:10:23'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:10:23'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:23'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:23'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:10:23'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:10:23'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:11:25' prior: 50666566!
asRot13


	
	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	self = $` ifTrue:[^$`].
	^${! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:15:50' prior: 50666656!
asRot13


	(self between: $a and: $m ) 
		ifTrue: [^self + 13].
		
	(self between: $n and: $z ) 
		ifTrue: [^self - 13].
		
	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	self = $` ifTrue:[^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:15:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:15:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:15:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:15:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:15:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:15:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:15:54'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:16:01'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:16:42' prior: 50666664!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^self + 13].
		
	(self between: $n and: $z ) 
		ifTrue: [^self - 13].
		
	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	self = $` ifTrue:[^$`].
	^${! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:16:55' prior: 50666709!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^self + 13].
		
	(self asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [^self - 13].
		
	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	self = $` ifTrue:[^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:17:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:17:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:17:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:17:07'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:17:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:17:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:17:07'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:19:36' prior: 50666721!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(self asciiValue + 13) asCharacter].
		
	(self asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [^self - 13].
		
	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	self = $` ifTrue:[^$`].
	^${! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:19:51' prior: 50666763!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(self asciiValue + 13) asCharacter].
		
	(self asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [^(self asciiValue - 13) asCharacter].
		
	self = $a ifTrue:[^$n].
	self = $m ifTrue:[^$z].
	self = $n ifTrue:[^$a].
	self = $z ifTrue:[^$m].
	self = $` ifTrue:[^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:19:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:19:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:19:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:19:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:19:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:19:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:19:55'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:19:55'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:20:12' prior: 50666777!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(self asciiValue + 13) asCharacter].
		
	(self asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [^(self asciiValue - 13) asCharacter].
		
	self = $` ifTrue:[^$`].
	^${! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:20:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:20:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:20:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:20:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:20:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:20:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:20:17'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:20:17'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:22:06' prior: 50666826!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(self asciiValue + 13) asCharacter].
		
	(self asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [^(self asciiValue - 13) asCharacter].
		
	self = $` ifTrue:[^$`].
	self = ${ ifTrue:[^${].
	self = $A ifTrue:[^$N].
	^$Z! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:22:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:22:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:22:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:22:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:22:14'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:22:14'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:22:14'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:24:03' prior: 50666871!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(self asciiValue + 13) asCharacter].
		
	(self asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [^(self asciiValue - 13) asCharacter].
		
	self = $` ifTrue:[^$`].
	self = ${ ifTrue:[^${].
	self = $A ifTrue:[^$N].
	self = $Z ifTrue:[^$M].
	self = $N ifTrue:[^$A].
	^$Z! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:24:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:24:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:24:13'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:24:13'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:24:13'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:24:13'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:24:14'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:24:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:24:42'!
ERROR!
!String methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 21:25:12'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: 'as yet unclassified' stamp: 'psm 9/28/2023 21:25:37' prior: 50667084!
asRot13
	^''! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:25:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:25:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:26:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:26:00'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:26:00'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:26:00'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:26:00'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:26:00'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:26:00'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:27:26' prior: 50667089!
asRot13
	^self asCharacterSet ! !
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:27:32' prior: 50667243!
asRot13
	^self asCharacterSet ! !
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:30:33' prior: 50667247!
asRot13
	^(self at:1) asRot13 asString ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:30:49'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:30:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:30:49'!
ERROR!
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:31:44' prior: 50667251!
asRot13
	self = '' ifTrue:[^''].
	^(self at:1) asRot13 asString ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:31:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:31:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:31:54'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:31:54'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:31:54'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:31:54'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:31:54'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:31:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:33:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:33:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:33:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:33:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:33:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:33:22'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:33:22'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:35:16' prior: 50667299!
asRot13
	self = '' ifTrue:[^''].
	
	self size = 1
		ifTrue: [^(self at:1) asRot13 asString ].
	
	self size = 2
		ifTrue: [^(self at:1) asRot13 asString, (self at:2) asRot13 asString].! !
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:35:48' prior: 50667458!
asRot13
	self = '' ifTrue:[^''].
	
	self size = 1
		ifTrue: [^(self at:1) asRot13 asString ].
	
	(self size = 2 or: true)
		ifTrue: [^(self at:1) asRot13 asString, (self at:2) asRot13 asString].! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:35:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:35:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:35:59'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:35:59'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:35:59'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:35:59'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:35:59'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:35:59'!
FAILURE!

----End fileIn of /home/pablo/Documents/inge1/linux64/Packages/TerseGuide.pck.st----!
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:38:45' prior: 50667467!
asRot13
	"self = '' ifTrue:[^''].
	
	self size = 1
		ifTrue: [^(self at:1) asRot13 asString ].
	
	(self size = 2 or: true)
		ifTrue: [^(self at:1) asRot13 asString, (self at:2) asRot13 asString]."
	self collect: [:char | char asRot13]! !
!String methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:38:52' prior: 50670511!
asRot13
	"self = '' ifTrue:[^''].
	
	self size = 1
		ifTrue: [^(self at:1) asRot13 asString ].
	
	(self size = 2 or: true)
		ifTrue: [^(self at:1) asRot13 asString, (self at:2) asRot13 asString]."
	^self collect: [:char | char asRot13]! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:38:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:38:56'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:38:56'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:39:39'!
asRot13suma

	^(self asciiValue + 13) asCharacter! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:39:56' prior: 50666976!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^self asRot13suma ].
		
	(self asciiValue between: $n asciiValue and: $z asciiValue) 
		ifTrue: [^(self asciiValue - 13) asCharacter].
		
	self = $` ifTrue:[^$`].
	self = ${ ifTrue:[^${].
	self = $A ifTrue:[^$N].
	self = $Z ifTrue:[^$M].
	self = $N ifTrue:[^$A].
	^$Z! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:40:24'!
asRot13resta 
			
	^(self asciiValue - 13) asCharacter! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:41:27' prior: 50670588!
asRot13


	(self asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^self asRot13suma ].
		
	((self asciiValue between: $n asciiValue and: $z asciiValue) or: (self asciiValue between: $N asciiValue and: $Z asciiValue))
		ifTrue: [^self asRot13resta ].
		
	self = $` ifTrue:[^$`].
	self = ${ ifTrue:[^${].
	self = $A ifTrue:[^$N].
	self = $Z ifTrue:[^$M].
	self = $N ifTrue:[^$A].
	^$Z! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:42:00' prior: 50670607!
asRot13


	((self asciiValue between: $a asciiValue and: $m asciiValue) or: (self asciiValue between: $A asciiValue and: $M asciiValue))
		ifTrue: [^self asRot13suma ].
		
	((self asciiValue between: $n asciiValue and: $z asciiValue) or: (self asciiValue between: $N asciiValue and: $Z asciiValue))
		ifTrue: [^self asRot13resta ].
		
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:42:14'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'psm 9/28/2023 21:42:14'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'psm 9/28/2023 21:42:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:42:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'psm 9/28/2023 21:42:33'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:47:52'!
between: lowerBound and: upperBound

	^self asciiValue between: lowerBound asciiValue and: upperBound asciiValue! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:48:47' prior: 50670623!
asRot13


	((self between: $a and: $m) or: (self between: $A and: $M))
		ifTrue: [^self asRot13suma ].
		
	((self between: $n and: $z) or: (self between: $N and: $Z))
		ifTrue: [^self asRot13resta ].
		
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:48:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:48:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'psm 9/28/2023 21:48:54'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:50:05'!
isInTheFirstHalf


	^((self between: $a and: $m) or: (self between: $A and: $M))
	! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:50:18' prior: 50670803!
asRot13


	self isInTheFirstHalf 
		ifTrue: [^self asRot13suma ].
		
	((self between: $n and: $z) or: (self between: $N and: $Z))
		ifTrue: [^self asRot13resta ].
		
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:50:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'psm 9/28/2023 21:50:24'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:51:07'!
isInTheSecondHalf 
		
	^((self between: $n and: $z) or: (self between: $N and: $Z))! !
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:51:21' prior: 50670870!
asRot13


	self isInTheFirstHalf 
		ifTrue: [^self asRot13suma ].
		
	self isInTheSecondHalf
		ifTrue: [^self asRot13resta ].
		
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 9/28/2023 21:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'psm 9/28/2023 21:51:31'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'psm 9/28/2023 21:58:19' prior: 50670936!
asRot13


	self isInTheFirstHalf ifTrue: [^self asRot13suma ].
		
	self isInTheSecondHalf ifTrue: [^self asRot13resta ].
		
	^self! !

----SNAPSHOT----(28 September 2023 21:58:55) CuisUniversity-5981.image priorSource: 10197292!

----QUIT----(28 September 2023 21:59:06) CuisUniversity-5981.image priorSource: 10859237!

----STARTUP---- (2 October 2023 13:38:03) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


x + 1!

----End fileIn of /home/pablo/Documents/inge1/linux64/ISW1-2023-2C-Parcial-1.st----!
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 10/2/2023 14:21:14' prior: 50672105!
chequeaSolosHorizontalEn: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada enLosPenales: unospenales 
	
	| hola|
	(unDisparo x = unaPosicion x and: fuerzaDisparo <= fuerzaAtajada ) 
		ifTrue: [unospenales arqueroAtaja ]
		ifFalse: [unospenales delanteroMeteGol]! !
!Arquero methodsFor: 'as yet unclassified' stamp: 'psm 10/2/2023 14:22:22' prior: 50672831!
chequeaSolosHorizontalEn: unDisparo conFuerza: fuerzaDisparo desde: unaPosicion conFuerza: fuerzaAtajada enLosPenales: unospenales 
	
	(unDisparo x = unaPosicion x and: fuerzaDisparo <= fuerzaAtajada ) 
		ifTrue: [unospenales arqueroAtaja ]
		ifFalse: [unospenales delanteroMeteGol]! !

!testRun: #PenalesTest #test01DelanteroNoPuedeApuntarHaciaAfueraDelPaloIzquierdo stamp: 'psm 10/2/2023 14:35:03'!
PASSED!

!testRun: #PenalesTest #test02DelanteroNoPuedeApuntarHaciaAfueraDelPaloDerecho stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test03DelanteroNoPuedeApuntarHaciaAbajoDelArco stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test04DelanteroNoPuedeApuntarHaciaArribaDelTravesaño stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test05ArqueroNoPuedePasarseDelPaloIzquierdo stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test06ArqueroNoPuedePasarseDelPaloDerecho stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test07ArqueroNoPuedeMeterseAbajoDeLaTierra stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test08ArqueroNoPuedeSaltarPorEncimaDelTravesaño stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test09DireccionesDiferentesGolDelantero stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test10MismasDireccionesInsuficienteFuerzaGolDelantero stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test11MismasDireccionesSuficienteFuerzaAtajaArquero stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test12DelanteroQueTiraAColocarPierde50PorcFuerza stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test13ArqueroQueEligeAntesDeTiroVsJabulaniAColocarSuma50PorcFuerzaExtra stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test14FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAColocar stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test15ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAColocarIgnoraAlturaTiro stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test17ArqueroQueEligeAntesDeTiroVsPlayeraAColocarSuma100PorcFuerzaExtra stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test18FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsPlayeraAColocar stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test19ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAColocarEsDescubiertoYPuntoParaDelantero stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test20DelanteroTiraAMatarAlAnguloInferiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test21DelanteroTiraAMatarAlAnguloSuperiorIzquierdoLaAlturaDelTiroPasaAMedio stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test22DelanteroTiraAMatarAlAnguloInferiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test23DelanteroTiraAMatarAlAnguloSuperiorDerechoLaAlturaDelTiroPasaAMedio stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test24DelanteroTiraAMatarNoAlAnguloMantieneDireccionTiro stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test25DelanteroTiraAMatarUsa100PorcFuerzaBase stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test26DelanteroTiraAMatarConJabulaniGana20PorcFuerzaExtra stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test27FuerzaInsuficienteDeArqueroQueEligeAntesDeTiroVsJabulaniAMatar stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test28ArqueroQueEligeAntesDeTiroVsJabulaniAMatarIgnoraAlturaTiro stamp: 'psm 10/2/2023 14:35:04'!
PASSED!

!testRun: #PenalesTest #test29ArqueroQueEsperaPorTiroYSeAdelantaVsJabulaniAMatarNuncaAtaja stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test30DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAdentro stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test31DelanteroQueNoPateaAlAnguloConPlayeraAMatarSuma2AAlturaDeDireccionPelotaAfuera stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test32ArqueroQueEligeAntesDeTiroVsPlayeraAMatarAlAnguloIgnoraAnchoTiro stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test33ArqueroQueEligeAntesDeTiroVsPlayeraAMatarNoAlAnguloIgnoraAnchoTiro stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test34ArqueroQueEsperaPorTiroYSeAdelantaVsPlayeraAMatarSiempreAtaja stamp: 'psm 10/2/2023 14:35:04'!
ERROR!

!testRun: #PenalesTest #test16PelotaPlayeraUsadaAColocarLeHacePerder20PorcFuerzaExtraAlDelantero stamp: 'psm 10/2/2023 14:35:12'!
ERROR!

----STARTUP---- (2 October 2023 17:21:02) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!

!Character methodsFor: 'rot13' stamp: 'psm 10/2/2023 17:32:29' prior: 50670864!
isInTheFirstHalf


	^self asLowercase between: $a and: $m
	! !
!Character methodsFor: 'rot13' stamp: 'psm 10/2/2023 17:32:50' prior: 50670930!
isInTheSecondHalf 
		
	^self asLowercase between: $n and: $z! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'psm 10/2/2023 17:33:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'psm 10/2/2023 17:33:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'psm 10/2/2023 17:33:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'psm 10/2/2023 17:33:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'psm 10/2/2023 17:33:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 17:33:02'!
PASSED!
!String methodsFor: 'rot13' stamp: 'psm 10/2/2023 17:42:24' prior: 50670521!
asRot13

	^self collect: [:char | char asRot13]! !

start!

TDDBabyStepsGamePrimeFactors start!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'psm 10/2/2023 17:53:19'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 17:54:04'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:54:27'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:54:27'!
ERROR!

Bag new!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 17:57:02'!
factorize
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 17:57:12' prior: 50671100!
factorize
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:57:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:57:26'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:57:32'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 17:57:32'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:57:32'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:57:32'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 17:57:32'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:57:32'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:57:45'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:57:45'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:57:45'!
FAILURE!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 17:59:11' prior: 50671105!
factorize
	
	(self = 2) ifTrue: [^Bag with: 2]
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:59:18'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:59:18'!
ERROR!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 17:59:48' prior: 50671158!
factorize
	
	(self = 2) ifTrue: [^Bag with: 2].
	
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:59:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 17:59:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 17:59:51'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:00:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:01'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:00:01'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:01'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:01'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:00:01'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:01'!
FAILURE!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:00:24' prior: 50671171!
factorize
	
	(self = 2) ifTrue: [^Bag with: 2].
	
	(self = 3) ifTrue: [^Bag with: 3].
	
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:00:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:00:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:00:33'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:00:33'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:00:33'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:00:33'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:00:33'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:00:33'!
FAILURE!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:02:09' prior: 50671222!
factorize
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 4) ifTrue: [Bag with: 2 with: 2].
	
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:02:12'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:02:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:02:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:02:13'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:02:13'!
FAILURE!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:02:29' prior: 50671281!
factorize
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 4) ifTrue: [^Bag with: 2 with: 2].
	
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:02:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:02:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:02:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:02:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:02:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:02:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:02:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:02:38'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:02:38'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:02:38'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:02:38'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:02:38'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:02:38'!
FAILURE!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:08:35' prior: 50671308!
factorize
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 4) ifTrue: [^Bag with: 2 with: 2].
	
	(self = 8) ifTrue: [^Bag with: 2 with: 2 with: 2].
		
	^Bag new! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:08:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:08:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:08:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:08:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:08:40'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:08:44'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:08:44'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:08:44'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:08:44'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:08:44'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:08:44'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:08:44'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:08:44'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:08:44'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:08:44'!
FAILURE!

5 count: [:index | true]!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:12:23' prior: 50671379!
factorize
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 1) ifTrue: [^Bag new].
	
	! !

[true]!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:19:21' prior: 50671464!
factorize

	|index|
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	[((self // index = 0) and: index isPrime) ifTrue:[^(self / index) factorize add: index].
		index := index + 1] repeat 
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:19:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:19:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:19:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:19:54'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:19:54'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:19:54'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:20:00'!
ERROR!

|inde|
inde := 1.
[(inde = 5) ifTrue: [^true].
	inde := inde + 1.] repeat!

|inde|
inde := 1.
[(inde = 5) ifTrue: [^inde].
	inde := inde + 1.] repeat!

4 // 2!

4 % 2!

4 \\ 2!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:25:58' prior: 50671471!
factorize

	|index|
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	^[((self \\ index = 0) and: index isPrime) ifTrue:[^(self / index) factorize add: index].
		index := index + 1] repeat 
	! !
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:26:20' prior: 50671517!
factorize

	|index|
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	^[((self \\ index = 0) and: index isPrime) ifTrue:[^(self / index) factorize add: index].
		index := index + 1] repeat 
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:26:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:26:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:26:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:26:24'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:26:24'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:26:24'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:26:35'!
FAILURE!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:27:17' prior: 50671528!
factorize

	|index|
	
	self isPrime ifTrue: [^Bag with: self].
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	^[((self \\ index = 0) and: index isPrime) ifTrue:[^(self / index) factorize add: index; yourself].
		index := index + 1] repeat 
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:27:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:27:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:27:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:27:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:27:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:27:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:27:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:27:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:27:38'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:27:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:27:39'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:27:39'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 18:27:39'!
testExtraToCheckGeneralizationOnKata
	
	self assert: (Bag with: 2 with: 2 with: 3 with: 3 with: 5 with: 13) equals: (2*2*3*3*5*13) factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 18:27:39'!
PASSED!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:31:18'!
esPrimo

	|index|
	
	index := 2.
	
	 (self - 2) timesRepeat: [(self isDivisibleBy: index) ifTrue: [^False]]
	
	^true! !
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:31:39' prior: 50671569!
factorize

	|index|
	
	self esPrimo ifTrue: [^Bag with: self].
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	^[((self \\ index = 0) and: index esPrimo ) ifTrue:[^(self / index) factorize add: index; yourself].
		index := index + 1] repeat 
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:31:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:31:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:31:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:31:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:31:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:31:49'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 18:31:49'!
ERROR!

|inde|
inde := 1.
0 timesRepeat: [	inde := inde + 1.] !

|inde|
inde := 1.
0 timesRepeat: [	inde := inde + 1; yourself] !

|inde|
inde := 1.
0 timesRepeat: [	inde := inde + 1] .
inde !

|inde|
inde := 1.
-1 timesRepeat: [	inde := inde + 1] .
inde  !

|inde|
inde := 1.
1 timesRepeat: [	inde := inde + 1] .
inde   !
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:35:21' prior: 50671642!
esPrimo

	|index|
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	 (self - 2) timesRepeat: [(self isDivisibleBy: index) ifTrue: [^False]]
	
	^true! !
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:36:56' prior: 50671649!
factorize

	|index|
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	^[(self isDivisibleBy: index ) ifTrue:[^(self / index) factorize add: index; yourself].
		index := index + 1] repeat ! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:37:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:37:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:37:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:37:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:37:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:37:05'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 18:37:05'!
PASSED!

!methodRemoval: SmallInteger #esPrimo stamp: 'psm 10/2/2023 18:37:37'!
esPrimo

	|index|
	
	(self = 1) ifTrue: [^Bag new].
	
	index := 2.
	
	 (self - 2) timesRepeat: [(self isDivisibleBy: index) ifTrue: [^False]]
	
	^true!

|inde|
inde := 1.
2 to: 1 do: [	inde := inde + 1] .
inde    !
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:44:19' prior: 50671707!
factorize

	(self = 1) ifTrue: [^Bag new].
	
	^2 to: self sqrtFloor do:[:index| (self isDivisibleBy: index ) ifTrue:[^(self / index) factorize add: index; yourself]].
	
	"^[(self isDivisibleBy: index ) ifTrue:[^(self / index) factorize add: index; yourself].
		Cannot store into ->index := index + 1] repeat 
	
	
	|bag|
	
	bag := Bag new.
	
	^2 to: self sqrtFloor do:[:index| ]"! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:44:27'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:45:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:45:14'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:45:14'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:45:14'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:45:14'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:45:14'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 18:45:14'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:45:19'!
FAILURE!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:47:10' prior: 50671755!
factorize

	(self = 1) ifTrue: [^Bag new].
	
	^2 to: self do:[:index| (self isDivisibleBy: index ) ifTrue:[^(self / index) factorize add: index; yourself]].
	
	"^[(self isDivisibleBy: index ) ifTrue:[^(self / index) factorize add: index; yourself].
		Cannot store into ->index := index + 1] repeat 
	
	
	|bag|
	
	bag := Bag new.
	
	^2 to: self sqrtFloor do:[:index| ]"! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'psm 10/2/2023 18:47:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'psm 10/2/2023 18:47:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'psm 10/2/2023 18:47:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'psm 10/2/2023 18:47:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 18:47:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:47:14'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'psm 10/2/2023 18:47:14'!
PASSED!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 18:48:53' prior: 50671808!
factorize

	(self = 1) ifTrue: [^Bag new].
	
	^2 to: self do:[:index| (self isDivisibleBy: index ) ifTrue:[^(self / index) factorize add: index; yourself]].
	
	"
	|bag|
	
	bag := Bag new.
	
	^2 to: self sqrtFloor do:[:index| ]"! !

inde := []!
!SmallInteger methodsFor: 'prime factors' stamp: 'psm 10/2/2023 19:02:49' prior: 50671852!
factorize

	(self = 1) ifTrue: [^Bag new].
	
	^2 to: self do:[:index| (self isDivisibleBy: index ) ifTrue:[^(self / index) factorize add: index; yourself]].
	
	"
	|bag remainingNumber|
	
	remainingNumber := self.
	
	bag := Bag new.
	
	[:index|] repeatWithGCIf: [remainingNumber > 1].
	
	^bag"! !

start!

TDDBabyStepsGameAnagrams start!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'psm 10/2/2023 19:03:08'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:04:07'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:04:25'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:04:25'!
ERROR!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:04:38'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:04:54' prior: 50671900!
anagrams
	
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:04:55'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:04:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:05:39'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:05:43'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:05:43'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:05:44'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:05:44'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:05:44'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:05:44'!
FAILURE!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:06:47' prior: 50671904!
anagrams
	
	(self = 'a') ifTrue: [^Set with: 'a'].
	
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:06:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:06:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:06:55'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:06:55'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:06:55'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:06:55'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:06:55'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:06:55'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:06:55'!
FAILURE!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:07:45' prior: 50671957!
anagrams
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:07:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:07:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:07:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:07:50'!
FAILURE!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:11:43' prior: 50672013!
anagrams
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	^Set with: (self copyFrom: 1 to: 1),(self copyFrom: 2 to: 2) with: (self copyFrom: 2 to: 2),(self copyFrom: 1 to: 1); yourself 
	
	
! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:11:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:11:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:11:49'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:11:49'!
FAILURE!

Set!

Set!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:13:11' prior: 50672037!
anagrams
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	^Set with: (self copyFrom: 1 to: 1),(self copyFrom: 2 to: 2) with: (self copyFrom: 2 to: 2),(self copyFrom: 1 to: 1)! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:13:16'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:13:16'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:13:16'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:13:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:13:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:13:26'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:13:26'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:13:26'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:13:27'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:13:27'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:13:27'!
FAILURE!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:14:32' prior: 50672066!
anagrams
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	^Set with: (self copyFrom: 1 to: 2) with: (self at: 2),(self at: 1).! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:14:37'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:14:37'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:14:37'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:14:37'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:14:43'!
ERROR!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:15:31' prior: 50672150!
anagrams
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	^Set with: (self copyFrom: 1 to: 2) with: (self at: 2) asString,(self at: 1) asString.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:15:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:15:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:15:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:15:36'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:15:36'!
FAILURE!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:23:23' prior: 50672181!
anagrams
	|set|
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: (self copyFrom: 1 to: 2) with: (self at: 2) asString,(self at: 1) asString.].
	
	set := Set new.
	
	(self copyFrom: 1 to: 2) anagrams do:[:subAnan|
		1 to: 3 do:[:index|
			set := subAnan insertWord: (self at: 3) asString at: index].
		].! !
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:23:34' prior: 50672213!
anagrams
	|set|
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: (self copyFrom: 1 to: 2) with: (self at: 2) asString,(self at: 1) asString.].
	
	set := Set new.
	
	(self copyFrom: 1 to: 2) anagrams do:[:subAnan|
		1 to: 3 do:[:index|
			set := subAnan insertWord: (self at: 3) asString at: index].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:23:40'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:23:40'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:23:40'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:23:40'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:23:40'!
ERROR!

'a' addAll: 'a'!

'a' add: 'b';yourself!

'a' add: ('b' asCharacterSet at: 1) ;yourself!

'a' add: ('b' asCharacterSet first) ;yourself!

'a' add: ('b' first) ;yourself!

'a', ('b' first) ;yourself!

'a', 'b' ;yourself!

('a', 'b' ) yourself!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:28:38' prior: 50672228!
anagrams
	|set|
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: (self copyFrom: 1 to: 2) with: (self at: 2) asString,(self at: 1) asString.].
	
	set := Set new.
	
	(self copyFrom: 1 to: 2) anagrams do:[:subAnan|
		1 to: 3 do:[:index|
			set := subAnan, (self at: 3) asString at: index].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:28:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:28:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:28:50'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:28:50'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:28:50'!
FAILURE!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:38:56' prior: 50672273!
anagrams
	|set|
	
	self ifEmpty: [	^Set with: ''.].
	
	(self size = 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: self with: self reverse].
	
	set := Set new.
	
	1 to: 3 do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: index), (self copyFrom: index to: self size).
		varAnan := var anagrams; do: [:temp|set add: temp, (self at: index) asString ].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:39:13'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:39:13'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:39:13'!
PASSED!

'a' copyFrom:3 to:2!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:43:06' prior: 50672311!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: self with: self reverse].
	
	set := Set new.
	
	1 to: 3 do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: index to: self size).
		varAnan := var anagrams; do: [:temp| set add: temp, (self at: index) asString .].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:43:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:43:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:43:12'!
PASSED!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:45:24' prior: 50672341!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: self with: self reverse].
	
	set := Set new.
	
	1 to: 3 do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		varAnan := var anagrams; do: [:temp| set add: temp, (self at: index) asString .].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:45:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:45:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:45:32'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:45:33'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:45:33'!
ERROR!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:46:58' prior: 50672369!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: self with: self reverse].
	
	set := Set new.
	
	1 to: 3 do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		varAnan := var anagrams; do: [:temp| set add: temp, ((self at: index) asString) .].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:47:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:47:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:47:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:47:07'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:47:07'!
ERROR!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:48:07' prior: 50672406!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: self with: self reverse].
	
	set := Set new.
	
	1 to: 3 do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		varAnan := var anagrams.
		varAnan do: [:temp| set add: temp, ((self at: index) asString) .].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:48:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:48:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:48:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:48:14'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:48:27'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:48:27'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:48:27'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:48:27'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:48:27'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:48:27'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:48:27'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:48:27'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:48:27'!
FAILURE!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:48:47' prior: 50672444!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	(self size = 2) ifTrue: [^Set with: self with: self reverse].
	
	set := Set new.
	
	1 to: self size do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		varAnan := var anagrams.
		varAnan do: [:temp| set add: temp, ((self at: index) asString) .].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:49:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:49:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:49:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:49:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:49:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:49:34'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:49:34'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:49:34'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:49:34'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:49:34'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'psm 10/2/2023 19:49:34'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 19:49:40'!
PASSED!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:50:02' prior: 50672564!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	set := Set new.
	
	1 to: self size do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		varAnan := var anagrams.
		varAnan do: [:temp| set add: temp, ((self at: index) asString) .].
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:50:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:50:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:50:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:50:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:50:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 19:50:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:53:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:53:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:53:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:53:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:53:36'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 19:53:36'!
PASSED!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:57:42' prior: 50672639!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	set := Set new.
	
	1 to: self size do: [:index|
		|var varAnan|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		varAnan := var anagrams.
		set addAll: (varAnan collect: [:tail| (self at: index) asString, tail]).
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:57:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:57:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:57:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:57:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:57:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 19:57:47'!
PASSED!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 19:58:19' prior: 50672706!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	set := Set new.
	
	1 to: self size do: [:index|
		|var|
		var := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		set addAll: (var anagrams collect: [:tail| (self at: index) asString, tail]).
		].
	
	^set! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'psm 10/2/2023 19:58:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'psm 10/2/2023 19:58:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'psm 10/2/2023 19:58:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'psm 10/2/2023 19:58:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'psm 10/2/2023 19:58:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'psm 10/2/2023 19:58:28'!
PASSED!
!String methodsFor: 'anagram' stamp: 'psm 10/2/2023 20:00:19' prior: 50672746!
anagrams
	|set|
	
	(self size <= 1) ifTrue: [^Set with: self].
	
	set := Set new.
	
	1 to: self size do: [:index|
		|subAnagramsWithoutIndex|
		subAnagramsWithoutIndex := (self copyFrom: 1 to: (index - 1)), (self copyFrom: (index + 1) to: self size).
		set addAll: (subAnagramsWithoutIndex anagrams collect: [:tail| (self at: index) asString, tail]).
		].
	
	^set! !

----STARTUP---- (5 October 2023 17:45:32) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


GregorianDate createSunday !

GregorianDay createSunday!

TestCase subclass: #testXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!

TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!

!classDefinition: #TestXX category: 'CalendarTest' stamp: 'psm 10/5/2023 18:11:23'!
TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!

!classDefinition: #HolidayCalendar category: 'CalendarTest' stamp: 'psm 10/5/2023 18:14:14'!
Object subclass: #HolidayCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!
!TestXX methodsFor: 'no messages' stamp: 'psm 10/5/2023 18:14:25'!
test01

	| holidayCalendar aNonHoliday |
	
	holidayCalendar := HolidayCalendar new.
	aNonHoliday := October / 5 / 2023.
	
	self deny: (holidayCalendar isHoliday: aNonHoliday)! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:14:34'!
ERROR!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:14:50'!
isHoliday: aNonHoliday 
	self shouldBeImplemented.! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:14:58' prior: 50671045!
isHoliday: aNonHoliday 
	^false! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:15:00'!
PASSED!

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:15:00'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:15:16'!
test02

	| holidayCalendar aNonHoliday |
	
	holidayCalendar := HolidayCalendar new.
	aNonHoliday := October / 5 / 2023.
	
	self deny: (holidayCalendar isHoliday: aNonHoliday)! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:15:45' prior: 50671058!
test02

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := October / 8 / 2023.
	
	self deny: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:15:47'!
PASSED!

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:15:47'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:15:47'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:15:56' prior: 50671067!
test02

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := October / 8 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:15:58'!
FAILURE!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:16:50' prior: 50671050!
isHoliday: aNonHoliday

	 
	^aNonHoliday day = Sunday! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:17:05'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:17:05'!
PASSED!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:18:03' prior: 50671093!
isHoliday: potentialHoliday

	 
	^potentialHoliday day = Sunday! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:18:06'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:18:06'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:19:10'!
test03

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := (October / 8 / 2023) nextDay: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:19:18'!
PASSED!

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:19:18'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:19:18'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:19:18'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:21:33' prior: 50671111!
test03

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := (October / 8 / 2023) nextDay: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSunday)! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:22:42' prior: 50671129!
test03

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	aSunday := (October / 8 / 2023) nextDay: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSunday)! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:23:30' prior: 50671138!
test03

	| holidayCalendar aSaturday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := (October / 8 / 2023) nextDay: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSaturday)! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:24:07' prior: 50671147!
test03

	| holidayCalendar aSaturday |
	
	holidayCalendar := HolidayCalendar new.
	aSaturday := (October / 7 / 2023).
	
	self assert: (holidayCalendar isHoliday: aSaturday)! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:24:33' prior: 50671102!
isHoliday: potentialHoliday

	 
	^potentialHoliday day = Sunday or: [potentialHoliday day = Saturday]! !

!classDefinition: #HolidayCalendar category: 'CalendarTest' stamp: 'psm 10/5/2023 18:28:28'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'holidayWeek'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:28:25' prior: 50671165!
isHoliday: potentialHoliday

	 
	^potentialHoliday day = holidayWeek! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:28:38'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:28:38'!
FAILURE!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:28:38'!
FAILURE!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:29:40' prior: 50671082!
test02

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	aSunday := October / 8 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSunday )! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:30:03'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:30:03'!
ERROR!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:30:03'!
FAILURE!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:31:56' prior: 50671156!
test03

	| holidayCalendar aSaturday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	aSaturday := (October / 7 / 2023).
	
	self assert: (holidayCalendar isHoliday: aSaturday)! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:31:59'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:31:59'!
ERROR!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:31:59'!
ERROR!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:32:04'!
ERROR!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:32:27'!
markWeekDayAsHoliday: Sunday 
	self shouldBeImplemented.! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:32:45' prior: 50671225!
markWeekDayAsHoliday: Sunday 
	holidayWeek = Sunday .! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:32:57' prior: 50671230!
markWeekDayAsHoliday: Sunday 
	holidayWeek := Sunday .! !

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:32:59'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:33:12'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:36:11' prior: 50671207!
test03

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:36:13'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:36:13'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:36:13'!
FAILURE!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:36:13'!
FAILURE!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:37:09' overrides: 16920235!
initialize

	holidayWeek := Set new .! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:37:36' prior: 50671179!
isHoliday: potentialHoliday

	 
	^holidayWeek includes: potentialHoliday day! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:38:08' prior: 50671235!
markWeekDayAsHoliday: Sunday 
	holidayWeek add: Sunday .! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:38:10'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:38:10'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:38:10'!
PASSED!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:39:29' prior: 50671277!
markWeekDayAsHoliday: aDayOfTheWeekAsHoliday 

	holidayWeek add: aDayOfTheWeekAsHoliday .! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:39:39'!
test04

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:40:07' prior: 50671294!
test04

	| holidayCalendar aSaturday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	aSaturday := (October / 7 / 2023).
	
	self assert: (holidayCalendar isHoliday: aSaturday)! !

!testRun: #TestXX #test01 stamp: 'psm 10/5/2023 18:40:09'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/5/2023 18:40:09'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/5/2023 18:40:09'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:40:09'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:40:31'!
test043

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))! !

!methodRemoval: TestXX #test03 stamp: 'psm 10/5/2023 18:40:31'!
test03

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:40:37'!
test03

	| holidayCalendar aSaturday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	aSaturday := (October / 7 / 2023).
	
	self assert: (holidayCalendar isHoliday: aSaturday)! !

!methodRemoval: TestXX #test04 stamp: 'psm 10/5/2023 18:40:37'!
test04

	| holidayCalendar aSaturday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	aSaturday := (October / 7 / 2023).
	
	self assert: (holidayCalendar isHoliday: aSaturday)!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:40:42'!
test04

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))! !

!methodRemoval: TestXX #test043 stamp: 'psm 10/5/2023 18:40:42'!
test043

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:43:24'!
test01NonHolidayisNonHoliday

	| holidayCalendar aNonHoliday |
	
	holidayCalendar := HolidayCalendar new.
	aNonHoliday := October / 5 / 2023.
	
	self deny: (holidayCalendar isHoliday: aNonHoliday)! !

!methodRemoval: TestXX #test01 stamp: 'psm 10/5/2023 18:43:24'!
test01

	| holidayCalendar aNonHoliday |
	
	holidayCalendar := HolidayCalendar new.
	aNonHoliday := October / 5 / 2023.
	
	self deny: (holidayCalendar isHoliday: aNonHoliday)!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:43:49'!
test02OneWeekDayCanBeHoliday

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	aSunday := October / 8 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSunday )! !

!methodRemoval: TestXX #test02 stamp: 'psm 10/5/2023 18:43:49'!
test02

	| holidayCalendar aSunday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Sunday.
	aSunday := October / 8 / 2023.
	
	self assert: (holidayCalendar isHoliday: aSunday )!

!methodRemoval: TestXX #test03 stamp: 'psm 10/5/2023 18:44:34'!
test03

	| holidayCalendar aSaturday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	aSaturday := (October / 7 / 2023).
	
	self assert: (holidayCalendar isHoliday: aSaturday)!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:45:02'!
test04MoreThanOneWeekDayCanBeHoliday

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))! !

!methodRemoval: TestXX #test04 stamp: 'psm 10/5/2023 18:45:02'!
test04

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:46:54'!
test03MoreThanOneWeekDayCanBeHoliday

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))! !

!methodRemoval: TestXX #test04MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:46:54'!
test04MoreThanOneWeekDayCanBeHoliday

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: (holidayCalendar isHoliday: aMonday ))!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:50:12'!
test04

	| holidayCalendar aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	aChristmas := (December / 25 / 2023).
	
	self assert: (holidayCalendar isHoliday: aChristmas).! !

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:50:15'!
PASSED!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:50:15'!
PASSED!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:50:15'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:50:15'!
FAILURE!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:50:15'!
FAILURE!

(December / 25 / 2023) month !

(December / 25 / 2023) monthOfYear !

(December / 25 / 2023) dayOfMonth !

dayOfMonth!

(December / 25 / 2023) dayOfMonth!

(December / 25 / 2023) dayOfMonth !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:52:54' prior: 50671271!
isHoliday: potentialHoliday

	 
	^(holidayWeek includes: potentialHoliday day) or: (potentialHoliday dayOfMonth = December / 25)! !

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:53:02'!
ERROR!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:53:02'!
ERROR!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:53:02'!
ERROR!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:53:02'!
ERROR!

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:53:15'!
ERROR!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:53:15'!
ERROR!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:53:15'!
ERROR!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:53:15'!
ERROR!

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:53:17'!
ERROR!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:53:44' prior: 50671531!
isHoliday: potentialHoliday

	 
	^(holidayWeek includes: potentialHoliday day) or: (potentialHoliday dayOfMonth = 25 of: December )! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:53:50' prior: 50671562!
isHoliday: potentialHoliday

	 
	^(holidayWeek includes: potentialHoliday day) or: (potentialHoliday dayOfMonth = (25 of: December) )! !

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:53:51'!
ERROR!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:53:51'!
ERROR!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:53:51'!
ERROR!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:53:51'!
ERROR!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:54:19' prior: 50671569!
isHoliday: potentialHoliday

	 
	^(holidayWeek includes: potentialHoliday day) or: (potentialHoliday dayOfMonth = (December / 25) )! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:54:21' prior: 50671587!
isHoliday: potentialHoliday

	 
	^(holidayWeek includes: potentialHoliday day) or: (potentialHoliday dayOfMonth = (December / 25) )! !

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:54:23'!
PASSED!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:54:23'!
PASSED!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:54:23'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:54:23'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:54:59'!
test05

	| holidayCalendar aDayAfterChristmas |
	
	holidayCalendar := HolidayCalendar new.
	aDayAfterChristmas := (December / 26 / 2023).
	
	self assert: (holidayCalendar isHoliday: aDayAfterChristmas ).! !

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:55:01'!
PASSED!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:55:01'!
PASSED!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:55:01'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:55:01'!
PASSED!

!testRun: #TestXX #test05 stamp: 'psm 10/5/2023 18:55:01'!
FAILURE!

!testRun: #TestXX #test05 stamp: 'psm 10/5/2023 18:55:01'!
FAILURE!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:55:20' prior: 50671612!
test05

	| holidayCalendar aDayAfterChristmas |
	
	holidayCalendar := HolidayCalendar new.
	aDayAfterChristmas := (December / 26 / 2023).
	
	self deny: (holidayCalendar isHoliday: aDayAfterChristmas ).! !

!testRun: #TestXX #test05 stamp: 'psm 10/5/2023 18:55:21'!
PASSED!

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 18:55:21'!
PASSED!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:55:21'!
PASSED!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 18:55:21'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 18:55:21'!
PASSED!

!testRun: #TestXX #test05 stamp: 'psm 10/5/2023 18:55:21'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:56:07' prior: 50671637!
test05

	| holidayCalendar independenceDay |
	
	holidayCalendar := HolidayCalendar new.
	independenceDay := (May / 25 / 2023).
	
	self assert: (holidayCalendar isHoliday: independenceDay ).! !

!testRun: #TestXX #test05 stamp: 'psm 10/5/2023 18:56:08'!
FAILURE!

!classDefinition: #HolidayCalendar category: 'CalendarTest' stamp: 'psm 10/5/2023 18:58:11'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'holidayWeek holidayInEveryYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:58:09' prior: 50671594!
isHoliday: potentialHoliday

	 
	^(holidayWeek includes: potentialHoliday day) or: (holidayInEveryYear includes: potentialHoliday ) ! !

!classDefinition: #HolidayCalendar category: 'CalendarTest' stamp: 'psm 10/5/2023 18:58:27'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'holidayDayOfTheWeek holidayInEveryYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:58:27' prior: 50671288!
markWeekDayAsHoliday: aDayOfTheWeekAsHoliday 

	holidayDayOfTheWeek add: aDayOfTheWeekAsHoliday .! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:58:27' prior: 50671267 overrides: 16920235!
initialize

	holidayDayOfTheWeek := Set new .! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:58:27' prior: 50671681!
isHoliday: potentialHoliday

	 
	^(holidayDayOfTheWeek includes: potentialHoliday day) or: (holidayInEveryYear includes: potentialHoliday ) ! !

!classDefinition: #HolidayCalendar category: 'CalendarTest' stamp: 'psm 10/5/2023 18:58:52'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'holidayInEveryWeek holidayInEveryYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarTest'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:58:52' prior: 50671697!
markWeekDayAsHoliday: aDayOfTheWeekAsHoliday 

	holidayInEveryWeek add: aDayOfTheWeekAsHoliday .! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:58:52' prior: 50671704 overrides: 16920235!
initialize

	holidayInEveryWeek := Set new .! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 18:58:52' prior: 50671709!
isHoliday: potentialHoliday

	 
	^(holidayInEveryWeek includes: potentialHoliday day) or: (holidayInEveryYear includes: potentialHoliday ) ! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 18:59:53'!
markDayOfMonthAsHoliday: aDayOfTheWeekAsHoliday 

	holidayInEveryWeek add: aDayOfTheWeekAsHoliday .! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 19:00:16' prior: 50671744!
markDayOfMonthAsHoliday: aDayOfTheMonthAsHoliday 

	holidayInEveryWeek add: aDayOfTheMonthAsHoliday .! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 19:00:45' prior: 50671750!
markDayOfMonthAsHoliday: aDayOfTheMonthAsHoliday 

	holidayInEveryYear add: aDayOfTheMonthAsHoliday .! !
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 19:01:03' prior: 50671737!
isHoliday: potentialHoliday

	 
	^(holidayInEveryWeek includes: potentialHoliday day) or: (holidayInEveryYear includes: potentialHoliday dayOfMonth ) ! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:02:43' prior: 50671503!
test04

	| holidayCalendar aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	
	self assert: (holidayCalendar isHoliday: aChristmas).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:02:57' prior: 50671662!
test05

	| holidayCalendar independenceDay |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	independenceDay := (May / 25 / 2023).
	
	self assert: (holidayCalendar isHoliday: independenceDay ).! !

!testRun: #TestXX #test05 stamp: 'psm 10/5/2023 19:02:59'!
ERROR!
!HolidayCalendar methodsFor: 'xxx' stamp: 'psm 10/5/2023 19:03:21' prior: 50671732 overrides: 16920235!
initialize

	holidayInEveryWeek := Set new .
	
	holidayInEveryYear := Set new.! !

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 19:03:24'!
PASSED!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 19:03:24'!
PASSED!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 19:03:24'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/5/2023 19:03:24'!
PASSED!

!testRun: #TestXX #test05 stamp: 'psm 10/5/2023 19:03:24'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:06:12' prior: 50671781!
test05

	| holidayCalendar independenceDay aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	independenceDay := (May / 25 / 2023).
	
	self assert: ((holidayCalendar isHoliday: independenceDay ) and: (holidayCalendar isHoliday: aChristmas ))! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:06:32'!
test04OneMonthDayIsHoliday

	| holidayCalendar aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	
	self assert: (holidayCalendar isHoliday: aChristmas).! !

!methodRemoval: TestXX #test04 stamp: 'psm 10/5/2023 19:06:32'!
test04

	| holidayCalendar aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	
	self assert: (holidayCalendar isHoliday: aChristmas).!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:06:45'!
test05ManyMonthDayIsholiday

	| holidayCalendar independenceDay aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	independenceDay := (May / 25 / 2023).
	
	self assert: ((holidayCalendar isHoliday: independenceDay ) and: (holidayCalendar isHoliday: aChristmas ))! !

!methodRemoval: TestXX #test05 stamp: 'psm 10/5/2023 19:06:45'!
test05

	| holidayCalendar independenceDay aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	independenceDay := (May / 25 / 2023).
	
	self assert: ((holidayCalendar isHoliday: independenceDay ) and: (holidayCalendar isHoliday: aChristmas ))!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:06:50'!
test05ManyMonthDayIsHoliday

	| holidayCalendar independenceDay aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	independenceDay := (May / 25 / 2023).
	
	self assert: ((holidayCalendar isHoliday: independenceDay ) and: (holidayCalendar isHoliday: aChristmas ))! !

!methodRemoval: TestXX #test05ManyMonthDayIsholiday stamp: 'psm 10/5/2023 19:06:50'!
test05ManyMonthDayIsholiday

	| holidayCalendar independenceDay aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	independenceDay := (May / 25 / 2023).
	
	self assert: ((holidayCalendar isHoliday: independenceDay ) and: (holidayCalendar isHoliday: aChristmas ))!

!testRun: #TestXX #test05ManyMonthDayIsHoliday stamp: 'psm 10/5/2023 19:06:51'!
PASSED!

!testRun: #TestXX #test05ManyMonthDayIsHoliday stamp: 'psm 10/5/2023 19:06:54'!
PASSED!

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 19:06:54'!
PASSED!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 19:06:54'!
PASSED!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 19:06:54'!
PASSED!

!testRun: #TestXX #test04OneMonthDayIsHoliday stamp: 'psm 10/5/2023 19:06:54'!
PASSED!

!testRun: #TestXX #test05ManyMonthDayIsHoliday stamp: 'psm 10/5/2023 19:06:54'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:08:32' prior: 50671878!
test05ManyMonthDayIsHoliday

	| holidayCalendar anIndependenceDay aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	anIndependenceDay := (May / 25 / 2023).
	
	self assert: ((holidayCalendar isHoliday: anIndependenceDay ) and: (holidayCalendar isHoliday: aChristmas ))! !

!testRun: #TestXX #test05ManyMonthDayIsHoliday stamp: 'psm 10/5/2023 19:08:35'!
PASSED!

!testRun: #TestXX #test01NonHolidayisNonHoliday stamp: 'psm 10/5/2023 19:08:35'!
PASSED!

!testRun: #TestXX #test02OneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 19:08:35'!
PASSED!

!testRun: #TestXX #test03MoreThanOneWeekDayCanBeHoliday stamp: 'psm 10/5/2023 19:08:35'!
PASSED!

!testRun: #TestXX #test04OneMonthDayIsHoliday stamp: 'psm 10/5/2023 19:08:35'!
PASSED!

!testRun: #TestXX #test05ManyMonthDayIsHoliday stamp: 'psm 10/5/2023 19:08:35'!
PASSED!
!HolidayCalendar methodsFor: 'looking for holidays' stamp: 'psm 10/5/2023 19:13:28' prior: 50671762!
isHoliday: potentialHoliday

	 
	^(holidayInEveryWeek includes: potentialHoliday day) or: [holidayInEveryYear includes: potentialHoliday dayOfMonth ]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:13:49' prior: 50671473!
test03MoreThanOneWeekDayCanBeHoliday

	| holidayCalendar aSaturday aMonday |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markWeekDayAsHoliday: Saturday .
	holidayCalendar markWeekDayAsHoliday: Monday.
	aSaturday := (October / 7 / 2023).
	aMonday := (October / 9 / 2023).
	
	self assert: ((holidayCalendar isHoliday: aSaturday) and: [holidayCalendar isHoliday: aMonday ])! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/5/2023 19:14:00' prior: 50671930!
test05ManyMonthDayIsHoliday

	| holidayCalendar anIndependenceDay aChristmas |
	
	holidayCalendar := HolidayCalendar new.
	holidayCalendar markDayOfMonthAsHoliday: May / 25.
	holidayCalendar markDayOfMonthAsHoliday: December / 25.
	aChristmas := (December / 25 / 2023).
	anIndependenceDay := (May / 25 / 2023).
	
	self assert: ((holidayCalendar isHoliday: anIndependenceDay ) and: [holidayCalendar isHoliday: aChristmas ])! !

!classRenamed: #TestXX as: #HolidayCalendarTest stamp: 'psm 10/5/2023 19:14:33'!
Smalltalk renameClassNamed: #TestXX as: #HolidayCalendarTest!

----QUIT----(5 October 2023 20:03:12) CuisUniversity-5981.image priorSource: 10859332!

----STARTUP---- (12 October 2023 18:12:34) as /home/pablo/Documents/inge1/linux64/CuisUniversity-5981.image!


[]!

----End fileIn of /home/pablo/Documents/inge1/linux64/Portfolio-Ejercicio.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'psm 10/12/2023 20:01:40' prior: 50672229!
balance

	^transactions sum: [ :aTransaction | aTransaction affectBalanceInAccount ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'psm 10/12/2023 20:01:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'psm 10/12/2023 20:01:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'psm 10/12/2023 20:01:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'psm 10/12/2023 20:01:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'psm 10/12/2023 20:01:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'psm 10/12/2023 20:01:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'psm 10/12/2023 20:01:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'psm 10/12/2023 20:01:45'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:01:54'!
affectBalanceInAccount
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:02:12' prior: 50672279!
affectBalanceInAccount
	
	^value ! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'psm 10/12/2023 20:02:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'psm 10/12/2023 20:02:16'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:02:27'!
affectBalanceInAccount
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:02:56' prior: 50672296!
affectBalanceInAccount
	
	^value negated ! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'psm 10/12/2023 20:02:59'!
PASSED!

TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TestXX category: 'Portfolio-Ejercicio' stamp: 'psm 10/12/2023 20:03:26'!
TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TestXX methodsFor: 'no messages' stamp: 'psm 10/12/2023 20:04:11'!
test01! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'psm 10/12/2023 20:05:47'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:05:43' prior: 50672320!
test01

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:05:55'!
ERROR!

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:05:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:06:02'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:06:05' prior: 50672341!
balance
	^0! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:06:08'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:07:12'!
test02

	| portfolio anAccount |
	
	portfolio := Portfolio new.
	
	anAccount := AccountTransaction .
	
	self assert: portfolio balance equals: 0.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:08:00' prior: 50672351!
test02

	| portfolio anAccount |
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	self assert: portfolio balance equals: 0.! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:09:39' prior: 50672359!
test02

	| portfolio anAccount |
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 200 on: anAccount .
	
	portfolio addAnAccount: anAccount .
	
	self assert: portfolio balance equals: 200.! !

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:09:41'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:09:49'!
addAnAccount: anAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'psm 10/12/2023 20:10:20'!
Object subclass: #Portfolio
	instanceVariableNames: 'xx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:10:17' prior: 50672379!
addAnAccount: anAccount 
	
	xx := true.! !

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:10:23'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:10:48' prior: 50672346!
balance
	^xx.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:11:13' overrides: 16920235!
initialize

	xx := false.! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:11:17'!
FAILURE!

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:11:17'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:11:51' prior: 50672398!
balance
	xx ifFalse: [^0] ifTrue: [^200]! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:11:53'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:11:53'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:16:17' prior: 50672402 overrides: 16920235!
initialize

	xx := 0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:16:26' prior: 50672391!
addAnAccount: anAccount 
	
	xx := 200.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:16:45' prior: 50672411!
balance
	^xx! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:16:47'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:16:47'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:19:53'!
test03

	| portfolio anAccount |
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 200 on: anAccount .
	Deposit register: 200 on: anAccount .
	
	portfolio addAnAccount: anAccount .
	
	self assert: portfolio balance equals: 400.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:20:26' prior: 50672425!
addAnAccount: anAccount 
	
	xx := anAccount .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:20:47' prior: 50672421 overrides: 16920235!
initialize

	xx := ReceptiveAccount new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:20:54' prior: 50672430!
balance
	^xx balance ! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:20:57'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:20:57'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/12/2023 20:20:57'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:22:37'!
test04

	| portfolio account1st account2nd |
	
	portfolio := Portfolio new.
	
	account1st := ReceptiveAccount new.
	account2nd := ReceptiveAccount new.
	
	Deposit register: 200 on: account1st .
	Deposit register: 200 on: account2nd .
	
	portfolio addAnAccount: account1st .
	portfolio addAnAccount: account2nd .
	
	self assert: portfolio balance equals: 400.! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:22:40'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:22:40'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/12/2023 20:22:40'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/12/2023 20:22:40'!
FAILURE!

!testRun: #TestXX #test04 stamp: 'psm 10/12/2023 20:22:40'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:23:23' prior: 50672456 overrides: 16920235!
initialize

	xx := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:23:33' prior: 50672450!
addAnAccount: anAccount 
	
	xx add: anAccount .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:23:55' prior: 50672461!
balance
	^xx sum:[:anAccount| anAccount balance]! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:23:57'!
ERROR!

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:23:57'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/12/2023 20:23:57'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/12/2023 20:23:57'!
PASSED!

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:23:57'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:24:32' prior: 50672507!
balance
	^xx sum:[:anAccount| anAccount balance]	  ifEmpty: [^0]! !

!testRun: #TestXX #test01 stamp: 'psm 10/12/2023 20:24:34'!
PASSED!

!testRun: #TestXX #test02 stamp: 'psm 10/12/2023 20:24:34'!
PASSED!

!testRun: #TestXX #test03 stamp: 'psm 10/12/2023 20:24:34'!
PASSED!

!testRun: #TestXX #test04 stamp: 'psm 10/12/2023 20:24:34'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'psm 10/12/2023 20:26:10'!
Object subclass: #Portfolio
	instanceVariableNames: 'listOfAcounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:26:10' prior: 50672502!
addAnAccount: anAccount 
	
	listOfAcounts add: anAccount .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:26:10' prior: 50672497 overrides: 16920235!
initialize

	listOfAcounts := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:26:10' prior: 50672523!
balance
	^listOfAcounts sum:[:anAccount| anAccount balance]	  ifEmpty: [^0]! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'psm 10/12/2023 20:26:23'!
Object subclass: #Portfolio
	instanceVariableNames: 'listOfAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:26:23' prior: 50672545!
addAnAccount: anAccount 
	
	listOfAccounts add: anAccount .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:26:23' prior: 50672551 overrides: 16920235!
initialize

	listOfAccounts := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 20:26:23' prior: 50672556!
balance
	^listOfAccounts sum:[:anAccount| anAccount balance]	  ifEmpty: [^0]! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 21:09:36'!
test05

	| portfolio account1st account2nd  aDeposit|
	
	portfolio := Portfolio new.
	
	account1st := ReceptiveAccount new.
	account2nd := ReceptiveAccount new.
	
	aDeposit := Deposit register: 200 on: account1st .
	account2nd register: aDeposit .
	
	portfolio addAnAccount: account1st .
	
	self should: [portfolio addAnAccount: account2nd .] raise: Error  description: [:error| self assert: error message equals: Portfolio thisTransactionsIsAlreadyRegistered]! !

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:09:41'!
FAILURE!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:09:41'!
ERROR!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 21:10:38' prior: 50672586!
test05

	| portfolio account1st account2nd  aDeposit|
	
	portfolio := Portfolio new.
	
	account1st := ReceptiveAccount new.
	account2nd := ReceptiveAccount new.
	
	aDeposit := Deposit register: 200 on: account1st .
	account2nd register: aDeposit .
	
	portfolio addAnAccount: account1st .
	
	self 
		should: [portfolio addAnAccount: account2nd .]
		 raise: Error  
		description: [:error| self assert: error message equals: Portfolio thisTransactionsIsAlreadyRegistered]
		! !

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:10:43'!
FAILURE!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:10:43'!
ERROR!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 21:12:03' prior: 50672608!
test05

	| portfolio account1st account2nd  aDeposit|
	
	portfolio := Portfolio new.
	
	account1st := ReceptiveAccount new.
	account2nd := ReceptiveAccount new.
	
	aDeposit := Deposit register: 200 on: account1st .
	account2nd register: aDeposit .
	
	portfolio addAnAccount: account1st .
	
	self 
		should: [portfolio addAnAccount: account2nd .]
		 raise: Error  
		description: [Portfolio thisTransactionsIsAlreadyRegistered]
		! !

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:12:05'!
FAILURE!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:12:05'!
ERROR!
!TestXX methodsFor: 'as yet unclassified' stamp: 'psm 10/12/2023 21:12:16' prior: 50672631!
test05

	| portfolio account1st account2nd  aDeposit|
	
	portfolio := Portfolio new.
	
	account1st := ReceptiveAccount new.
	account2nd := ReceptiveAccount new.
	
	aDeposit := Deposit register: 200 on: account1st .
	account2nd register: aDeposit .
	
	portfolio addAnAccount: account1st .
	
	self 
		should: [portfolio addAnAccount: account2nd .]
		 raise: Error  
		description: Portfolio thisTransactionsIsAlreadyRegistered.
		! !

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:12:17'!
ERROR!
!Portfolio class methodsFor: 'error message' stamp: 'psm 10/12/2023 21:12:37'!
thisTransactionsIsAlreadyRegistered
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error message' stamp: 'psm 10/12/2023 21:13:02' prior: 50672671!
thisTransactionsIsAlreadyRegistered
	'this transaction is already in the Portfolio'! !

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:13:04'!
FAILURE!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:13:04'!
ERROR!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:13:26'!
FAILURE!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:13:26'!
ERROR!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:14:13'!
FAILURE!

!testRun: #TestXX #test05 stamp: 'psm 10/12/2023 21:14:13'!
ERROR!

----SNAPSHOT----(12 October 2023 21:14:31) CuisUniversity-5981.image priorSource: 10891449!

----QUIT----(12 October 2023 21:30:43) CuisUniversity-5981.image priorSource: 10913428!