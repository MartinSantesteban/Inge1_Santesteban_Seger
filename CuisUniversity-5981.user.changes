

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (30 November 2023 17:21:16) as /home/clinux01/Descargas/linux64/linux64/CuisUniversity-5981.image!


TestCase subclass: #MineFieldTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineFieldTests category: 'MineField' stamp: 'MS 11/30/2023 17:22:29'!
TestCase subclass: #MineFieldTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:24:55'!
Object subclass: #MineField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:24:50'!
test01

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self assert: (aGame playerIsAt: (5@1)).! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:25:04'!
ERROR!
!MineField class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 17:25:09'!
withExtensions: aRenameMe1 startingIn: aRenameMe2 withItems: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithExtensions: aRenameMe1 startingIn: aRenameMe2 withItems: aRenameMe3 ! !
!MineField class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 17:25:37' prior: 50650350!
withExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 

	^self new initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems ! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:25:38'!
ERROR!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:25:46'!
Object subclass: #MineField
	instanceVariableNames: 'mapDimensions_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:25:47'!
Object subclass: #MineField
	instanceVariableNames: 'mapDimensions_CHANGE_ME position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:25:47'!
Object subclass: #MineField
	instanceVariableNames: 'mapDimensions_CHANGE_ME position arrayOfItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:25:47'!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	self shouldBeImplemented.
	mapDimensions_CHANGE_ME := mapDimensions.
	position := aPosition.
	arrayOfItems := anArrayOfItems.! !

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:26:06'!
Object subclass: #MineField
	instanceVariableNames: 'mapDimensions_CHANGE_ME position arrayOfItems mapExtensions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:26:06'!
Object subclass: #MineField
	instanceVariableNames: 'mapDimensions_CHANGE_ME position arrayOfItems mapExtensions startingPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:26:07'!
Object subclass: #MineField
	instanceVariableNames: 'mapDimensions_CHANGE_ME position arrayOfItems mapExtensions startingPosition items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:26:03' prior: 50650396!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	mapExtensions := mapDimensions.
	startingPosition := aPosition.
	items := anArrayOfItems.! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:26:09'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 17:26:18'!
playerIsAt: aRenameMe1 
	self shouldBeImplemented.! !
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 17:26:30' prior: 50650444!
playerIsAt: aPosition 
	self shouldBeImplemented.! !
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 17:26:36' prior: 50650449!
playerIsAt: aPosition 
	
	^true! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:26:37'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:26:37'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:26:46'!
test02

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self deny: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:26:51' prior: 50650463!
test02

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self deny: (aGame playerIsAt: (5@2)).! !

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:26:52'!
FAILURE!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:27:08'!
Object subclass: #MineField
	instanceVariableNames: 'mapDimensions_CHANGE_ME position arrayOfItems mapExtensions startingPosition items playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 17:27:07' prior: 50650454!
playerIsAt: aPosition 
	
	^playerPosition = aPosition.! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:27:18' prior: 50650433!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	mapExtensions := mapDimensions.
	startingPosition := aPosition.
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:27:19'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:27:19'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:28:31'!
test03

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@2)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:29:14' prior: 50650496!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !
!MineField methodsFor: 'nil' stamp: 'MS 11/30/2023 17:29:24'!
assertValidStartingPosition: aPosition! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:29:30' prior: 50650520!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition ) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:29:32' prior: 50650538!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:29:49' prior: 50650533!
assertValidStartingPosition: aPosition

	^aPosition y = 1! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:29:50'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:29:50'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:29:50'!
ERROR!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:29:50'!
ERROR!
!MineField class methodsFor: 'nil' stamp: 'MS 11/30/2023 17:30:20'!
invalidStartingPositionErrorMessage

	^'Starting position should be in first row!!'! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:30:21'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:30:21'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:30:21'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:30:30'!
test04

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (-5@2)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:30:44'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:30:44'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:30:44'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:30:44'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:30:44'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:30:50' prior: 50650593!
test04

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (-5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:30:51'!
FAILURE!
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:31:27' prior: 50650566!
assertValidStartingPosition: aPosition

	^(aPosition y = 1) and: [self positionInMapBounds: aPosition].! !
!MineField methodsFor: 'nil' stamp: 'MS 11/30/2023 17:31:40'!
positionInMapBounds: aPosition

		! !
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:32:47' prior: 50650634!
positionInMapBounds: aPosition

	^(0 < aPosition x)	 and: [0 < aPosition y] and: [aPosition x <= mapExtensions x] and: [aPosition y <= mapExtensions y] ! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:32:47'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:32:47'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:32:47'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:32:47'!
PASSED!
!MineField class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:33:15' prior: 50650580!
invalidStartingPositionErrorMessage

	^'Starting position should be in the first row within map bounds!!'! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:33:19'!
test05

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (-5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:33:32' prior: 50650663!
test05

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:33:35' prior: 50650673!
test05

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:33:48' prior: 50650683!
test05

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	! !
!MineField class methodsFor: 'nil' stamp: 'MS 11/30/2023 17:34:46'!
invalidMapExtensionsErrorMessage

	^'Map extensions should be composed by two integers greater than 2!!'! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:34:54' prior: 50650702!
invalidMapExtensionsErrorMessage

	^'Map extensions should be composed by two integers greater than 1!!'! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:35:26' prior: 50650552!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	
	(self assertValidMapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:35:33' prior: 50650716!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !
!MineField methodsFor: 'nil' stamp: 'MS 11/30/2023 17:36:13'!
assertValidMapDimensions: mapDimensions
	
	^ (0 < mapDimensions x) and: [(0 < mapDimensions x)]! !
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:36:14' prior: 50650750!
assertValidMapDimensions: mapDimensions
	
	^ (0 < mapDimensions x) and: [(0 < mapDimensions y)]! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:36:15'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:36:15'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:36:15'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:36:15'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:36:15'!
FAILURE!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:36:15'!
FAILURE!
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:36:27' prior: 50650757!
assertValidMapDimensions: mapDimensions
	
	^ (1 < mapDimensions x) and: [(1 < mapDimensions y)]! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:36:27'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:36:27'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:36:27'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:36:27'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:36:27'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:36:50'!
test06

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1/8)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:36:57' prior: 50650796!
test06

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1/8)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:36:58'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:36:58'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:36:58'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:36:58'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:36:58'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:36:58'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:36:58'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:37:04' prior: 50650806!
test06

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:37:05' prior: 50650833!
test06

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:37:05'!
FAILURE!
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:37:31' prior: 50650628!
assertValidStartingPosition: aPosition

	^(aPosition y = 1) and: [self positionInMapBounds: aPosition] and: (aPosition x isInteger and: aPosition y isInteger).! !
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:37:35' prior: 50650856!
assertValidStartingPosition: aPosition

	^(aPosition y = 1) and: [self positionInMapBounds: aPosition] and: [(aPosition x isInteger and: aPosition y isInteger)].! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:37:36'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:37:36'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:37:36'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:37:36'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:37:36'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:37:36'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:37:56'!
test07

	self 
		should: [MineField withExtensions: (8/7@10)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:38:05' prior: 50650887!
test07

	self 
		should: [MineField withExtensions: (8/7@10)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:38:11' prior: 50650897!
test07

	self 
		should: [MineField withExtensions: (99/3@10)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	! !

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:38:11'!
FAILURE!
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 17:38:50' prior: 50650778!
assertValidMapDimensions: mapDimensions
	
	^ (1 < mapDimensions x) and: [(1 < mapDimensions y)] and: [(mapDimensions x isInteger and: mapDimensions y isInteger)]! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:38:50'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:38:50'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:38:50'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:38:50'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:38:50'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:38:50'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:38:50'!
FAILURE!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:38:50'!
FAILURE!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:39:10'!
FAILURE!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:39:10'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:39:34' prior: 50650907!
test07

	self 
		should: [MineField withExtensions: (100/3@10)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	! !

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:39:35'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:39:39'!
test08

	self 
		should: [MineField withExtensions: (100/3@10)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:39:45' prior: 50650981!
test08

	
					
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:39:54' prior: 50650991!
test08				
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:40:09' prior: 50650995!
test08				
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:40:13' prior: 50651003!
test08				
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@2)).! !

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:40:14'!
ERROR!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:40:21'!
movePlayerForward
	self shouldBeImplemented.! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:40:37' prior: 50651023!
movePlayerForward
	
	playerPosition := playerPosition + (0@1).! !

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:40:39'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:40:40'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:40:52'!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@2)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:41:21' prior: 50651054!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@2)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:41:48' prior: 50651063!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	
	aGame movePlayerForward.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@2)).! !

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:41:49'!
ERROR!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:41:53'!
movePlayerBackwards
	self shouldBeImplemented.! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:42:04' prior: 50651084!
movePlayerBackwards
	
	playerPosition := playerPosition + (-1, 0)! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:42:08' prior: 50651089!
movePlayerBackwards
	
	playerPosition := playerPosition + (-1@0)! !

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:42:09'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:42:14' prior: 50651072!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	
	aGame movePlayerForward.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:42:14'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:42:29' prior: 50651094!
movePlayerBackwards
	
	playerPosition := playerPosition + (0@-1)! !

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:42:32'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:42:42' prior: 50651102!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:42:47' prior: 50651143!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:42:51' prior: 50651152!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (6@1)).! !

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:42:52'!
ERROR!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:42:56'!
movePlayerRight
	self shouldBeImplemented.! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:43:14' prior: 50651172!
movePlayerRight
	
	playerPosition := playerPosition + (1@0)! !

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:43:17'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:42:14' prior: 50651161!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	
	aGame movePlayerForward.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:43:43'!
test10
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (6@1)).! !

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:43:44'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:43:46'!
test11
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (6@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:43:52' prior: 50651249!
test11
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (6@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:43:55' prior: 50651258!
test11
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:43:57' prior: 50651267!
test11
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).! !

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:43:57'!
ERROR!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:44:00'!
movePlayerLeft
	self shouldBeImplemented.! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:44:12' prior: 50651287!
movePlayerLeft
	
	playerPosition := playerPosition + (-1@0)! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:44:13'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:44:21'!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:44:32' prior: 50651322!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (4@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:44:35' prior: 50651331!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:44:36'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:44:56' prior: 50651114!
movePlayerBackwards
	
	
		
	playerPosition := playerPosition + (0@-1)! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:45:18' prior: 50651351!
movePlayerBackwards
	
	
	(playerPosition y = 0) ifFalse:[	playerPosition := playerPosition + (0@-1)].! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:45:18'!
PASSED!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:45:18'!
FAILURE!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:45:18'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:45:30' prior: 50651356!
movePlayerBackwards
	
	
	(playerPosition y = 1) ifFalse:[	playerPosition := playerPosition + (0@-1)].! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:45:31'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:45:49' prior: 50651340!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerFoward.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:45:59' prior: 50651428!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@10)
					 withItems: {}.
					
	aGame movePlayerFoward.
	
	self assert: (aGame playerIsAt: (5@10)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:46:24' prior: 50651437!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (1@11)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:46:24' prior: 50651446!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (1@1)).! !

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:46:25'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:46:45' prior: 50651176!
movePlayerRight
	
	(playerPosition x = 1) ifFalse: [	playerPosition := playerPosition + (1@0)].! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:46:46'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:46:53'!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (1@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:46:58' prior: 50651500!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:47:05' prior: 50651509!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (10@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (10@1)).! !

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:47:05'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:47:37' prior: 50651291!
movePlayerLeft
	
	(playerPosition y = mapExtensions y) ifFalse: [	playerPosition := playerPosition + (-1@0)].! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:47:40'!
PASSED!

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:47:40'!
FAILURE!

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:47:40'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:48:06' prior: 50651518!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@10)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (10@1)).! !

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:07'!
ERROR!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:48:17' prior: 50651569!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@10)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@10)).! !

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:18'!
ERROR!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:48:22' prior: 50651580!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@10)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).! !

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:22'!
ERROR!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:48:28' prior: 50651591!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).! !

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:28'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:48:42' prior: 50651529!
movePlayerLeft
	
	(playerPosition y = 1) ifFalse: [	playerPosition := playerPosition + (-1@0)].! !

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:48:45'!
FAILURE!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:45'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:48:45'!
FAILURE!

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:48:52'!
FAILURE!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:48:52'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:48:52'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:49:01' prior: 50651276!
test11
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (6@1)).! !

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:49:06'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:49:16' prior: 50651691!
test11
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).! !

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:49:17'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:49:24' prior: 50651613!
movePlayerLeft
	
	(playerPosition x = 1) ifFalse: [	playerPosition := playerPosition + (-1@0)].! !

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:49:25'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:49:39' prior: 50651455!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (10@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (10@1)).! !

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:49:40'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 17:49:49' prior: 50651466!
movePlayerRight
	
	(playerPosition x = mapExtensions x) ifFalse: [	playerPosition := playerPosition + (1@0)].! !

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test01 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test02 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test03 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test04 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test05 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test06 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test07 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test08 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test09 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test10 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test11 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test12 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!

!testRun: #MineFieldTests #test13 stamp: 'MS 11/30/2023 17:49:52'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:50:09'!
test01_playerStartsInStartingPosition

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self assert: (aGame playerIsAt: (5@1)).! !

!methodRemoval: MineFieldTests #test01 stamp: 'MS 11/30/2023 17:50:09'!
test01

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self assert: (aGame playerIsAt: (5@1)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:50:29'!
test02_playerIsOnlyInStartingPosition

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self deny: (aGame playerIsAt: (5@2)).! !

!methodRemoval: MineFieldTests #test02 stamp: 'MS 11/30/2023 17:50:29'!
test02

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	self deny: (aGame playerIsAt: (5@2)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:50:47'!
test03_playerCanOnlyStartInFistRow

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@2)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !

!methodRemoval: MineFieldTests #test03 stamp: 'MS 11/30/2023 17:50:47'!
test03

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@2)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:50:53'!
test03_playerCanOnlyStartInFirstRow

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@2)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !

!methodRemoval: MineFieldTests #test03_playerCanOnlyStartInFistRow stamp: 'MS 11/30/2023 17:50:53'!
test03_playerCanOnlyStartInFistRow

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@2)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:51:08'!
test04_startingPositionMustBePositive

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (-5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !

!methodRemoval: MineFieldTests #test04 stamp: 'MS 11/30/2023 17:51:08'!
test04

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (-5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:51:24'!
test05_mapExtensionsShouldBeAtLeast2

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	! !

!methodRemoval: MineFieldTests #test05 stamp: 'MS 11/30/2023 17:51:24'!
test05

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:51:29'!
test05_mapExtensionsShouldBeAtLeast2x2

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	! !

!methodRemoval: MineFieldTests #test05_mapExtensionsShouldBeAtLeast2 stamp: 'MS 11/30/2023 17:51:29'!
test05_mapExtensionsShouldBeAtLeast2

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:51:40'!
test06_startingPositionShouldBeAnInteger

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !

!methodRemoval: MineFieldTests #test06 stamp: 'MS 11/30/2023 17:51:40'!
test06

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:51:54'!
test07_mapExtensionsShouldBeIntegers

	self 
		should: [MineField withExtensions: (100/3@10)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	! !

!methodRemoval: MineFieldTests #test07 stamp: 'MS 11/30/2023 17:51:54'!
test07

	self 
		should: [MineField withExtensions: (100/3@10)
					 startingIn: (5@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:52:00'!
test06_startingPositionShouldBeIntegers

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !

!methodRemoval: MineFieldTests #test06_startingPositionShouldBeAnInteger stamp: 'MS 11/30/2023 17:52:00'!
test06_startingPositionShouldBeAnInteger

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {}.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:52:12'!
test08_playerCanCorrectlyMoveForward				
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@2)).! !

!methodRemoval: MineFieldTests #test08 stamp: 'MS 11/30/2023 17:52:12'!
test08				
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@2)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:52:23'!
test09_playerCanCorrectlyMoveBackwards
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	
	aGame movePlayerForward.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !

!methodRemoval: MineFieldTests #test09 stamp: 'MS 11/30/2023 17:52:23'!
test09
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
	
	aGame movePlayerForward.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:52:32'!
test10_playerCanCorrectlyMoveRight
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (6@1)).! !

!methodRemoval: MineFieldTests #test10 stamp: 'MS 11/30/2023 17:52:32'!
test10
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (6@1)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:52:46'!
test11_playerCanCorrectlyMoveLeft
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).! !

!methodRemoval: MineFieldTests #test11 stamp: 'MS 11/30/2023 17:52:46'!
test11
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:53:00'!
test12_playerCannotMoveRightOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (10@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (10@1)).! !

!methodRemoval: MineFieldTests #test12 stamp: 'MS 11/30/2023 17:53:00'!
test12
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (10@1)
					 withItems: {}.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (10@1)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:53:45'!
test13_playerCannotMoveLeftOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).! !

!methodRemoval: MineFieldTests #test13 stamp: 'MS 11/30/2023 17:53:45'!
test13
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:54:03'!
test14_playerCannotMoveBackwardsOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:54:08' prior: 50652102!
test14_playerCannotMoveBackwardsOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (1@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:54:13' prior: 50652112!
test14_playerCannotMoveBackwardsOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 17:54:14'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 17:54:14'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:54:36'!
test15_
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !

Object subclass: #MineField
	instanceVariableNames: 'position arrayOfItems mapExtensions startingPosition items playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:54:48'!
Object subclass: #MineField
	instanceVariableNames: 'position arrayOfItems mapExtensions startingPosition items playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

Object subclass: #MineField
	instanceVariableNames: 'arrayOfItems mapExtensions startingPosition items playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 17:55:28'!
Object subclass: #MineField
	instanceVariableNames: 'arrayOfItems mapExtensions startingPosition items playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 17:55:42' prior: 50650733!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !

----SNAPSHOT----(30 November 2023 17:56:14) CuisUniversity-5981.image priorSource: 10197292!

----SNAPSHOT----(30 November 2023 17:56:22) CuisUniversity-5981.image priorSource: 10258800!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 17:59:48' prior: 50652182!
test15_
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:00:01'!
test15_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:00:30' prior: 50652254!
test15_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerHasHP: 10).! !

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:00:33'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 18:00:39'!
playerHasHP: aRenameMe1 
	self shouldBeImplemented.! !
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 18:00:44' prior: 50652276!
playerHasHP: aRenameMe1 
	
	^true! !
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 18:00:50' prior: 50652281!
playerHasHP: aHPValue 
	
	^true! !

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test15_ stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:00:53'!
PASSED!

!methodRemoval: MineFieldTests #test15_ stamp: 'MS 11/30/2023 18:01:01'!
test15_
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:01:05'!
test16_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerHasHP: 10).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:01:09' prior: 50652352!
test16_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerHasHP: 15).! !

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:01:10'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:01:10'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:02:10' prior: 50652362!
test16_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {}.
					
	aGame movePlayerBackwards.
	
	self deny: (aGame playerHasHP: 15).! !
!MineField class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 18:03:27'!
withExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue  

	^self new initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems ! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652084!
test13_playerCannotMoveLeftOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651973!
test06_startingPositionShouldBeIntegers

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {} withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652122!
test14_playerCannotMoveBackwardsOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652427!
test16_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	aGame movePlayerBackwards.
	
	self deny: (aGame playerHasHP: 15).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651953!
test07_mapExtensionsShouldBeIntegers

	self 
		should: [MineField withExtensions: (100/3@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651873!
test04_startingPositionMustBePositive

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (-5@1)
					 withItems: {} withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652264!
test15_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerHasHP: 10).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652049!
test11_playerCanCorrectlyMoveLeft
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651800!
test01_playerStartsInStartingPosition

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652032!
test10_playerCanCorrectlyMoveRight
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (6@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652066!
test12_playerCannotMoveRightOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (10@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (10@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651995!
test08_playerCanCorrectlyMoveForward				
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@2)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50652013!
test09_playerCanCorrectlyMoveBackwards
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
	
	aGame movePlayerForward.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651852!
test03_playerCanOnlyStartInFirstRow

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@2)
					 withItems: {} withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651816!
test02_playerIsOnlyInStartingPosition

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
					
	self deny: (aGame playerIsAt: (5@2)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:03:27' prior: 50651912!
test05_mapExtensionsShouldBeAtLeast2x2

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {} withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	! !

!methodRemoval: MineField class #withExtensions:startingIn:withItems: stamp: 'MS 11/30/2023 18:03:27'!
withExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 

	^self new initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:03:31' prior: 50652482!
test16_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerBackwards.
	
	self deny: (aGame playerHasHP: 15).! !

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:03:32'!
FAILURE!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:04:07'!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	items := anArrayOfItems.
	
	playerPosition := startingPosition.! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:04:07' prior: 50652436!
withExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue  

	^self new initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue ! !

!methodRemoval: MineField #initializeWithExtensions:startingIn:withItems: stamp: 'MS 11/30/2023 18:04:07'!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems 
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	items := anArrayOfItems.
	
	playerPosition := startingPosition.!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 18:04:25'!
Object subclass: #MineField
	instanceVariableNames: 'arrayOfItems mapExtensions startingPosition items playerPosition currentHP'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:04:22' prior: 50652650!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	items := anArrayOfItems.
	
	playerPosition := startingPosition.
	
	currentHP := startingHP.! !
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 18:04:41' prior: 50652285!
playerHasHP: aHPValue 
	
	^currentHP = aHPValue ! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:04:42'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:04:42'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:04:59'!
test17_
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerBackwards.
	
	self deny: (aGame playerHasHP: 15).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:05:06' prior: 50652517!
test15_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
				
	
	self assert: (aGame playerHasHP: 10).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:05:15' prior: 50652637!
test16_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} 
					 withStartingHealthPoints: 10.
	
	self deny: (aGame playerHasHP: 15).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:05:19' prior: 50652794!
test15_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10.
				
	self assert: (aGame playerHasHP: 10).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:05:25' prior: 50652784!
test17_
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} 
					 withStartingHealthPoints: 10.
	
	self deny: (aGame playerHasHP: 15).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:06:01' prior: 50652824!
test17_
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} 
					 withStartingHealthPoints: 10.
	
	self deny: (aGame playerHasHP: 15).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:06:04' prior: 50652833!
test17_
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} 
					 withStartingHealthPoints: 10.
					
	
	
	self deny: (aGame playerHasHP: 15).! !

!classDefinition: #LittleBomb category: 'MineField' stamp: 'MS 11/30/2023 18:08:39'!
Object subclass: #LittleBomb
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:08:31' prior: 50652842!
test17_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: MineField itemOutOfBoundsErrorMessage.
	
					
	
	! !
!MineField class methodsFor: 'nil' stamp: 'MS 11/30/2023 18:09:10'!
itemOutOfBoundsErrorMessage

	^'Item position is out of map bounds!!'! !
!LittleBomb class methodsFor: 'nil' stamp: 'MS 11/30/2023 18:10:06'!
inPosition: aPosition
	
	^self new initializeInPosition: aPosition! !

!classDefinition: #LittleBomb category: 'MineField' stamp: 'MS 11/30/2023 18:10:21'!
Object subclass: #LittleBomb
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!LittleBomb methodsFor: 'nil' stamp: 'MS 11/30/2023 18:10:18'!
initializeInPosition: aPosition

	position := aPosition ! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:11:41' prior: 50652707!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class itemOutOfBoundsErrorMessage.].
	items := anArrayOfItems.
	
	playerPosition := startingPosition.
	
	currentHP := startingHP.! !
!MineField methodsFor: 'nil' stamp: 'MS 11/30/2023 18:12:24'!
assertValidItems: anArrayOfItems

	^anArrayOfItems allSatisfy: [:anItem | anItem isInInterval: mapExtensions.].! !
!LittleBomb methodsFor: 'nil' stamp: 'MS 11/30/2023 18:13:43'!
isInInterval: anInterval

	^(position x <= anInterval x) and: [(position y <= anInterval y)] and: [(1 <= position x)] and: [(1 <= position y)]
 
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:13:43'!
PASSED!

!testRun: #MineFieldTests #test17_ stamp: 'MS 11/30/2023 18:13:43'!
ERROR!

!testRun: #MineFieldTests #test17_ stamp: 'MS 11/30/2023 18:13:43'!
ERROR!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:14:19' prior: 50652858!
test17_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
	
					
	
	! !

!testRun: #MineFieldTests #test17_ stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:14:20'!
PASSED!

!testRun: #MineFieldTests #test17_ stamp: 'MS 11/30/2023 18:14:20'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:14:36'!
test17_cannotHaveItemOutOfBounds
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
	
					
	
	! !

!methodRemoval: MineFieldTests #test17_ stamp: 'MS 11/30/2023 18:14:36'!
test17_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
	
					
	
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:16:31' prior: 50653053!
test17_cannotHaveItemOutOfBounds
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
			
	
					
	
	! !

!testRun: #MineFieldTests #test17_cannotHaveItemOutOfBounds stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:16:32'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveItemOutOfBounds stamp: 'MS 11/30/2023 18:16:32'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:16:49'!
test17_cannotHaveLittleBombOutOfBounds
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
			
	
					
	
	! !

!methodRemoval: MineFieldTests #test17_cannotHaveItemOutOfBounds stamp: 'MS 11/30/2023 18:16:49'!
test17_cannotHaveItemOutOfBounds
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
			
	
					
	
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:17:12'!
test18_littleBombCorrectlyReducesPlayersHP
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
			
	
					
	
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:18:23' prior: 50653174!
test18_littleBombCorrectlyReducesPlayersHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 9).					
	
	! !

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:18:24'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:18:46' prior: 50651028!
movePlayerForward
	
	
	
	playerPosition := playerPosition + (0@1).! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:20:00' prior: 50653207!
movePlayerForward
	
	playerPosition := playerPosition + (0@1).
	items do: [:anItem | anItem ]! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:21:07' prior: 50653212!
movePlayerForward
	
	playerPosition := playerPosition + (0@1).
	items do: [:anItem | (anItem isAt: playerPosition) ]! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:21:29' prior: 50653218!
movePlayerForward
	
	playerPosition := playerPosition + (0@1).
	items do: [:anItem | (anItem isAt: playerPosition) ifTrue: [currentHP := currentHP -1.]].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:21:30'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:21:30'!
ERROR!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:21:30'!
ERROR!
!LittleBomb methodsFor: 'nil' stamp: 'MS 11/30/2023 18:21:46'!
isAt: aPosition
	
	^position = aPosition ! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:21:47'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:21:47'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:22:51'!
test19_littleBomb
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 9).					
	
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:23:05' prior: 50653149!
test17_cannotHaveLittleBombOutOfBounds
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:23:29'!
test19_littleBombPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:23:37' prior: 50653386!
test19_littleBombPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField itemOutOfBoundsErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:23:51' prior: 50653399!
test19_littleBombPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !

!methodRemoval: MineFieldTests #test19_littleBomb stamp: 'MS 11/30/2023 18:23:59'!
test19_littleBomb
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 9).					
	
	!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:24:05' prior: 50653374!
test17_cannotHaveLittleBombOutOfBounds
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineField class methodsFor: 'nil' stamp: 'MS 11/30/2023 18:24:10'!
invalidItemPositionErrorMessage! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:24:21' prior: 50652869!
itemOutOfBoundsErrorMessage

	! !

!methodRemoval: MineField class #itemOutOfBoundsErrorMessage stamp: 'MS 11/30/2023 18:24:23'!
itemOutOfBoundsErrorMessage

	!
!MineField class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:24:47' prior: 50653452!
invalidItemPositionErrorMessage
	
	^'Item position should be composed of integers and in map bounds!!'! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:25:06' prior: 50652891!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage .].
	items := anArrayOfItems.
	
	playerPosition := startingPosition.
	
	currentHP := startingHP.! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:25:09' prior: 50653473!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	playerPosition := startingPosition.
	
	currentHP := startingHP.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:25:09'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:25:09'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:25:17'!
test20_littleBombPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:25:51'!
test20_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:25:55'!
test21_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !

!classDefinition: #LightArmor category: 'MineField' stamp: 'MS 11/30/2023 18:26:07'!
Object subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:26:00' prior: 50653608!
test21_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:26:16' prior: 50653628!
test21_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !

!testRun: #MineFieldTests #test21_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:26:23'!
ERROR!
!LightArmor class methodsFor: 'nil' stamp: 'MS 11/30/2023 18:26:38'!
inPosition: aPosition
	
	^self new initializeInPosition: aPosition! !

!classDefinition: #LightArmor category: 'MineField' stamp: 'MS 11/30/2023 18:27:00'!
Object subclass: #LightArmor
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!LightArmor methodsFor: 'nil' stamp: 'MS 11/30/2023 18:26:58'!
initializeInPosition: aPosition

	position := aPosition.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test20_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:27:08'!
PASSED!

!testRun: #MineFieldTests #test21_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:27:08'!
ERROR!

!testRun: #MineFieldTests #test21_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:27:08'!
ERROR!
!LightArmor methodsFor: 'nil' stamp: 'MS 11/30/2023 18:27:34'!
isInInterval: anInterval

	^(position x <= anInterval x) and: [(position y <= anInterval y)] and: [(1 <= position x)] and: [(1 <= position y)]! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test20_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:27:34'!
PASSED!

!testRun: #MineFieldTests #test21_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:27:34'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:27:57'!
test22_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:28:06' prior: 50653831!
test22_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:28:07' prior: 50653844!
test22_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:28:08' prior: 50653857!
test22_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !

!testRun: #MineFieldTests #test22_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test20_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test21_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:28:09'!
PASSED!

!methodRemoval: MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:28:34'!
test20_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			!

!methodRemoval: MineFieldTests #test20_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:28:41'!
test20_littleBombPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:28:49'!
test20_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !

!methodRemoval: MineFieldTests #test21_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:28:49'!
test21_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:28:53'!
test21_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !

!methodRemoval: MineFieldTests #test22_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:28:53'!
test22_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:29:10'!
test22_lightArmorCorrectlyProtectsPlayer

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:29:29' prior: 50654041!
test22_lightArmorCorrectlyProtectsPlayer

	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).
		self assert: (aGame playerHasHP: 9).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:29:32' prior: 50654054!
test22_lightArmorCorrectlyProtectsPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).
		self assert: (aGame playerHasHP: 9).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:29:38' prior: 50654070!
test22_lightArmorCorrectlyProtectsPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).
		self assert: (aGame playerHasHP: 9).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:30:30'!
test22_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).
		self assert: (aGame playerHasHP: 9).					! !

!methodRemoval: MineFieldTests #test22_lightArmorCorrectlyProtectsPlayer stamp: 'MS 11/30/2023 18:30:33'!
test22_lightArmorCorrectlyProtectsPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).
		self assert: (aGame playerHasHP: 9).					!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:30:40' prior: 50654102!
test22_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:31:02' prior: 50654135!
test22_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:31:10' prior: 50654152!
test22_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:31:20' prior: 50654170!
test22_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:31:51' prior: 50654187!
test22_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:32:47'!
playerHasLightArmor

	^true! !

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:32:57'!
ERROR!

----SNAPSHOT----(30 November 2023 18:33:03) CuisUniversity-5981.image priorSource: 10258894!
!LightArmor methodsFor: 'nil' stamp: 'MS 11/30/2023 18:33:18'!
isAt: aPosition
	
	^position = aPosition ! !

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:33:22'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:33:22'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:34:01' prior: 50653225!
movePlayerForward
	
	playerPosition := playerPosition + (0@1).
	items do: [:anItem | (anItem isAt: playerPosition) ifTrue: [(self playerHasLightArmor ) ifFalse: [currentHP := currentHP -1.]]].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:34:02'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:34:02'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:34:02'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:34:08' prior: 50653187!
test18_littleBombCorrectlyReducesPlayersHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 10).					
	
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:34:14' prior: 50654331!
test18_littleBombCorrectlyReducesPlayersHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 9).					
	
	! !

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:34:15'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:35:06' prior: 50654244!
movePlayerForward
	
	playerPosition := playerPosition + (0@1).
	items do: [:anItem | (anItem isAt: playerPosition) 
		ifTrue: [(self playerHasLightArmor ) ifFalse: [currentHP := currentHP -1.]]].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:35:07'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:35:07'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:35:07'!
FAILURE!

Object subclass: #Player
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Player category: 'MineField' stamp: 'MS 11/30/2023 18:35:17'!
Object subclass: #Player
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 18:36:41'!
Object subclass: #MineField
	instanceVariableNames: 'arrayOfItems mapExtensions startingPosition items playerPosition currentHP player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:36:39' prior: 50653496!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := Player in: aPosition withHP: startingHP.
	
	playerPosition := startingPosition.
	
	currentHP := startingHP.! !
!Player class methodsFor: 'no messages' stamp: 'MS 11/30/2023 18:37:11'!
in: startingPosition with: startingHP! !
!Player class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:37:26' prior: 50654498!
in: startingPosition with: startingHP

	^self new initializeIn: startingPosition with: startingHP.! !

!classDefinition: #Player category: 'MineField' stamp: 'MS 11/30/2023 18:37:51'!
Object subclass: #Player
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Player methodsFor: 'nil' stamp: 'MS 11/30/2023 18:37:48'!
initializeIn: startingPosition with: startingHP.

	position := startingPosition .
	HP := startingHP ! !

!classDefinition: #Player category: 'MineField' stamp: 'MS 11/30/2023 18:37:58'!
Object subclass: #Player
	instanceVariableNames: 'position currentHP'
	classVariableNames: 'HP'
	poolDictionaries: ''
	category: 'MineField'!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:37:56' prior: 50654515!
initializeIn: startingPosition with: startingHP.

	position := startingPosition .
	currentHP := startingHP ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:38:34' prior: 50651393!
movePlayerBackwards
	
	^ player moveBackwards
	"(playerPosition y = 1) ifFalse:[	playerPosition := playerPosition + (0@-1)]."! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:38:35'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:38:35'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:38:35'!
ERROR!
!Player methodsFor: 'nil' stamp: 'MS 11/30/2023 18:39:02'!
moveBackwards

	position := position + (0@-1)! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:39:09'!
moveFrowards

	position := position + (0@1)! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:39:13'!
moveLeft

	position := position + (0@1)! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:39:20' prior: 50654623!
moveLeft

	position := position + (-1@0)! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:39:26'!
moveRight

	position := position + (1@0)! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:39:52' prior: 50654535!
movePlayerBackwards
	
	player moveBackwards
	"(playerPosition y = 1) ifFalse:[	playerPosition := playerPosition + (0@-1)]."! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:40:05' prior: 50654367!
movePlayerForward
	
	player moveForward
	items do: [:anItem | (anItem isAt: playerPosition) 
		ifTrue: [(self playerHasLightArmor ) ifFalse: [currentHP := currentHP -1.]]].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:40:07' prior: 50654643!
movePlayerForward
	
	player moveForward.
	items do: [:anItem | (anItem isAt: playerPosition) 
		ifTrue: [(self playerHasLightArmor ) ifFalse: [currentHP := currentHP -1.]]].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:40:20' prior: 50651713!
movePlayerLeft
	
	(playerPosition x = 1) ifFalse: [player moveLeft].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:40:27' prior: 50651761!
movePlayerRight
	
	(playerPosition x = mapExtensions x) ifFalse: [player moveRight].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:40:39' prior: 50654652!
movePlayerForward
	
	player moveFrowards .
	items do: [:anItem | (anItem isAt: playerPosition) 
		ifTrue: [(self playerHasLightArmor ) ifFalse: [currentHP := currentHP -1.]]].! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:40:46'!
moveForwards

	position := position + (0@1)! !
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:40:46' prior: 50654672!
movePlayerForward
	
	player moveForwards .
	items do: [:anItem | (anItem isAt: playerPosition) 
		ifTrue: [(self playerHasLightArmor ) ifFalse: [currentHP := currentHP -1.]]].! !

!methodRemoval: Player #moveFrowards stamp: 'MS 11/30/2023 18:40:46'!
moveFrowards

	position := position + (0@1)!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:41:04' prior: 50654636!
movePlayerBackwards
	
	(playerPosition y = 1) ifFalse:[player moveBackwards].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:41:30' prior: 50654661!
movePlayerLeft
	
	(player isInXAxis: 1) ifFalse: [player moveLeft].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:41:57' prior: 50654666!
movePlayerRight
	
	(player isInXAxis: mapExtensions x) ifFalse: [player moveRight].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:42:11' prior: 50654697!
movePlayerBackwards
	
	(player isInYAxis: 1) ifFalse:[player moveBackwards].! !
!Player methodsFor: 'nil' stamp: 'MS 11/30/2023 18:42:27'!
isInXAxis: anAxis

	^position x = anAxis x! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:42:35'!
isInYAxis: anAxis

	^position y = anAxis ! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:42:38' prior: 50654719!
isInXAxis: anAxis

	^position x = anAxis ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:42:56' prior: 50654685!
movePlayerForward
	
	player moveForwards .
	"items do: [:anItem | (anItem isAt: playerPosition) 
		ifTrue: [(self playerHasLightArmor ) ifFalse: [currentHP := currentHP -1.]]]."! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:43:06' prior: 50654222!
playerHasLightArmor

	^player hasLightArmor! !
!Player methodsFor: 'nil' stamp: 'MS 11/30/2023 18:43:21'!
hasLightArmor 

	^true! !
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 18:43:48' prior: 50652727!
playerHasHP: aHPValue 
	
	^player hasHP: aHPValue ! !
!Player methodsFor: 'nil' stamp: 'MS 11/30/2023 18:44:02'!
hasHP: aHPValue 
	
	^ currentHP = aHPValue ! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:44:05'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:44:05'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:44:05'!
ERROR!
!MineField methodsFor: 'testing' stamp: 'MS 11/30/2023 18:44:31' prior: 50650491!
playerIsAt: aPosition 
	
	^player isAt: aPosition.! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:44:50' prior: 50654473!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	startingPosition := aPosition.
	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := Player in: aPosition withHP: startingHP.
	! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:44:55' prior: 50654836!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	
	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := Player in: aPosition withHP: startingHP.
	! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:44:58' prior: 50654859!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].

	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := Player in: aPosition withHP: startingHP.
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:44:59'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:44:59'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:44:59'!
ERROR!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 18:45:12' prior: 50654881!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].

	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := Player at: aPosition withHP: startingHP.
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:45:14'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:45:14'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:45:14'!
ERROR!
!Player class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:45:24'!
at: startingPosition withHP: startingHP

	^self new initializeIn: startingPosition with: startingHP.! !

!methodRemoval: Player class #in:with: stamp: 'MS 11/30/2023 18:45:24'!
in: startingPosition with: startingHP

	^self new initializeIn: startingPosition with: startingHP.!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:45:38'!
initializeAt: startingPosition withHP: startingHP.

	position := startingPosition .
	currentHP := startingHP ! !
!Player class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:45:38' prior: 50655071!
at: startingPosition withHP: startingHP

	^self new initializeAt: startingPosition withHP: startingHP.! !

!methodRemoval: Player #initializeIn:with: stamp: 'MS 11/30/2023 18:45:38'!
initializeIn: startingPosition with: startingHP.

	position := startingPosition .
	currentHP := startingHP !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:45:41'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:45:41'!
PASSED!

Object subclass: #MineField
	instanceVariableNames: 'arrayOfItems mapExtensions  items player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 18:45:58'!
Object subclass: #MineField
	instanceVariableNames: 'arrayOfItems mapExtensions items player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:46:00'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:46:00'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:46:12'!
ERROR!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:46:12'!
ERROR!
!Player methodsFor: 'nil' stamp: 'MS 11/30/2023 18:46:36'!
isAt: aPosition

	^position = aPosition ! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:46:39'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:46:39'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:46:39'!
FAILURE!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:46:44'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:46:44'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:46:44'!
FAILURE!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:47:17'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:47:17'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:47:17'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:48:23' prior: 50654732!
movePlayerForward
	
	player moveForwards .
	items do: [:anItem | (anItem affect: player)].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 18:48:59' prior: 50655504!
movePlayerForward
	
	player moveForwards .
	items do: [:anItem | (anItem affect: player)].! !
!LittleBomb methodsFor: 'nil' stamp: 'MS 11/30/2023 18:49:34'!
affect: aPlayer

	^ aPlayer affectedByLightBomb.! !
!Player methodsFor: 'nil' stamp: 'MS 11/30/2023 18:49:55'!
affectedByLightBomb

	currentHP := currentHP - 1. ! !
!LittleBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:50:41' prior: 50655515!
affect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLightBomb].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:50:42'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:50:42'!
ERROR!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:50:42'!
ERROR!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:50:50'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:50:50'!
ERROR!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:50:50'!
ERROR!
!LightArmor methodsFor: 'nil' stamp: 'MS 11/30/2023 18:51:23'!
affect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLightBomb].! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:51:39'!
affectedByLittleBomb

	currentHP := currentHP - 1. ! !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:51:39' prior: 50655684!
affect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLittleBomb].! !
!LittleBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:51:39' prior: 50655524!
affect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLittleBomb].! !

!methodRemoval: Player #affectedByLightBomb stamp: 'MS 11/30/2023 18:51:39'!
affectedByLightBomb

	currentHP := currentHP - 1. !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:51:45' prior: 50655694!
affect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLightArmor].! !

!classDefinition: #Player category: 'MineField' stamp: 'MS 11/30/2023 18:52:11'!
Object subclass: #Player
	instanceVariableNames: 'position currentHP armored'
	classVariableNames: 'HP'
	poolDictionaries: ''
	category: 'MineField'!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:52:10'!
affectedByLightArmor

	armored := true! !
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:52:29' prior: 50655689!
affectedByLittleBomb

	(armored) ifFalse: [currentHP := currentHP - 1.]! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:52:32'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:52:32'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:52:32'!
ERROR!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:52:42'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:52:42'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:52:42'!
ERROR!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:53:08' prior: 50655082!
initializeAt: startingPosition withHP: startingHP.

	position := startingPosition .
	currentHP := startingHP .
	armored := true.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:53:12'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:53:12'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:53:12'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:53:20' prior: 50654347!
test18_littleBombCorrectlyReducesPlayersHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 10).					
	
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:53:26'!
PASSED!

Object subclass: #MapItems
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MapItems category: 'MineField' stamp: 'MS 11/30/2023 18:53:53'!
Object subclass: #MapItems
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #LittleBomb
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #LittleBomb category: 'MineField' stamp: 'MS 11/30/2023 18:54:03'!
MapItems subclass: #LittleBomb
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #LightArmor
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #LightArmor category: 'MineField' stamp: 'MS 11/30/2023 18:54:06'!
MapItems subclass: #LightArmor
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #LittleBomb category: 'MineField' stamp: 'MS 11/30/2023 18:54:32'!
MapItems subclass: #LittleBomb
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #LightArmor category: 'MineField' stamp: 'MS 11/30/2023 18:54:32'!
MapItems subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #MapItems category: 'MineField' stamp: 'MS 11/30/2023 18:54:32'!
Object subclass: #MapItems
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:54:58'!
initializeInPosition: aPosition

	position := aPosition.! !

!methodRemoval: LightArmor #initializeInPosition: stamp: 'MS 11/30/2023 18:54:58'!
initializeInPosition: aPosition

	position := aPosition.!
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:55:02'!
isAt: aPosition
	
	^position = aPosition ! !

!methodRemoval: LightArmor #isAt: stamp: 'MS 11/30/2023 18:55:02'!
isAt: aPosition
	
	^position = aPosition !
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:55:09'!
isInInterval: anInterval

	^(position x <= anInterval x) and: [(position y <= anInterval y)] and: [(1 <= position x)] and: [(1 <= position y)]! !

!methodRemoval: LightArmor #isInInterval: stamp: 'MS 11/30/2023 18:55:09'!
isInInterval: anInterval

	^(position x <= anInterval x) and: [(position y <= anInterval y)] and: [(1 <= position x)] and: [(1 <= position y)]!

!methodRemoval: LittleBomb #initializeInPosition: stamp: 'MS 11/30/2023 18:55:24'!
initializeInPosition: aPosition

	position := aPosition !

!methodRemoval: LittleBomb #isAt: stamp: 'MS 11/30/2023 18:55:26'!
isAt: aPosition
	
	^position = aPosition !

!methodRemoval: LittleBomb #isInInterval: stamp: 'MS 11/30/2023 18:55:32'!
isInInterval: anInterval

	^(position x <= anInterval x) and: [(position y <= anInterval y)] and: [(1 <= position x)] and: [(1 <= position y)]
 
	!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:55:50'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:55:50'!
PASSED!
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:56:38'!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLightArmor].! !
!LittleBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:56:38'!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLittleBomb].! !
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:56:38' prior: 50655510!
movePlayerForward
	
	player moveForwards .
	items do: [:anItem | (anItem checkAndAffect: player)].! !

!methodRemoval: LightArmor #affect: stamp: 'MS 11/30/2023 18:56:38'!
affect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLightArmor].!

!methodRemoval: LittleBomb #affect: stamp: 'MS 11/30/2023 18:56:38'!
affect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLittleBomb].!
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:57:21' prior: 50656236!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [self affectOn: aPlayer].! !
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:57:27'!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [self affectOn: aPlayer].! !

!methodRemoval: LightArmor #checkAndAffect: stamp: 'MS 11/30/2023 18:57:27'!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [self affectOn: aPlayer].!
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:57:35' prior: 50656270!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLittleBomb].! !

!methodRemoval: LittleBomb #checkAndAffect: stamp: 'MS 11/30/2023 18:57:35'!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [aPlayer affectedByLittleBomb].!
!MapItems methodsFor: 'nil' stamp: 'MS 11/30/2023 18:57:43'!
affectOn: aPlayer! !
!LittleBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:58:05' overrides: 50656292!
affectOn: aPlayer! !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:58:05' overrides: 50656292!
affectOn: aPlayer! !
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:58:05' prior: 50656292!
affectOn: aPlayer

	self subclassResponsibility! !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:58:14' prior: 50656300 overrides: 50656304!
affectOn: aPlayer

	aPlayer affectedByLittleBomb ! !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:58:16' prior: 50656310 overrides: 50656304!
affectOn: aPlayer

	aPlayer affectedByLittleBomb.! !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:58:20' prior: 50656316 overrides: 50656304!
affectOn: aPlayer

	aPlayer affectedByLightArmor.! !
!LittleBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 18:58:43' prior: 50656296 overrides: 50656304!
affectOn: aPlayer

	aPlayer affectedByLittleBomb.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:58:43'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:58:43'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:59:04'!
test23_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:59:42' prior: 50656406!
test23_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		
		self assert: (aGame playerHasHP: 10).					
		self assert: (aGame playerHasLightArmor).					! !

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 18:59:43'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 18:59:43'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 18:59:49' prior: 50656425!
test23_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 18:59:49'!
FAILURE!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:00:16' prior: 50655728!
affectedByLittleBomb

	(armored) 
		ifTrue: [armored := armored not]
		ifFalse: [currentHP := currentHP - 1.]! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:00:19'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:00:19'!
FAILURE!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:00:19'!
FAILURE!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:00:30' prior: 50654745!
hasLightArmor 

	^armored! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:00:35'!
FAILURE!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:00:35'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:00:35'!
FAILURE!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:00:56'!
FAILURE!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:00:56'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:00:56'!
FAILURE!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:01:42' prior: 50655888!
initializeAt: startingPosition withHP: startingHP.

	position := startingPosition .
	currentHP := startingHP .
	armored := false.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:01:45'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:01:45'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:01:45'!
FAILURE!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:01:45'!
FAILURE!
!Player methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:02:05' prior: 50656546!
affectedByLittleBomb

	(armored) 
		ifTrue: [armored := armored not.]
		ifFalse: [currentHP := currentHP - 1.]! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:02:19'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:02:19'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:02:19'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:02:19'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:02:20'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:02:20'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:02:20'!
FAILURE!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:02:20'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:02:27' prior: 50655973!
test18_littleBombCorrectlyReducesPlayersHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 9).					
	
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:02:55'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:02:55'!
FAILURE!

!testRun: #MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:02:55'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:03:26'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:04:17'!
test24_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:04:20' prior: 50657067!
test24_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:04:33'!
test22_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		! !

!methodRemoval: MineFieldTests #test24_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:04:33'!
test24_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:04:37'!
test23_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !

!methodRemoval: MineFieldTests #test22_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:04:37'!
test22_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:04:41'!
test24_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !

!methodRemoval: MineFieldTests #test23_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:04:41'!
test23_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:04:44'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:04:44'!
FAILURE!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:04:44'!
FAILURE!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:04:44'!
FAILURE!

----SNAPSHOT----(30 November 2023 19:04:50) CuisUniversity-5981.image priorSource: 10322520!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:05:05' prior: 50657102!
test22_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		! !

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:05:05'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:06:14'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:06:14'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:06:50'!
FAILURE!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:07:16'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:07:26'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:07:27'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:07:27'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:07:52' prior: 50657293!
test22_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).					
		self assert: (aGame playerHasLightArmor).					
		! !

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:07:53'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:07:56'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:07:56'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 19:08:30' prior: 50656248!
movePlayerForward
	
	player moveForwards.
	items do: [:anItem | (anItem checkAndAffect: player)].! !

aPlayer isAt: position!
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:10:22' prior: 50656281!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [self affectOn: aPlayer].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:10:25'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:10:25'!
FAILURE!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:10:25'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:11:07' prior: 50657172!
test24_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (6@5) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !

aPlayer isAt: position!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:12:02' prior: 50657459!
test24_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:12:08' prior: 50657134!
test23_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:12:14'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:12:14'!
PASSED!
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:15:15'!
affectPlayer: aPlayer

	self subclassResponsibility! !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:15:15' overrides: 50657595!
affectPlayer: aPlayer

	aPlayer affectedByLightArmor.! !
!LittleBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:15:15' overrides: 50657595!
affectPlayer: aPlayer

	aPlayer affectedByLittleBomb.! !
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:15:15' prior: 50657369!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [self affectPlayer: aPlayer].! !

!methodRemoval: MapItems #affectOn: stamp: 'MS 11/30/2023 19:15:15'!
affectOn: aPlayer

	self subclassResponsibility!

!methodRemoval: LightArmor #affectOn: stamp: 'MS 11/30/2023 19:15:15'!
affectOn: aPlayer

	aPlayer affectedByLightArmor.!

!methodRemoval: LittleBomb #affectOn: stamp: 'MS 11/30/2023 19:15:15'!
affectOn: aPlayer

	aPlayer affectedByLittleBomb.!

----SNAPSHOT----(30 November 2023 19:17:59) CuisUniversity-5981.image priorSource: 10420431!

----SNAPSHOT----(30 November 2023 19:18:01) CuisUniversity-5981.image priorSource: 10431240!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:20:26'!
test25_

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:22:31' prior: 50657633!
test25_

	"A partir de ahora, para heavyArmor & BigBomb no voy a hacer los tests en los que se chequea que se  los pueda poner de forma valida en el juego. Esto es debido a que ahora 
	 forman parte de la misma subclasificacio y por lo tanto heredan todos los chequeos necesarios. Si tuviera todo el tiempo del mundo los haria."
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:23:45' prior: 50657650!
test25_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo lo necesario."
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:24:05' prior: 50657677!
test25_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear too"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:24:20' prior: 50657700!
test25_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.! !

!classDefinition: #BigBomb category: 'MineField' stamp: 'MS 11/30/2023 19:24:55'!
MapItems subclass: #BigBomb
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:24:48' prior: 50657722!
test25_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.! !

!testRun: #MineFieldTests #test25_ stamp: 'MS 11/30/2023 19:24:57'!
ERROR!
!MapItems class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:25:12'!
inPosition: aPosition
	
	^self new initializeInPosition: aPosition! !

!methodRemoval: LittleBomb class #inPosition: stamp: 'MS 11/30/2023 19:25:12'!
inPosition: aPosition
	
	^self new initializeInPosition: aPosition!

!methodRemoval: LightArmor class #inPosition: stamp: 'MS 11/30/2023 19:25:25'!
inPosition: aPosition
	
	^self new initializeInPosition: aPosition!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:25:29'!
PASSED!

!testRun: #MineFieldTests #test25_ stamp: 'MS 11/30/2023 19:25:29'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:26:05'!
test25_bigBombCannotHaveInvalidPosition

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.! !

!methodRemoval: MineFieldTests #test25_ stamp: 'MS 11/30/2023 19:26:05'!
test25_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:26:15'!
test26_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:26:18' prior: 50657919!
test26_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:26:28' prior: 50657944!
test26_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:26:38' prior: 50657953!
test26_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:27:09' prior: 50657976!
test26_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:28:01' prior: 50657998!
test26_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !

!testRun: #MineFieldTests #test26_ stamp: 'MS 11/30/2023 19:28:01'!
ERROR!
!BigBomb methodsFor: 'nil' stamp: 'MS 11/30/2023 19:28:24' overrides: 50657595!
affectPlayer: aPlayer

	aPlayer affectedByBigBomb.! !
!Player methodsFor: 'items' stamp: 'MS 11/30/2023 19:28:37'!
affectedByBigBomb

	currentHP := currentHP - 2! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:28:41'!
PASSED!

!testRun: #MineFieldTests #test26_ stamp: 'MS 11/30/2023 19:28:41'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:29:08'!
test26_bigBombDecreasesPlayersHPBy2

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !

!methodRemoval: MineFieldTests #test26_ stamp: 'MS 11/30/2023 19:29:08'!
test26_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:29:19'!
test27_

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:29:33' prior: 50658136!
test26_bigBombDecreasesPlayersHPBy2

	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:29:41' prior: 50658173!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:29:58' prior: 50658207!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4).} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:30:33' prior: 50658221!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4).} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:30:51' prior: 50658236!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4).} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:30:55' prior: 50658252!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:33:05' prior: 50658267!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5) + self randomPosition).! !
!MineField class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 19:33:52'!
withExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue withRandomPositionGenerator: aRandomPositionGenerator   

	^self new initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue ! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652539!
test01_playerStartsInStartingPosition

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652606!
test02_playerIsOnlyInStartingPosition

	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	self deny: (aGame playerIsAt: (5@2)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50653440!
test17_cannotHaveLittleBombOutOfBounds
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (-5@-5)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652594!
test03_playerCanOnlyStartInFirstRow

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@2)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50653412!
test19_littleBombPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5/3@10/7)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652493!
test07_mapExtensionsShouldBeIntegers

	self 
		should: [MineField withExtensions: (100/3@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage..
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652582!
test09_playerCanCorrectlyMoveBackwards
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
	
	aGame movePlayerForward.
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652804!
test16_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
	
	self deny: (aGame playerHasHP: 15).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652549!
test10_playerCanCorrectlyMoveRight
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (6@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652560!
test12_playerCannotMoveRightOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (10@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	aGame movePlayerRight.
	
	self assert: (aGame playerIsAt: (10@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652814!
test15_playerHasCorrectHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
				
	self assert: (aGame playerHasHP: 10).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652446!
test13_playerCannotMoveLeftOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (1@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (1@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50658281!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5) + self randomPosition).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50653989!
test20_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652505!
test04_startingPositionMustBePositive

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (-5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50657496!
test23_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50654015!
test21_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50657335!
test22_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).					
		self assert: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652616!
test05_mapExtensionsShouldBeAtLeast2x2

	self 
		should: [MineField withExtensions: (1@1)
					 startingIn: (1@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidMapExtensionsErrorMessage.
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50656970!
test18_littleBombCorrectlyReducesPlayersHP
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LittleBomb inPosition: (5@5)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	aGame movePlayerForward. 
	aGame movePlayerForward		.
	aGame movePlayerForward.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@5)).
	self assert: (aGame playerHasHP: 9).					
	
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50657478!
test24_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652571!
test08_playerCanCorrectlyMoveForward				
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
	aGame movePlayerForward.
	
	self assert: (aGame playerIsAt: (5@2)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50658192!
test26_bigBombDecreasesPlayersHPBy2

	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 8).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652457!
test06_startingPositionShouldBeIntegers

	self 
		should: [MineField withExtensions: (10@10)
					 startingIn: (1/7@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood 
		withMessageText: MineField invalidStartingPositionErrorMessage .
					
	! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50657869!
test25_bigBombCannotHaveInvalidPosition

	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {BigBomb inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652528!
test11_playerCanCorrectlyMoveLeft
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	aGame movePlayerLeft.
	
	self assert: (aGame playerIsAt: (4@1)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:33:52' prior: 50652470!
test14_playerCannotMoveBackwardsOutOfBounds
	
	| aGame |
	
	aGame := MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {} withStartingHealthPoints: 10 withRandomPositionGenerator: self.
					
	aGame movePlayerBackwards.
	
	self assert: (aGame playerIsAt: (5@1)).! !

!methodRemoval: MineField class #withExtensions:startingIn:withItems:withStartingHealthPoints: stamp: 'MS 11/30/2023 19:33:52'!
withExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue  

	^self new initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:33:55' prior: 50658457!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5) + self randomPosition).! !
!MineFieldTests methodsFor: 'nil' stamp: 'MS 11/30/2023 19:34:30'!
randomPosition

	^ (1@2)! !

!classRenamed: #Player as: #MineFieldPlayer stamp: 'MS 11/30/2023 19:34:58'!
Smalltalk renameClassNamed: #Player as: #MineFieldPlayer!
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:34:58' prior: 50654976!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].

	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	! !

!testRun: #MineFieldTests #test27_ stamp: 'MS 11/30/2023 19:35:18'!
FAILURE!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:36:17' prior: 50658045!
affectedByBigBomb

	currentHP := currentHP - 2.
	position := position "+randomPosition".! !
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:37:06'!
checkAndAffect: aPlayer withRandomPosition: aRandomPosition 

	(aPlayer isAt: position) ifTrue: [self affectPlayer: aPlayer].! !
!MineField methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:37:06' prior: 50657362!
movePlayerForward
	
	player moveForwards.
	items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPosition)].! !

!methodRemoval: MapItems #checkAndAffect: stamp: 'MS 11/30/2023 19:37:06'!
checkAndAffect: aPlayer

	(aPlayer isAt: position) ifTrue: [self affectPlayer: aPlayer].!

!classDefinition: #MineField category: 'MineField' stamp: 'MS 11/30/2023 19:37:33'!
Object subclass: #MineField
	instanceVariableNames: 'arrayOfItems mapExtensions items player randomPositionGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 19:37:32' prior: 50658774!
movePlayerForward
	
	player moveForwards.
	items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)].! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 19:38:11' prior: 50658795!
movePlayerForward
	
	player moveForwards.
	items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]. "acordarse de mover esto a todos los move con el TDD!!!!"! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 19:39:03'!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP andRandomPositionGenerator: aRandomPositionGenerator   
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].

	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	! !
!MineField class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:39:03' prior: 50658295!
withExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue withRandomPositionGenerator: aRandomPositionGenerator   

	^self new initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: HPValue andRandomPositionGenerator: aRandomPositionGenerator ! !

!methodRemoval: MineField #initializeWithExtensions:startingIn:withItems:withStartingHealthPoints: stamp: 'MS 11/30/2023 19:39:03'!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP  
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].

	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 19:39:33' prior: 50658813!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP andRandomPositionGenerator: aRandomPositionGenerator   
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	
	mapExtensions := mapDimensions.
	items := anArrayOfItems.
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	randomPositionGenerator := aRandomPositionGenerator 
	! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 19:39:35' prior: 50658875!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP andRandomPositionGenerator: aRandomPositionGenerator   
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	
	mapExtensions := mapDimensions.
	items := anArrayOfItems.
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	randomPositionGenerator := aRandomPositionGenerator.
	! !
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:40:26'!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	self subclassResponsibility! !
!BigBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:40:27' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByBigBomb.! !
!LightArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:40:27' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByLightArmor.! !
!LittleBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:40:27' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByLittleBomb.! !
!MapItems methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:40:27' prior: 50658767!
checkAndAffect: aPlayer withRandomPosition: aRandomPosition 

	(aPlayer isAt: position) ifTrue: [self affectPlayer: aPlayer andRandomPosition: aRandomPosition].! !

!methodRemoval: MapItems #affectPlayer: stamp: 'MS 11/30/2023 19:40:27'!
affectPlayer: aPlayer

	self subclassResponsibility!

!methodRemoval: BigBomb #affectPlayer: stamp: 'MS 11/30/2023 19:40:27'!
affectPlayer: aPlayer

	aPlayer affectedByBigBomb.!

!methodRemoval: LightArmor #affectPlayer: stamp: 'MS 11/30/2023 19:40:27'!
affectPlayer: aPlayer

	aPlayer affectedByLightArmor.!

!methodRemoval: LittleBomb #affectPlayer: stamp: 'MS 11/30/2023 19:40:27'!
affectPlayer: aPlayer

	aPlayer affectedByLittleBomb.!
!BigBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:40:42' prior: 50658931 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByBigBomb.! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:40:56'!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	position := position "+randomPosition".! !
!BigBomb methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:40:56' prior: 50658974 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByBigBomb: aRandomPosition.! !

!methodRemoval: MineFieldPlayer #affectedByBigBomb stamp: 'MS 11/30/2023 19:40:56'!
affectedByBigBomb

	currentHP := currentHP - 2.
	position := position "+randomPosition".!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:41:19' prior: 50658979!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	position := position + aRandomPosition.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:41:23'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:41:23'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:41:23'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:41:23'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test27_ stamp: 'MS 11/30/2023 19:41:23'!
ERROR!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:41:31'!
ERROR!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:41:31'!
ERROR!
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 19:42:25' prior: 50658900!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP andRandomPositionGenerator: aRandomPositionGenerator   
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	
	
	items := anArrayOfItems.
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	randomPositionGenerator := aRandomPositionGenerator.
	! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 19:42:36' prior: 50659100!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP andRandomPositionGenerator: aRandomPositionGenerator   
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	randomPositionGenerator := aRandomPositionGenerator.
	! !
!MineField methodsFor: 'initialization' stamp: 'MS 11/30/2023 19:42:37' prior: 50659126!
initializeWithExtensions: mapDimensions startingIn: aPosition withItems: anArrayOfItems withStartingHealthPoints: startingHP andRandomPositionGenerator: aRandomPositionGenerator   
	
	
	(self assertValidMapDimensions: mapDimensions) ifFalse: [self error: self class invalidMapExtensionsErrorMessage ].
	mapExtensions := mapDimensions.
	
	(self assertValidStartingPosition: aPosition) ifFalse: [self error: self class invalidStartingPositionErrorMessage].
	player := MineFieldPlayer at: aPosition withHP: startingHP.
	
	(self assertValidItems: anArrayOfItems) ifFalse: [self error: self class invalidItemPositionErrorMessage.].
	items := anArrayOfItems.
	
	randomPositionGenerator := aRandomPositionGenerator.
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:42:38'!
PASSED!

!testRun: #MineFieldTests #test27_ stamp: 'MS 11/30/2023 19:42:38'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:42:56'!
test27_BigBombMovesPlayer
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5) + self randomPosition).! !

!methodRemoval: MineFieldTests #test27_ stamp: 'MS 11/30/2023 19:42:56'!
test27_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5) + self randomPosition).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:45:34'!
test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5) + self randomPosition).! !

----SNAPSHOT----(30 November 2023 19:45:37) CuisUniversity-5981.image priorSource: 10431334!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:46:05' prior: 50659298!
test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5) + self randomPosition).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:46:19' prior: 50659319!
test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (6@6)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:46:26' prior: 50658727!
randomPosition

	^ (3@3)! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:46:26'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:46:26'!
FAILURE!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:46:26'!
FAILURE!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:46:51' prior: 50658998!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(armored) 
		ifTrue: []
		ifFalse: [	position := position + aRandomPosition].! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:47:25' prior: 50659458!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(armored) 
		ifTrue: [position := position + (aRandomPosition x//2)@(aRandomPosition y//2)]
		ifFalse: [	position := position + aRandomPosition].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:47:29'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:47:29'!
ERROR!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:47:29'!
ERROR!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:47:46' prior: 50659466!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(armored) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2))]
		ifFalse: [	position := position + aRandomPosition].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:47:50'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:47:50'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:47:57'!
test29_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (6@6)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:48:03'!
test29_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (6@6)).! !

!methodRemoval: MineFieldTests #test29_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:48:21'!
test29_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (6@6)).!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:49:10' prior: 50659695!
test29_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor ).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:49:25'!
test29_LightArmorWearsOffAfterSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor ).! !

!methodRemoval: MineFieldTests #test29_ stamp: 'MS 11/30/2023 19:49:25'!
test29_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor ).!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:49:28'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:49:28'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:49:41' prior: 50659746!
test29_LightArmorWearsOffAfterSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self deny: (aGame playerHasLightArmor ).! !

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:49:42'!
FAILURE!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:50:09' prior: 50659574!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(armored) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armored := false]
		ifFalse: [	position := position + aRandomPosition].! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:50:13'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:50:13'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:50:41'!
test30_heavyArmorCannotHaveInvalidPosition
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self deny: (aGame playerHasLightArmor ).! !

!classDefinition: #HeavyArmor category: 'MineField' stamp: 'MS 11/30/2023 19:51:08'!
MapItems subclass: #HeavyArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:51:00' prior: 50660010!
test30_heavyArmorCannotHaveInvalidPosition
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {HeavyArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {HeavyArmor inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.! !

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:51:10'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:51:11'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:51:11'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:51:25'!
test31_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {HeavyArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {HeavyArmor inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:51:42' prior: 50660167!
test31_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self deny: (aGame playerHasLightArmor ).! !

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:51:42'!
PASSED!

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:51:42'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:51:48' prior: 50660195!
test31_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self deny: (aGame playerHasHeavyArmor ).! !

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:51:49'!
ERROR!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 19:51:53'!
playerHasHeavyArmor
	self shouldBeImplemented.! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 19:52:05' prior: 50660350!
playerHasHeavyArmor
	
	^player hasHeavyArmor! !

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:52:07'!
ERROR!
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 19:52:24'!
hasHeavyArmor
	self shouldBeImplemented.! !
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 19:52:32' prior: 50660363!
hasHeavyArmor
	
	^true! !

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:52:33'!
FAILURE!

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:52:36'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:52:50' prior: 50660325!
test31_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		
		self deny: (aGame playerHasHeavyArmor ).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:53:05' prior: 50660379!
test31_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self deny: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:53:09' prior: 50660399!
test31_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:53:10'!
ERROR!
!HeavyArmor methodsFor: 'nil' stamp: 'MS 11/30/2023 19:53:32' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByHeavyArmor: aRandomPosition.! !
!MineFieldPlayer methodsFor: 'nil' stamp: 'MS 11/30/2023 19:53:51'!
affectedByHeavyArmor: aRandomPosition

	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:53:54'!
PASSED!

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:53:54'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:54:20' prior: 50658536!
test22_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).					
		self assert: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:55:01'!
test22_1_playerIsNotArmoredInNewGame

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
	
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).					
		self assert: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:55:14' prior: 50660576!
test22_1_playerIsNotArmoredInNewGame

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.

		self deny: (aGame playerHasLightArmor).					
		! !

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:55:15'!
PASSED!

!testRun: #MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:55:15'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:55:29'!
test31_playerDoesNotStartWithHeavyArmor
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:55:36' prior: 50660717!
test31_playerDoesNotStartWithHeavyArmor
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:55:45' prior: 50660738!
test31_playerDoesNotStartWithHeavyArmor
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.

		self deny: (aGame playerHasHeavyArmor ).
		
		! !

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 19:55:45'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:55:56'!
test32_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !

!methodRemoval: MineFieldTests #test31_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:55:56'!
test31_heavyArmorCanBeGrabbedByPlayer
	
	"Para heavyArmor & bigBomb unifico los tests que chequean su correcta inicializacion porque al introducirlos heredan todo lo necesario para chequear todo"
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:56:11'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 19:56:14'!
FAILURE!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 19:56:14'!
FAILURE!
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 19:56:25' prior: 50660368!
hasHeavyArmor
	
	^armored! !

!classDefinition: #MineFieldPlayer category: 'MineField' stamp: 'MS 11/30/2023 19:56:30'!
Object subclass: #MineFieldPlayer
	instanceVariableNames: 'position currentHP armor'
	classVariableNames: 'HP'
	poolDictionaries: ''
	category: 'MineField'!
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:56:30' prior: 50660821!
hasHeavyArmor
	
	^armor! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:56:30' prior: 50659902!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(armor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := false]
		ifFalse: [	position := position + aRandomPosition].! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:56:30' prior: 50655723!
affectedByLightArmor

	armor := true! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:56:30' prior: 50656886!
affectedByLittleBomb

	(armor) 
		ifTrue: [armor := armor not.]
		ifFalse: [currentHP := currentHP - 1.]! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:56:30' prior: 50656634!
hasLightArmor 

	^armor! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:56:30' prior: 50656801!
initializeAt: startingPosition withHP: startingHP.

	position := startingPosition .
	currentHP := startingHP .
	armor := false.! !
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 19:56:35' prior: 50660833!
hasHeavyArmor
	
	^armor = #heavyArmor! !
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 19:56:43' prior: 50660860!
hasLightArmor 

	^armor = #lightArmor! !
!MineFieldPlayer methodsFor: 'initialization' stamp: 'MS 11/30/2023 19:56:57' prior: 50660864!
initializeAt: startingPosition withHP: startingHP.

	position := startingPosition .
	currentHP := startingHP .
	armor := #noArmor.! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:57:27' prior: 50660837!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := false]
		ifFalse: [	position := position + aRandomPosition].! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:57:37' prior: 50660853!
affectedByLittleBomb

	(self hasLightArmor ) 
		ifTrue: [armor := armor not.]
		ifFalse: [currentHP := currentHP - 1.]! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:57:44' prior: 50660848!
affectedByLightArmor

	armor := #lightArmot! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:57:45' prior: 50660906!
affectedByLightArmor

	armor := #lightArmo! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:57:46' prior: 50660911!
affectedByLightArmor

	armor := #lightArmor! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:57:49'!
ERROR!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:57:49'!
ERROR!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 19:57:49'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:57:49'!
FAILURE!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:58:02' prior: 50660888!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 19:58:18' prior: 50660899!
affectedByLittleBomb

	(self hasLightArmor ) 
		ifTrue: [armor := #noArmor.]
		ifFalse: [currentHP := currentHP - 1.]! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 19:58:21'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:58:21'!
FAILURE!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:58:21'!
FAILURE!
!HeavyArmor methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:58:58' prior: 50660444 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByHeavyArmor.! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:59:05'!
affectedByHeavyArmor

	! !

!methodRemoval: MineFieldPlayer #affectedByHeavyArmor: stamp: 'MS 11/30/2023 19:59:05'!
affectedByHeavyArmor: aRandomPosition

	!
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 19:59:11' prior: 50661172!
affectedByHeavyArmor

	armor := #heavyArmor
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 19:59:14'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 19:59:14'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:59:22' prior: 50660770!
test32_heavyArmorCanBeGrabbedByPlayer
	

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:59:23' prior: 50661297!
test32_heavyArmorCanBeGrabbedByPlayer
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:59:30'!
test33_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 19:59:58'!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:00:17' prior: 50661342!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:00:26' prior: 50661358!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:00:56' prior: 50661375!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor )
		
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:00:58' prior: 50661392!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		
		
		
		! !

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test33_ stamp: 'MS 11/30/2023 20:00:59'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:00:59'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:01:15' prior: 50661410!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasHeavyArmor).		
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:01:27' prior: 50661549!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		
	
		
		! !

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test33_ stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:01:28'!
PASSED!

!methodRemoval: MineFieldTests #test33_ stamp: 'MS 11/30/2023 20:01:35'!
test33_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.

		self assert: (aGame playerHasHeavyArmor ).
		
		!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:01:46'!
test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:01:53' prior: 50661722!
test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		! !

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:01:54'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:01:54'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:02:08' prior: 50661740!
test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5) .  LittleBomb inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		
	
		
		! !

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:02:10'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:02:10'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:03:02' prior: 50661884!
test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5) .  LittleBomb inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward. " <- pisa primer bomba"
		
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerForward.
		
		self deny: (aGame playerHasHeavyArmor).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:03:10' prior: 50662029!
test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5) .  LittleBomb inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward. " <- pisa primer bomba"
		
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerForward. " <- pisa segunda bomba"
		
		self deny: (aGame playerHasHeavyArmor).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:03:29' prior: 50661570!
test33_heavyArmorProtectsAgainstLittleBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:03:42' prior: 50662052!
test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5) .  LittleBomb inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward. " <- pisa primer bomba"
		
		self assert: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		aGame movePlayerForward. " <- pisa segunda bomba"
		
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:03:51' prior: 50662094!
test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5) .  LittleBomb inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward. " <- pisa primer bomba"
		
		self assert: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		aGame movePlayerForward. " <- pisa segunda bomba, se le va la armadura pero no pierde vida"
		
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		
		
	
		
		! !

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:03:52'!
FAILURE!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:04:26' prior: 50661032!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].
		
	(self hasHeavyArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:04:40' prior: 50662151!
affectedByBigBomb: aRandomPosition

	currentHP := currentHP - 2.
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].
! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:05:29' prior: 50661043!
affectedByLittleBomb

	(self hasLightArmor ) 
		ifTrue: [armor := #noArmor.]
		ifFalse: [currentHP := currentHP - 1.].
		
	(self hasHeavyArmor) 
		ifTrue: [armor := #unUsoDeHeavyArmor]
		! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:05:46' prior: 50661181!
affectedByHeavyArmor

	armor := #dosUsosheavyArmor
	! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:05:49' prior: 50662188!
affectedByHeavyArmor

	armor := #dosUsosDeHeavyArmor
	! !
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 20:06:25' prior: 50660871!
hasHeavyArmor
	
	^(armor = #unUsoDeHeavyArmor) or: [(armor = #dosUsosDeHeavyArmor)]! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:06:27'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:06:27'!
FAILURE!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:06:27'!
FAILURE!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:07:43' prior: 50662179!
affectedByLittleBomb

	(self hasLightArmor ) 
		ifTrue: [armor := #noArmor.]
		ifFalse: [currentHP := currentHP - 1.].
		
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor] ifFalse: [armor := #unUsoDeHeavyArmor]]
		! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:07:46'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:07:46'!
FAILURE!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:07:46'!
FAILURE!

self playerHasHeavyArmor!

self hasHeavyArmor!

self playerHasHeavyArmor !

self hasHeavyArmor !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:09:57' prior: 50662323!
affectedByLittleBomb

	(self hasLightArmor ) ifTrue: [armor := #noArmor.].

		
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor] ifFalse: [armor := #unUsoDeHeavyArmor]]
		ifFalse: [currentHP := currentHP - 1.].
		! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:10:01'!
FAILURE!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:10:01'!
FAILURE!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:10:01'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:10:01'!
PASSED!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:10:34' prior: 50662456!
affectedByLittleBomb

	(self hasLightArmor ) ifTrue: [armor := #noArmor.].
		
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor . currentHP := currentHP - 1.] ifFalse: [armor := #unUsoDeHeavyArmor]]
		ifFalse: [currentHP := currentHP - 1.].
		! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:10:38'!
FAILURE!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:10:38'!
FAILURE!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:10:38'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:10:38'!
FAILURE!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:11:32' prior: 50662586!
affectedByLittleBomb

	(self hasLightArmor ) ifTrue: [armor := #noArmor.].
		
	(self hasNoArmor) ifTrue: [currentHP := currentHP - 1.].
	
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor . currentHP := currentHP - 1.] ifFalse: [armor := #unUsoDeHeavyArmor]]
		ifFalse: [currentHP := currentHP - 1.].
		! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:11:44' prior: 50662717!
affectedByLittleBomb

	(self hasLightArmor ) ifTrue: [armor := #noArmor.].
		
	(self hasNoArmor) ifTrue: [currentHP := currentHP - 1.].
	
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor] ifFalse: [armor := #unUsoDeHeavyArmor]]
		ifFalse: [currentHP := currentHP - 1.].
		! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:11:50' prior: 50662731!
affectedByLittleBomb

	(self hasLightArmor ) ifTrue: [armor := #noArmor.].
		
	(self hasNoArmor) ifTrue: [currentHP := currentHP - 1.].
	
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor] ifFalse: [armor := #unUsoDeHeavyArmor]]
		
		! !
!MineFieldPlayer methodsFor: 'nil' stamp: 'MS 11/30/2023 20:12:05'!
hasNoArmor

	^armor = #noArmor! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:12:06' prior: 50662755!
hasNoArmor

	^armor = #noArmor! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:12:09'!
FAILURE!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:12:09'!
FAILURE!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:12:09'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:12:15'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:12:18'!
FAILURE!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:12:18'!
FAILURE!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:12:18'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:12:18'!
PASSED!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:12:50' prior: 50662744!
affectedByLittleBomb
		
	(self hasNoArmor) ifTrue: [currentHP := currentHP - 1.].
	
	(self hasLightArmor ) ifTrue: [armor := #noArmor.].
	
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor] ifFalse: [armor := #unUsoDeHeavyArmor]]
		
		! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:12:53'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:12:53'!
PASSED!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:13:33' prior: 50663006!
affectedByLittleBomb
		
	(self hasNoArmor) ifTrue: [currentHP := currentHP - 1.].
	
	(self hasLightArmor ) ifTrue: [armor := #noArmor.].
	
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor] ifFalse: [armor := #unUsoDeHeavyArmor]]
		
	"armoredState affectedByLittleBomb"
		
		! !

Object subclass: #PlayerArmorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #PlayerArmorState category: 'MineField' stamp: 'MS 11/30/2023 20:13:45'!
Object subclass: #PlayerArmorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

PlayerArmorState subclass: #PlayerArmorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

PlayerArmorState subclass: #NoArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #NoArmor category: 'MineField' stamp: 'MS 11/30/2023 20:14:00'!
PlayerArmorState subclass: #NoArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

PlayerArmorState subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #LightArmor category: 'MineField' stamp: 'MS 11/30/2023 20:14:33'!
PlayerArmorState subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classRenamed: #NoArmor as: #NoArmorState stamp: 'MS 11/30/2023 20:14:47'!
Smalltalk renameClassNamed: #NoArmor as: #NoArmorState!

!classRenamed: #LightArmor as: #LightArmorState stamp: 'MS 11/30/2023 20:14:51'!
Smalltalk renameClassNamed: #LightArmor as: #LightArmorState!
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50658500!
test23_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmorState inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50658521!
test21_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmorState inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50660559!
test22_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmorState inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).					
		self assert: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50658473!
test20_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmorState inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50660594!
test22_1_playerIsNotArmoredInNewGame

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmorState inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.

		self deny: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50659338!
test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmorState inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (6@6)).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50659881!
test29_LightArmorWearsOffAfterSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmorState inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self deny: (aGame playerHasLightArmor ).! !
!MineFieldTests methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:14:51' prior: 50658585!
test24_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmorState inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !

MapItems subclass: #LightArmor
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #LightArmor category: 'MineField' stamp: 'MS 11/30/2023 20:15:47'!
MapItems subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!LightArmor methodsFor: 'nil' stamp: 'MS 11/30/2023 20:16:00' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByLightArmor.! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:16:24' prior: 50663251!
test20_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor
					 inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:16:26' prior: 50663355!
test20_cannotHaveLightArmorOutOfBounds

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (-5 @ -4)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:16:31' prior: 50663218!
test21_lightArmorPositionShouldBeIntegers

	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {LightArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
			! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:16:37' prior: 50663266!
test22_1_playerIsNotArmoredInNewGame

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.

		self deny: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:16:41' prior: 50663233!
test22_lightArmorCanBeGrabbedByPlayer

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (5@5)).					
		self assert: (aGame playerHasLightArmor).					
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:16:47' prior: 50663197!
test23_lightArmorCorrectlyProtectsPlayerFromLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasLightArmor).					
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:16:54' prior: 50663315!
test24_lightArmorWearsOffAfterLightBomb

	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@6) . LightArmor inPosition: (5@5)} 
						 withStartingHealthPoints: 10 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHP: 10).					
		self deny: (aGame playerHasLightArmor).					! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:17:04' prior: 50663279!
test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerIsAt: (6@6)).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:17:08' prior: 50663297!
test29_LightArmorWearsOffAfterSteppingOnBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@5) . LightArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self deny: (aGame playerHasLightArmor ).! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:17:16'!
PASSED!

!methodRemoval: LightArmorState #affectPlayer:andRandomPosition: stamp: 'MS 11/30/2023 20:17:27'!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer affectedByLightArmor.!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:17:32'!
PASSED!

PlayerArmorState subclass: #NewHeavyArmorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #NewHeavyArmorState category: 'MineField' stamp: 'MS 11/30/2023 20:18:03'!
PlayerArmorState subclass: #NewHeavyArmorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

PlayerArmorState subclass: #BrokenHeavyArmorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #BrokenHeavyArmorState category: 'MineField' stamp: 'MS 11/30/2023 20:18:08'!
PlayerArmorState subclass: #BrokenHeavyArmorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:18:16'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:18:17'!
PASSED!

----SNAPSHOT----(30 November 2023 20:18:28) CuisUniversity-5981.image priorSource: 10485260!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:18:40'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:18:40'!
PASSED!
!MineFieldPlayer methodsFor: 'initialization' stamp: 'MS 11/30/2023 20:19:12' prior: 50660881!
initializeAt: startingPosition withHP: startingHP.

	position := startingPosition .
	currentHP := startingHP .
	armor := NoArmorState for: self.! !
!PlayerArmorState class methodsFor: 'nil' stamp: 'MS 11/30/2023 20:20:07'!
for: aPlayer

	^ self new initializeFor: aPlayer! !

!classDefinition: #PlayerArmorState category: 'MineField' stamp: 'MS 11/30/2023 20:20:22'!
Object subclass: #PlayerArmorState
	instanceVariableNames: 'player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!PlayerArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:20:18'!
for: aPlayer

	player := aPlayer ! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:21:30' prior: 50660916!
affectedByLightArmor

	armor grabbedLightArmor.! !
!PlayerArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:21:46'!
grabbedLightArmor

	! !
!NoArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:21:51' overrides: 50664037!
grabbedLightArmor

	! !
!LightArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:21:51' overrides: 50664037!
grabbedLightArmor

	! !
!NewHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:21:51' overrides: 50664037!
grabbedLightArmor

	! !
!BrokenHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:21:51' overrides: 50664037!
grabbedLightArmor

	! !
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:21:51' prior: 50664037!
grabbedLightArmor

	self subclassResponsibility! !
!BrokenHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:22:14' prior: 50664055 overrides: 50664059!
grabbedLightArmor

	player has: LightArmorState.! !
!MineFieldPlayer methodsFor: 'nil' stamp: 'MS 11/30/2023 20:22:34'!
has: anArmorState

	armor := anArmorState for: self! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:22:35' prior: 50664069!
has: anArmorState

	armor := anArmorState for: self.! !
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:23:02' prior: 50664059!
grabbedLightArmor

	player has: LightArmorState.! !

!methodRemoval: BrokenHeavyArmorState #grabbedLightArmor stamp: 'MS 11/30/2023 20:23:02'!
grabbedLightArmor

	player has: LightArmorState.!
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:23:17'!
grabbedHeavyArmor

	player has: NewHeavyArmorState.! !
!PlayerArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:24:02'!
hasHeavyArmor

	! !
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:08'!
hasLightArmorArmor

	! !
!NoArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:15' overrides: 50664092!
hasHeavyArmor

	! !
!LightArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:15' overrides: 50664092!
hasHeavyArmor

	! !
!NewHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:15' overrides: 50664092!
hasHeavyArmor

	! !
!BrokenHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:15' overrides: 50664092!
hasHeavyArmor

	! !
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:15' prior: 50664092!
hasHeavyArmor

	self subclassResponsibility! !
!NoArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:19' overrides: 50664096!
hasLightArmorArmor

	! !
!LightArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:19' overrides: 50664096!
hasLightArmorArmor

	! !
!NewHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:19' overrides: 50664096!
hasLightArmorArmor

	! !
!BrokenHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:19' overrides: 50664096!
hasLightArmorArmor

	! !
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:19' prior: 50664096!
hasLightArmorArmor

	self subclassResponsibility! !
!BrokenHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:26' prior: 50664113 overrides: 50664117!
hasHeavyArmor

	^true! !
!BrokenHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:29' prior: 50664137 overrides: 50664141!
hasLightArmorArmor

	^false! !
!LightArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:35' prior: 50664104 overrides: 50664117!
hasHeavyArmor

	^false! !
!LightArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:39' prior: 50664127 overrides: 50664141!
hasLightArmorArmor

	^true! !
!NewHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:43' prior: 50664108 overrides: 50664117!
hasHeavyArmor

	^true! !
!NewHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:49' prior: 50664132 overrides: 50664141!
hasLightArmorArmor

	^false! !
!NoArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:24:57' prior: 50664122 overrides: 50664141!
hasLightArmorArmor

	^false! !
!NoArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:25:00' prior: 50664100 overrides: 50664117!
hasHeavyArmor

	^false! !
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:25:15'!
hasLightArmor

	self subclassResponsibility! !
!BrokenHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:25:15' overrides: 50664186!
hasLightArmor

	^false! !
!LightArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:25:15' overrides: 50664186!
hasLightArmor

	^true! !
!NewHeavyArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:25:15' overrides: 50664186!
hasLightArmor

	^false! !
!NoArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:25:15' overrides: 50664186!
hasLightArmor

	^false! !

!methodRemoval: PlayerArmorState #hasLightArmorArmor stamp: 'MS 11/30/2023 20:25:15'!
hasLightArmorArmor

	self subclassResponsibility!

!methodRemoval: BrokenHeavyArmorState #hasLightArmorArmor stamp: 'MS 11/30/2023 20:25:15'!
hasLightArmorArmor

	^false!

!methodRemoval: LightArmorState #hasLightArmorArmor stamp: 'MS 11/30/2023 20:25:15'!
hasLightArmorArmor

	^true!

!methodRemoval: NewHeavyArmorState #hasLightArmorArmor stamp: 'MS 11/30/2023 20:25:15'!
hasLightArmorArmor

	^false!

!methodRemoval: NoArmorState #hasLightArmorArmor stamp: 'MS 11/30/2023 20:25:15'!
hasLightArmorArmor

	^false!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:25:37'!
ERROR!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:25:37'!
ERROR!
!PlayerArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:26:25'!
initializeFor: aPlayer

	player := aPlayer ! !

!methodRemoval: PlayerArmorState #for: stamp: 'MS 11/30/2023 20:26:25'!
for: aPlayer

	player := aPlayer !

!methodRemoval: LightArmorState #grabbedLightArmor stamp: 'MS 11/30/2023 20:26:49'!
grabbedLightArmor

	!

!methodRemoval: NewHeavyArmorState #grabbedLightArmor stamp: 'MS 11/30/2023 20:26:52'!
grabbedLightArmor

	!

!methodRemoval: NoArmorState #grabbedLightArmor stamp: 'MS 11/30/2023 20:26:55'!
grabbedLightArmor

	!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:27:03'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:27:04'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:27:05'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:27:05'!
FAILURE!

armor hasLightArmor !

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:27:45'!
FAILURE!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:27:45'!
FAILURE!
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 20:28:20' prior: 50660876!
hasLightArmor 

	^ armor hasLightArmor ! !
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 20:28:26' prior: 50662198!
hasHeavyArmor
	
	^ armor hasLightArmor ! !
!MineFieldPlayer methodsFor: 'testing' stamp: 'MS 11/30/2023 20:28:30' prior: 50664278!
hasHeavyArmor
	
	^ armor hasHeavyArmor ! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:28:38'!
FAILURE!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:28:38'!
ERROR!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:28:38'!
ERROR!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:28:38'!
ERROR!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:28:38'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:28:38'!
ERROR!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:28:38'!
ERROR!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:28:38'!
ERROR!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:29:07' prior: 50663137!
affectedByLittleBomb
		
	"(self hasNoArmor) ifTrue: [currentHP := currentHP - 1.].
	
	(self hasLightArmor ) ifTrue: [armor := #noArmor.].
	
	(self hasHeavyArmor) 
		ifTrue: [(armor = #unUsoDeHeavyArmor) ifTrue: [armor := #noArmor] ifFalse: [armor := #unUsoDeHeavyArmor]]
	"	
	armor affectedByLittleBomb
		
		! !
!PlayerArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:29:40'!
affectedByLittleBomb! !
!PlayerArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:09' prior: 50664418!
affectedByLittleBomb

! !
!NoArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:14' overrides: 50664422!
affectedByLittleBomb

! !
!LightArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:14' overrides: 50664422!
affectedByLittleBomb

! !
!NewHeavyArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:14' overrides: 50664422!
affectedByLittleBomb

! !
!BrokenHeavyArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:14' overrides: 50664422!
affectedByLittleBomb

! !
!PlayerArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:14' prior: 50664422!
affectedByLittleBomb

	self subclassResponsibility! !
!BrokenHeavyArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:29' prior: 50664438 overrides: 50664442!
affectedByLittleBomb

	player has: NoArmorState .! !
!LightArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:41' prior: 50664430 overrides: 50664442!
affectedByLittleBomb

	player has: NoArmorState ! !
!NewHeavyArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:30:52' prior: 50664434 overrides: 50664442!
affectedByLittleBomb

	player has: BrokenHeavyArmorState ! !
!NoArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:31:25' prior: 50664426 overrides: 50664442!
affectedByLittleBomb

	player steppedOnLittleBombWithoutAmor.! !
!MineFieldPlayer methodsFor: 'nil' stamp: 'MS 11/30/2023 20:31:59'!
steppedOnLittleBombWithoutAmor

	currentHP := currentHP - 1.! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:33:09' prior: 50662193!
affectedByHeavyArmor

	armor grabbedHeavyArmor 
	! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:33:31'!
steppedOnBigBombWithoutArmor

	^ currentHP := currentHP - 2! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:33:31' prior: 50662168!
affectedByBigBomb: aRandomPosition

	self steppedOnBigBombWithoutArmor.
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].
! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:33:36' prior: 50664484!
affectedByBigBomb: aRandomPosition

	
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].
! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:33:37' prior: 50664495!
affectedByBigBomb: aRandomPosition

	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].
! !
!PlayerArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:34:10'!
affectedByBigBomb: aRandomPosition

	self subclassResponsibility! !
!BrokenHeavyArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:34:19' overrides: 50664515!
affectedByBigBomb: aRandomPosition

	! !
!LightArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:34:25' overrides: 50664515!
affectedByBigBomb: aRandomPosition! !
!NewHeavyArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:34:31' overrides: 50664515!
affectedByBigBomb: aRandomPosition! !
!NoArmorState methodsFor: 'nil' stamp: 'MS 11/30/2023 20:34:34' overrides: 50664515!
affectedByBigBomb: aRandomPosition! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:35:04'!
FAILURE!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:35:04'!
ERROR!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:35:04'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:35:17'!
FAILURE!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:35:17'!
FAILURE!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:35:22'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:35:23'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:35:24'!
ERROR!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:35:24'!
ERROR!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:35:36'!
PASSED!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:36:01' prior: 50664505!
affectedByBigBomb: aRandomPosition

	self steppedOnBigBombWithoutArmor .
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . armor := #noArmor]
		ifFalse: [	position := position + aRandomPosition].
! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:36:03'!
ERROR!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:36:03'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:36:03'!
ERROR!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:36:48' prior: 50664683!
affectedByBigBomb: aRandomPosition

	self steppedOnBigBombWithoutArmor .
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . self has: 	NoArmorState ]
		ifFalse: [	position := position + aRandomPosition].
! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:36:54'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:36:54'!
PASSED!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:37:00' prior: 50664406!
affectedByLittleBomb
		
	armor affectedByLittleBomb
		
		! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:37:15' prior: 50664817!
affectedByBigBomb: aRandomPosition

	self steppedOnBigBombWithoutArmor.
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . self has: 	NoArmorState ]
		ifFalse: [	position := position + aRandomPosition].
! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:37:46' prior: 50664953!
affectedByBigBomb: aRandomPosition

	"self steppedOnBigBombWithoutArmor.
	(self hasLightArmor) 
		ifTrue: [position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2)) . self has: 	NoArmorState ]
		ifFalse: [	position := position + aRandomPosition]."
		
	armor affectedByBigBomb: aRandomPosition 
! !
!NoArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:38:03' prior: 50664535 overrides: 50664515!
affectedByBigBomb: aRandomPosition

	player steppedOnBigBombWithoutArmor ! !
!NewHeavyArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:38:18' prior: 50664531 overrides: 50664515!
affectedByBigBomb: aRandomPosition

	player has: BrokenHeavyArmorState ! !
!LightArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:38:34' prior: 50664526 overrides: 50664515!
affectedByBigBomb: aRandomPosition

	player has: NoArmorState ! !
!BrokenHeavyArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:38:50' prior: 50664521 overrides: 50664515!
affectedByBigBomb: aRandomPosition

	player has: NoArmorState ! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:39:34' prior: 50664479!
steppedOnBigBombWithoutArmor

	currentHP := currentHP - 2! !
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:39:35'!
steppedOnBigBombWithoutArmor: aRandomPosition

	currentHP := currentHP - 2! !
!NoArmorState methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 20:39:35' prior: 50664979 overrides: 50664515!
affectedByBigBomb: aRandomPosition

	player steppedOnBigBombWithoutArmor: aRandomPosition ! !

!methodRemoval: MineFieldPlayer #steppedOnBigBombWithoutArmor stamp: 'MS 11/30/2023 20:39:35'!
steppedOnBigBombWithoutArmor

	currentHP := currentHP - 2!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:39:54' prior: 50665007!
steppedOnBigBombWithoutArmor: aRandomPosition

	currentHP := currentHP - 2.
	position := position + aRandomPosition ! !
!LightArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:40:16' prior: 50664991 overrides: 50664515!
affectedByBigBomb: aRandomPosition

	
	player has: NoArmorState! !
!LightArmorState methodsFor: 'items' stamp: 'MS 11/30/2023 20:40:35' prior: 50665033 overrides: 50664515!
affectedByBigBomb: aRandomPosition

	player steppedOnBigBombWithLightArmor: aRandomPosition.
	player has: NoArmorState! !
!MineFieldPlayer methodsFor: 'nil' stamp: 'MS 11/30/2023 20:41:27'!
steppedOnBigBombWithLightArmor: aRandomPosition

	position := position + ((aRandomPosition x // 2)@(aRandomPosition y // 2))! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:42:04'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:42:04'!
PASSED!
!MineFieldPlayer methodsFor: 'items' stamp: 'MS 11/30/2023 20:42:18' prior: 50664965!
affectedByBigBomb: aRandomPosition

	armor affectedByBigBomb: aRandomPosition 
! !

!methodRemoval: MineFieldPlayer #hasNoArmor stamp: 'MS 11/30/2023 20:42:33'!
hasNoArmor

	^armor = #noArmor!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:43:29'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:43:41'!
test35_lastGrabbedArmorPersists
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LittleBomb inPosition: (5@5) .  LittleBomb inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward. " <- pisa primer bomba"
		
		self assert: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		aGame movePlayerForward. " <- pisa segunda bomba, se le va la armadura pero no pierde vida"
		
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:44:15' prior: 50665184!
test35_lastGrabbedArmorPersists
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LightArmor inPosition: (5@5) .  HeavyArmor inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward. " <- pisa primer bomba"
		
		self assert: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		aGame movePlayerForward. " <- pisa segunda bomba, se le va la armadura pero no pierde vida"
		
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:44:23' prior: 50665210!
test35_lastGrabbedArmorPersists
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@4) . LightArmor inPosition: (5@5) .  HeavyArmor inPosition: (5@6)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward.
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		aGame movePlayerForward.
		
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:44:58' prior: 50665236!
test35_lastGrabbedArmorPersists
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . LightArmor inPosition: (5@3) .  HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		
		
		aGame movePlayerForward		.
		
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		
		
		self assert: (aGame playerHasHP: 10).
		
		aGame movePlayerForward.
		
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:45:15' prior: 50665260!
test35_lastGrabbedArmorPersists
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . LightArmor inPosition: (5@3) .  HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		aGame movePlayerForward		.
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasLightArmor).
		
		
		aGame movePlayerForward.
		
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		
		
		self assert: (aGame playerHasHP: 10).
		
		aGame movePlayerForward.
		
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasHP: 10).
		
		
		
	
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:45:21' prior: 50665285!
test35_lastGrabbedArmorPersists
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . LightArmor inPosition: (5@3) .  HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		aGame movePlayerForward		.
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasLightArmor).
		
		
		aGame movePlayerForward.
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		
		! !

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:45:22'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 20:45:22'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:45:41'!
test36_heavyArmorProtectsAgainstBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . LightArmor inPosition: (5@3) .  HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		aGame movePlayerForward		.
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasLightArmor).
		
		
		aGame movePlayerForward.
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:45:52' prior: 50665464!
test36_heavyArmorProtectsAgainstBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {BigBomb inPosition: (5@2) . LightArmor inPosition: (5@3) .  HeavyArmor inPosition: (5@4)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		aGame movePlayerForward		.
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasLightArmor).
		
		
		aGame movePlayerForward.
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:46:09' prior: 50665489!
test36_heavyArmorProtectsAgainstBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		aGame movePlayerForward		.
		self deny: (aGame playerHasHeavyArmor).
		self assert: (aGame playerHasLightArmor).
		
		
		aGame movePlayerForward.
		self assert: (aGame playerHasHeavyArmor).
		self deny: (aGame playerHasLightArmor).
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:46:30' prior: 50665514!
test36_heavyArmorProtectsAgainstBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		
		! !

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 20:46:31'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 20:46:31'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:46:43'!
test36_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		
		! !

!methodRemoval: MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 20:46:43'!
test36_heavyArmorProtectsAgainstBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		
		!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:47:00'!
test36_heavyArmorProtectsAgainstBigBomb
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		
		! !

!methodRemoval: MineFieldTests #test36_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:47:00'!
test36_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		
		!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:47:08'!
test37_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3)} 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:47:23' prior: 50665746!
test37_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		
		self assert: (aGame playerHasHeavyArmor).
	
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:47:37' prior: 50665762!
test37_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward		.
		
		self deny: (aGame playerHasHeavyArmor).
	
		
		
		! !

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 20:47:38'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:47:38'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:47:43' prior: 50665779!
test37_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		self deny: (aGame playerHasHeavyArmor).
		aGame movePlayerForward		.
		
		self deny: (aGame playerHasHeavyArmor).
	
		
		
		! !

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:47:44'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:47:51' prior: 50665930!
test37_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		self assert: (aGame playerHasHeavyArmor).
		aGame movePlayerForward		.
		
		self deny: (aGame playerHasHeavyArmor).
	
		
		
		! !

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 20:47:52'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:47:52'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:47:55' prior: 50665953!
test37_heavyArmorProtectsAgainstTwoBigBombs
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward		.
		
		self deny: (aGame playerHasHeavyArmor).
	
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:48:59'!
test38_allPlaceableItemsDisappear
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward		.
		
		self deny: (aGame playerHasHeavyArmor).
	
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:49:35' prior: 50666122!
test38_allPlaceableItemsDisappear
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward		.
		
		self deny: (aGame playerHasHeavyArmor).
	
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:50:05' prior: 50666140!
test38_allPlaceableItemsDisappear
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward		.
		
		
	
		
		
		! !

!methodRemoval: MineFieldTests #test38_allPlaceableItemsDisappear stamp: 'MS 11/30/2023 20:50:12'!
test38_allPlaceableItemsDisappear
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward		.
		
		
	
		
		
		!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:50:38'!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {HeavyArmor inPosition: (5@2) . BigBomb inPosition: (5@3) . BigBomb inPosition: (5@4)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		aGame movePlayerForward		.
		aGame movePlayerForward		.
		
		self deny: (aGame playerHasHeavyArmor).
	
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:52:01' prior: 50666188!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb at: (5@2) . }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:52:25' prior: 50666206!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb at: (5@2) . }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		
		self assert: (aGame hasHP: 9).
		
		
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:54:25' prior: 50666221!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb at: (5@2) . LittleBomb at: (7@2) . LittleBomb at: (7@1) . LittleBomb at: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		
		self assert: (aGame hasHP: 9).
		
		
		
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:55:18' prior: 50666235!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb at: (5@2) . LittleBomb at: (7@2) . LittleBomb at: (7@1) . LittleBomb at: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasHP: 8).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHP: 7).
		
		aGame movePlayerRight.
		self assert: (aGame hasHP: 6)
		
		! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:55:19'!
ERROR!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:55:43' prior: 50666251!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LittleBomb inPosition: (7@2) . LittleBomb at: (7@1) . LittleBomb at: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasHP: 8).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHP: 7).
		
		aGame movePlayerRight.
		self assert: (aGame hasHP: 6)
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:55:48' prior: 50666277!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LittleBomb inPosition: (7@2) . LittleBomb inPosition: (7@1) . LittleBomb at: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasHP: 8).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHP: 7).
		
		aGame movePlayerRight.
		self assert: (aGame hasHP: 6)
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:55:54' prior: 50666300!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LittleBomb inPosition: (7@2) . LittleBomb inPosition: (7@1) . LittleBomb inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasHP: 8).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHP: 7).
		
		aGame movePlayerRight.
		self assert: (aGame hasHP: 6)
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:56:46' prior: 50666323!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LittleBomb inPosition: (7@2) . LittleBomb inPosition: (7@1) . LittleBomb inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHeavyArmor).
		
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor)
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:57:09' prior: 50666346!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHeavyArmor).
		
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor)
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:57:14' prior: 50666370!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame hasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHeavyArmor).
		
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor).
		
		! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:57:16'!
ERROR!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:57:27' prior: 50666394!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame hasHeavyArmor).
		
		aGame movePlayerRight.
		self assert: (aGame hasLightArmor).
		
		! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:57:28'!
ERROR!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:57:44' prior: 50666421!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:57:44'!
FAILURE!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 20:58:17' prior: 50658803!
movePlayerForward
	
	player moveForwards.
	items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]. ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 20:58:22' prior: 50654703!
movePlayerLeft
	
	(player isInXAxis: 1) ifFalse: [player moveLeft].
	items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]. ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 20:58:25' prior: 50654708!
movePlayerRight
	
	(player isInXAxis: mapExtensions x) ifFalse: [player moveRight].
	items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]. ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 20:58:30' prior: 50654714!
movePlayerBackwards
	
	(player isInYAxis: 1) ifFalse:[player moveBackwards].
	items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]. ! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:58:33'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:58:33'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:58:33'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:58:40'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:58:40'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:59:09' prior: 50666449!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:59:12'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 20:59:14'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 20:59:14'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:59:42' prior: 50666656!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@2)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:59:59' prior: 50666817!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@2)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		self assert: (aGame playerHasLightArmor).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:00:04' prior: 50666842!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@2)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		self deny: (aGame playerHasLightArmor).! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:00:05'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:00:30'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:00:31'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:00:31'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:01:00'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:01:00'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 20:59:59' prior: 50666870!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@2)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		self assert: (aGame playerHasLightArmor).! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:01:37'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:01:37'!
FAILURE!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:01:56'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:01:56'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:01:56'!
FAILURE!

----SNAPSHOT----(30 November 2023 21:02:14) CuisUniversity-5981.image priorSource: 10631598!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:04:14'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:04:14'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:04:14'!
FAILURE!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:04:14'!
FAILURE!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:05:30' prior: 50666919!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) }  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		self assert: (aGame playerHasLightArmor).! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:05:31'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:05:31'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:06:06' prior: 50667108!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@3)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		self assert: (aGame playerHasLightArmor).! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:06:25' prior: 50667271!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@3)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		aGame movePlayerForward.
		self assert: (aGame playerHasLightArmor).
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:06:30' prior: 50667299!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@3)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		aGame movePlayerForward.
		self deny: (aGame playerHasLightArmor).
		! !

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:06:31'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:06:31'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:07:17' prior: 50667328!
test38_ItemsCanBeGrabbedMovingInAllDirections
	
	"Quizas aca debria asegurarme mas rigurosamente que todos los items pueden agarrarse en todas las direcciones posibles, pero prefiero seguir con la funcionalidad."
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@3)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		aGame movePlayerForward.
		self deny: (aGame playerHasLightArmor).
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:07:21'!
test39_
	
	"Quizas aca debria asegurarme mas rigurosamente que todos los items pueden agarrarse en todas las direcciones posibles, pero prefiero seguir con la funcionalidad."
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {LittleBomb inPosition: (5@2) . LightArmor inPosition: (7@2) . HeavyArmor inPosition: (7@1) . LightArmor inPosition: (6@1) . BigBomb inPosition: (6@3)}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		aGame movePlayerForward.
		self deny: (aGame playerHasLightArmor).
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:07:26' prior: 50667526!
test39_
	
	"Quizas aca debria asegurarme mas rigurosamente que todos los items pueden agarrarse en todas las direcciones posibles, pero prefiero seguir con la funcionalidad."
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
								
		aGame movePlayerForward. 
		self assert: (aGame playerHasHP: 9).
		
		aGame movePlayerRight.
		aGame movePlayerRight.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerBackwards.
		self assert: (aGame playerHasHeavyArmor).
		
		aGame movePlayerLeft.
		self assert: (aGame playerHasLightArmor).
		
		aGame movePlayerForward.
		aGame movePlayerForward.
		self deny: (aGame playerHasLightArmor).
		! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:07:29' prior: 50667558!
test39_
	
	"Quizas aca debria asegurarme mas rigurosamente que todos los items pueden agarrarse en todas las direcciones posibles, pero prefiero seguir con la funcionalidad."
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:07:34' prior: 50667586!
test39_
	
	"Quizas aca debria asegurarme mas rigurosamente que todos los items pueden agarrarse en todas las direcciones posibles, pero prefiero seguir con la funcionalidad."
	
	| aGame |
		
	aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {}  
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:07:51' prior: 50667601!
test39_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {HeavyArmor inPosition: (5/10 @ 4/3)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {HeavyArmor inPosition: (11 @ 20)} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
	! !

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:08:59'!
MapItems subclass: #Tunnel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:08:48' prior: 50667616!
test39_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (-5@-2) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:09:16' prior: 50667645!
test39_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (-5@-2) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !

!testRun: #MineFieldTests #test39_ stamp: 'MS 11/30/2023 21:09:18'!
ERROR!
!Tunnel class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 21:09:21'!
from: aRenameMe1 to: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aRenameMe1 to: aRenameMe2 ! !
!Tunnel class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 21:09:26' prior: 50667691!
from: aRenameMe1 to: aRenameMe2 

	^self new initializeFrom: aRenameMe1 to: aRenameMe2 ! !
!Tunnel class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 21:09:33' prior: 50667700!
from: initialPosition to: aRenameMe2 

	^self new initializeFrom: initialPosition to: aRenameMe2 ! !
!Tunnel class methodsFor: 'instance creation' stamp: 'MS 11/30/2023 21:09:41' prior: 50667706!
from: initialPosition to: finalPosition 

	^self new initializeFrom: initialPosition to: finalPosition ! !

!testRun: #MineFieldTests #test39_ stamp: 'MS 11/30/2023 21:09:43'!
ERROR!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:09:51'!
MapItems subclass: #Tunnel
	instanceVariableNames: 'initialPosition_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:09:51'!
MapItems subclass: #Tunnel
	instanceVariableNames: 'initialPosition_CHANGE_ME finalPosition_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Tunnel methodsFor: 'initialization' stamp: 'MS 11/30/2023 21:09:51'!
initializeFrom: initialPosition to: finalPosition 
	self shouldBeImplemented.
	initialPosition_CHANGE_ME := initialPosition.
	finalPosition_CHANGE_ME := finalPosition.! !
!Tunnel methodsFor: 'initialization' stamp: 'MS 11/30/2023 21:09:59' prior: 50667737!
initializeFrom: initialPosition to: finalPosition 
	
	initialPosition_CHANGE_ME := initialPosition.
	finalPosition_CHANGE_ME := finalPosition.! !

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:10:03'!
MapItems subclass: #Tunnel
	instanceVariableNames: 'startPosition finalPosition_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:10:03' prior: 50667746!
initializeFrom: initialPosition to: finalPosition 
	
	startPosition := initialPosition.
	finalPosition_CHANGE_ME := finalPosition.! !
!Tunnel methodsFor: 'initialization' stamp: 'MS 11/30/2023 21:10:17' prior: 50667761!
initializeFrom: initialPosition to: finPosition 
	
	startPosition := initialPosition.
	finalPosition_CHANGE_ME := finPosition.! !

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:10:23'!
MapItems subclass: #Tunnel
	instanceVariableNames: 'startPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:10:23' prior: 50667768!
initializeFrom: initialPosition to: finPosition 
	
	startPosition := initialPosition.
	finishPosition := finPosition.! !

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:10:29'!
MapItems subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:10:29' prior: 50667783!
initializeFrom: initialPosition to: finPosition 
	
	startingPosition := initialPosition.
	finishPosition := finPosition.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:11:00'!
PASSED!

!testRun: #MineFieldTests #test39_ stamp: 'MS 11/30/2023 21:11:00'!
ERROR!

!testRun: #MineFieldTests #test39_ stamp: 'MS 11/30/2023 21:11:00'!
ERROR!

Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:12:22'!
Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:12:40'!
MapItems subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Tunnel methodsFor: 'nil' stamp: 'MS 11/30/2023 21:12:52' overrides: 50656133!
isInInterval: anInterval! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:12:53' prior: 50667967 overrides: 50656133!
isInInterval: anInterval

	! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:13:01' prior: 50667972 overrides: 50656133!
isInInterval: anInterval

	^ startingPosition x! !

Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:13:24'!
Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:14:41' prior: 50667977!
isInInterval: anInterval

	^((startingPosition x <= anInterval x) and: [(startingPosition y <= anInterval y)] and: [(1 <= startingPosition x)] and: [(1 <= startingPosition y)])
	   and: (finishPosition x <= anInterval x) and: [(finishPosition y <= anInterval y)] and: [(1 <= finishPosition x)] and: [(1 <= finishPosition y)]
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:14:59'!
PASSED!

!testRun: #MineFieldTests #test39_ stamp: 'MS 11/30/2023 21:14:59'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:15:34'!
test39_TunnelCannotHaveInvalidPositions
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (-5@-2) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !

!methodRemoval: MineFieldTests #test39_ stamp: 'MS 11/30/2023 21:15:34'!
test39_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (-5@-2) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:16:33'!
test40_TunnelPositionsHaveToBePointsOfIntegers
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (-5@-2) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:16:42' prior: 50668186!
test40_TunnelPositionsHaveToBePointsOfIntegers
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5/3@-2) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:16:46' prior: 50668210!
test40_TunnelPositionsHaveToBePointsOfIntegers
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5/3@2) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:16:51' prior: 50668234!
test40_TunnelPositionsHaveToBePointsOfIntegers
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5/3@2/3) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (-6@-3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:17:05' prior: 50668258!
test40_TunnelPositionsHaveToBePointsOfIntegers
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5/3@2/3) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (9/5@8/5).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:17:05'!
PASSED!

MapItems subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:17:56'!
MapItems subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:18:36'!
PASSED!

MapItems subclass: #TunnelEntry
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelEntry category: 'MineField' stamp: 'MS 11/30/2023 21:18:46'!
MapItems subclass: #TunnelEntry
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:18:57'!
Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #TunnelEntry
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #TunnelEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelEntry category: 'MineField' stamp: 'MS 11/30/2023 21:19:10'!
MapItems subclass: #TunnelEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #TunnelExit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelExit category: 'MineField' stamp: 'MS 11/30/2023 21:19:24'!
MapItems subclass: #TunnelExit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!methodRemoval: Tunnel #initializeFrom:to: stamp: 'MS 11/30/2023 21:19:36'!
initializeFrom: initialPosition to: finPosition 
	
	startingPosition := initialPosition.
	finishPosition := finPosition.!

!methodRemoval: Tunnel #isInInterval: stamp: 'MS 11/30/2023 21:19:40'!
isInInterval: anInterval

	^((startingPosition x <= anInterval x) and: [(startingPosition y <= anInterval y)] and: [(1 <= startingPosition x)] and: [(1 <= startingPosition y)])
	   and: (finishPosition x <= anInterval x) and: [(finishPosition y <= anInterval y)] and: [(1 <= finishPosition x)] and: [(1 <= finishPosition y)]
	!
!Tunnel methodsFor: 'nil' stamp: 'MS 11/30/2023 21:19:57'!
initializeFrom: initialPosition to: finalPosition ! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:20:01' prior: 50668670!
initializeFrom: initialPosition to: finalPosition 

	! !

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:20:27'!
Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition entry'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #Tunnel category: 'MineField' stamp: 'MS 11/30/2023 21:20:28'!
Object subclass: #Tunnel
	instanceVariableNames: 'startingPosition finishPosition entry exit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:20:25' prior: 50668675!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition. 
	exit := TunnelEntry inPosition: finalPosition. ! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:20:33'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:20:33'!
ERROR!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:20:33'!
ERROR!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:20:48' prior: 50668695!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition. 
	exit :=   TunnelEntry inPosition: finalPosition. ! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:21:28' prior: 50668843!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition. 
	exit :=   TunnelEntry inPosition: finalPosition. 
	
	! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:21:50'!
isInInterval: anInterval

	^ (entry isInInterval: anInterval) and: (exit isInInterval: anInterval)! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:21:51'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:21:51'!
PASSED!
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:22:05'!
test41_
	
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5/3@2/3) to: (6@3).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
		
	self
		should: [MineField withExtensions: (10@10)
					 startingIn: (5@1)
					 withItems: {Tunnel from: (5@2) to: (9/5@8/5).} 
					 withStartingHealthPoints: 10 withRandomPositionGenerator: self.]
		raise: Error - MessageNotUnderstood
		withMessageText: MineField invalidItemPositionErrorMessage.
! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:22:08' prior: 50669005!
test41_
	
	! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:22:40' prior: 50669027!
test41_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {Tunnel from: (5@2) to: (8@8) } 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:22:44' prior: 50669031!
test41_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {Tunnel from: (5@2) to: (8@8) } 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:22:56' prior: 50669041!
test41_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {Tunnel from: (5@2) to: (8@8) } 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. ! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:23:18' prior: 50669051!
test41_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {Tunnel from: (5@2) to: (8@8) } 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		
		self assert: (aGame playerIsAt: (8@8))! !
!MineFieldTests methodsFor: 'testing' stamp: 'MS 11/30/2023 21:23:45'!
test41_tunnelTransportsPlayerInOneDirection
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {Tunnel from: (5@2) to: (8@8) } 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		
		self assert: (aGame playerIsAt: (8@8))! !

!methodRemoval: MineFieldTests #test41_ stamp: 'MS 11/30/2023 21:23:46'!
test41_
	
	| aGame |
		
		aGame := MineField withExtensions: (10@10)
						 startingIn: (5@1)
						 withItems: {Tunnel from: (5@2) to: (8@8) } 
						 withStartingHealthPoints: 10 
						 withRandomPositionGenerator: self.
						
		aGame movePlayerForward. 
		
		self assert: (aGame playerIsAt: (8@8))!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:23:48'!
ERROR!

----SNAPSHOT----(30 November 2023 21:24:58) CuisUniversity-5981.image priorSource: 10734046!
!Tunnel methodsFor: 'nil' stamp: 'MS 11/30/2023 21:26:35'!
checkAndAffect: aPlayer withRandomPosition: aRandomPosition 

	entry checkAndAffect: aPlayer withRandomPosition: aRandomPosition.

	exit checkAndAffect: aPlayer withRandomPosition: aRandomPosition. 

! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:26:36'!
PASSED!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:26:36'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:26:36'!
ERROR!
!TunnelEntry methodsFor: 'nil' stamp: 'MS 11/30/2023 21:26:55' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	self subclassResponsibility! !
!TunnelEntry methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:27:19' prior: 50669261 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 


	! !
!TunnelExit methodsFor: 'nil' stamp: 'MS 11/30/2023 21:27:34' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	! !

!classDefinition: #TunnelExit category: 'MineField' stamp: 'MS 11/30/2023 21:27:48'!
MapItems subclass: #TunnelExit
	instanceVariableNames: 'otherEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!TunnelExit methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:27:48' prior: 50669273 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer takeTunnelTo: otherEnd! !

!classDefinition: #TunnelEntry category: 'MineField' stamp: 'MS 11/30/2023 21:28:05'!
MapItems subclass: #TunnelEntry
	instanceVariableNames: 'otherEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!TunnelEntry methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:28:03' prior: 50669268 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer takeTunnelTo: otherEnd

	! !
!MineFieldPlayer methodsFor: 'nil' stamp: 'MS 11/30/2023 21:28:16'!
takeTunnelTo: otherEnd
	
	! !
!MineFieldPlayer methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:28:23' prior: 50669306!
takeTunnelTo: otherEnd
	
	position := otherEnd ! !
!TunnelEntry methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:28:33' prior: 50669300 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer takeTunnelTo: otherEnd position

	! !
!TunnelEntry methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:28:35' prior: 50669317 overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer takeTunnelTo: otherEnd 

	! !
!TunnelEntry class methodsFor: 'nil' stamp: 'MS 11/30/2023 21:30:11'!
inPosition: initialPosition to: otherPosition

	^ self initializeInPosition: initialPosition to: otherPosition! !
!TunnelEntry methodsFor: 'nil' stamp: 'MS 11/30/2023 21:30:30'!
initializeInPosition: initialPosition to: otherPosition

	position := initialPosition.
	otherEnd := otherPosition ! !
!TunnelEntry methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:30:31' prior: 50669336!
initializeInPosition: initialPosition to: otherPosition

	position := initialPosition.
	otherEnd := otherPosition.! !
!TunnelExit class methodsFor: 'nil' stamp: 'MS 11/30/2023 21:30:57'!
inPosition: initialPosition to: otherPosition

	^ self initializeInPosition: initialPosition to: otherPosition! !
!TunnelExit methodsFor: 'nil' stamp: 'MS 11/30/2023 21:31:40'!
initializeInPosition: initialPosition to: otherPosition

	position := initialPosition.
	otherEnd := otherPosition.! !
!TunnelExit methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:31:58' prior: 50669355!
initializeInPosition: initialPosition to: otherPosition

	position := otherPosition.
	otherEnd := initialPosition.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:32:01'!
PASSED!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:32:01'!
FAILURE!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:32:01'!
FAILURE!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:32:32'!
FAILURE!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:32:32'!
FAILURE!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:33:11' prior: 50668851!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition to: finalPosition. 
	exit :=   TunnelEntry inPosition: finalPosition. 
	
	! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:33:19' prior: 50669523!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition to: finalPosition. 
	exit :=   TunnelEntry inPosition: finalPosition to: initialPosition . 
	
	! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:33:20' prior: 50669532!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition to: finalPosition. 
	exit :=   TunnelEntry inPosition: finalPosition to: initialPosition. 
	
	! !

Object subclass: #TunnelEntries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelEntries category: 'MineField' stamp: 'MS 11/30/2023 21:33:53'!
Object subclass: #TunnelEntries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

MapItems subclass: #TunnelEntries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelEntries category: 'MineField' stamp: 'MS 11/30/2023 21:34:00'!
MapItems subclass: #TunnelEntries
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

TunnelEntries subclass: #TunnelEntry
	instanceVariableNames: 'otherEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelEntry category: 'MineField' stamp: 'MS 11/30/2023 21:34:19'!
TunnelEntries subclass: #TunnelEntry
	instanceVariableNames: 'otherEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

TunnelEntries subclass: #TunnelExit
	instanceVariableNames: 'otherEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelExit category: 'MineField' stamp: 'MS 11/30/2023 21:34:26'!
TunnelEntries subclass: #TunnelExit
	instanceVariableNames: 'otherEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelEntry category: 'MineField' stamp: 'MS 11/30/2023 21:34:36'!
TunnelEntries subclass: #TunnelEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelExit category: 'MineField' stamp: 'MS 11/30/2023 21:34:36'!
TunnelEntries subclass: #TunnelExit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classDefinition: #TunnelEntries category: 'MineField' stamp: 'MS 11/30/2023 21:34:36'!
MapItems subclass: #TunnelEntries
	instanceVariableNames: 'otherEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!
!TunnelEntries methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:34:45' overrides: 50658925!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer takeTunnelTo: otherEnd 

	! !

!methodRemoval: TunnelEntry #affectPlayer:andRandomPosition: stamp: 'MS 11/30/2023 21:34:45'!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer takeTunnelTo: otherEnd 

	!
!TunnelEntries methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:34:48'!
initializeInPosition: initialPosition to: otherPosition

	position := initialPosition.
	otherEnd := otherPosition.! !

!methodRemoval: TunnelEntry #initializeInPosition:to: stamp: 'MS 11/30/2023 21:34:48'!
initializeInPosition: initialPosition to: otherPosition

	position := initialPosition.
	otherEnd := otherPosition.!

!methodRemoval: TunnelExit #initializeInPosition:to: stamp: 'MS 11/30/2023 21:34:54'!
initializeInPosition: initialPosition to: otherPosition

	position := otherPosition.
	otherEnd := initialPosition.!

!methodRemoval: TunnelExit #affectPlayer:andRandomPosition: stamp: 'MS 11/30/2023 21:34:56'!
affectPlayer: aPlayer andRandomPosition: aRandomPosition 

	aPlayer takeTunnelTo: otherEnd!
!TunnelEntries class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:35:06'!
inPosition: initialPosition to: otherPosition

	^ self initializeInPosition: initialPosition to: otherPosition! !

!methodRemoval: TunnelEntry class #inPosition:to: stamp: 'MS 11/30/2023 21:35:06'!
inPosition: initialPosition to: otherPosition

	^ self initializeInPosition: initialPosition to: otherPosition!

!methodRemoval: TunnelExit class #inPosition:to: stamp: 'MS 11/30/2023 21:35:12'!
inPosition: initialPosition to: otherPosition

	^ self initializeInPosition: initialPosition to: otherPosition!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:35:28'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:35:28'!
ERROR!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:35:28'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:35:28'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:06'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:06'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:07'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:07'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:07'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:08'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:08'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:08'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:08'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:09'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:09'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:36:18'!
ERROR!
!TunnelEntries methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:36:53' prior: 50669630!
initializeInPosition: initialPosition to: otherPosition

	position := initialPosition.
	otherEnd := otherPosition.! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:37:08'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:37:09'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:37:09'!
ERROR!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:37:09'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:37:09'!
ERROR!

----SNAPSHOT----(30 November 2023 21:37:21) CuisUniversity-5981.image priorSource: 10798463!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:37:31'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:37:31'!
ERROR!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:37:31'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:37:31'!
ERROR!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:37:41'!
ERROR!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:37:41'!
ERROR!
!Tunnel methodsFor: 'initialization' stamp: 'MS 11/30/2023 21:38:55' prior: 50669542!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition to: finalPosition. 
	exit :=   TunnelExit inPosition: finalPosition to: initialPosition. 
	
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:38:56'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:38:56'!
ERROR!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:38:56'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:38:56'!
ERROR!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:39:02'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:39:02'!
ERROR!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:39:02'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:39:02'!
ERROR!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:39:14'!
ERROR!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:39:14'!
ERROR!
!Tunnel methodsFor: 'initialization' stamp: 'MS 11/30/2023 21:40:03' prior: 50670162!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntries inPosition: initialPosition to: finalPosition. 
	exit :=   TunnelEntries inPosition: finalPosition to: initialPosition. 
	
	! !

!classRemoval: #TunnelEntry stamp: 'MS 11/30/2023 21:40:11'!
TunnelEntries subclass: #TunnelEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classRemoval: #TunnelExit stamp: 'MS 11/30/2023 21:40:15'!
TunnelEntries subclass: #TunnelExit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MineField'!

!classRenamed: #TunnelEntries as: #TunnelEntry stamp: 'MS 11/30/2023 21:40:29'!
Smalltalk renameClassNamed: #TunnelEntries as: #TunnelEntry!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:40:30' prior: 50670464!
initializeFrom: initialPosition to: finalPosition 

	entry := TunnelEntry inPosition: initialPosition to: finalPosition. 
	exit :=   TunnelEntry inPosition: finalPosition to: initialPosition. 
	
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:40:48'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:40:48'!
ERROR!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:40:48'!
ERROR!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:40:48'!
ERROR!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:41:00'!
ERROR!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:41:00'!
ERROR!
!TunnelEntry class methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:41:14' prior: 50669655!
inPosition: initialPosition to: otherPosition

	^ self new initializeInPosition: initialPosition to: otherPosition! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:41:16'!
PASSED!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:41:16'!
FAILURE!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:41:16'!
FAILURE!
!TunnelEntry methodsFor: 'nil' stamp: 'MS 11/30/2023 21:44:05' overrides: 50656125!
isAt: aPosition
	
	^position isAt: aPosition ! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:45:05' prior: 50669105!
checkAndAffect: aPlayer withRandomPosition: aRandomPosition 


	entry checkAndAffect: aPlayer withRandomPosition: aRandomPosition.

	exit checkAndAffect: aPlayer withRandomPosition: aRandomPosition. 

! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:45:06' prior: 50670809!
checkAndAffect: aPlayer withRandomPosition: aRandomPosition 

	entry checkAndAffect: aPlayer withRandomPosition: aRandomPosition.

	exit checkAndAffect: aPlayer withRandomPosition: aRandomPosition. 

! !
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:47:29' prior: 50670819!
checkAndAffect: aPlayer withRandomPosition: aRandomPosition 

	exit checkAndAffect: aPlayer withRandomPosition: aRandomPosition. 
	entry checkAndAffect: aPlayer withRandomPosition: aRandomPosition.


! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:47:30'!
PASSED!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:47:30'!
PASSED!
!Tunnel methodsFor: 'as yet unclassified' stamp: 'MS 11/30/2023 21:47:33' prior: 50670829!
checkAndAffect: aPlayer withRandomPosition: aRandomPosition 

	exit checkAndAffect: aPlayer withRandomPosition: aRandomPosition. 
	
	entry checkAndAffect: aPlayer withRandomPosition: aRandomPosition.


! !

----SNAPSHOT----(30 November 2023 21:47:47) CuisUniversity-5981.image priorSource: 10827450!

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:48:08'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:48:09'!
PASSED!

----SNAPSHOT----(30 November 2023 21:48:47) CuisUniversity-5981.image priorSource: 10858893!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:49:48'!
checkForMapItemsEffect

	^ items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:49:49' prior: 50666477!
movePlayerForward
	
	player moveForwards.
	self checkForMapItemsEffect. ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:49:49' prior: 50666494!
movePlayerRight
	
	(player isInXAxis: mapExtensions x) ifFalse: [player moveRight].
	self checkForMapItemsEffect. ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:49:49' prior: 50666503!
movePlayerBackwards
	
	(player isInYAxis: 1) ifFalse:[player moveBackwards].
	self checkForMapItemsEffect. ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:49:49' prior: 50666485!
movePlayerLeft
	
	(player isInXAxis: 1) ifFalse: [player moveLeft].
	self checkForMapItemsEffect. ! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:50:50' prior: 50671140!
checkForMapItemsEffect

	^ items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]
	
	
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:50:52'!
PASSED!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:50:52'!
PASSED!
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:51:11' prior: 50671171!
checkForMapItemsEffect

	^ items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]
	
	
	
	
	! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:52:18' prior: 50671322!
checkForMapItemsEffect

	^ items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]
	
	"Me falto hacer que los items desaparezcan una vez usados, pero eso se soluciona rapido en este metodo. Habra que hacer un detect y sacar el item que el jugador tiene que usar. 
	para usarlo y luego eliminarlo de la coleccion de items."
	
	
	! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:52:24' prior: 50671330!
checkForMapItemsEffect

	^ items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]
	
	"Me falto hacer que los items desaparezcan una vez usados, pero eso se soluciona rapido en este metodo. Habra que hacer un detect y sacar el item que el jugador tiene que usar. 
	para usarlo y luego eliminarlo de la coleccion de items."
	
	
	! !
!MineField methodsFor: 'player' stamp: 'MS 11/30/2023 21:52:34' prior: 50671345!
checkForMapItemsEffect

	^ items do: [:anItem | (anItem checkAndAffect: player withRandomPosition: randomPositionGenerator randomPosition)]
	
	"Me falto hacer que los items desaparezcan una vez usados, pero eso se soluciona rapido en este metodo. Habra que hacer un detect y sacar el item que el jugador tiene que usar, 
	para usarlo y luego eliminarlo de la coleccion de items."
	
	
	! !

!testRun: #MineFieldTests #test01_playerStartsInStartingPosition stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test02_playerIsOnlyInStartingPosition stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test03_playerCanOnlyStartInFirstRow stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test04_startingPositionMustBePositive stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test05_mapExtensionsShouldBeAtLeast2x2 stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test06_startingPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test07_mapExtensionsShouldBeIntegers stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test08_playerCanCorrectlyMoveForward stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test09_playerCanCorrectlyMoveBackwards stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test10_playerCanCorrectlyMoveRight stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test11_playerCanCorrectlyMoveLeft stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test12_playerCannotMoveRightOutOfBounds stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test13_playerCannotMoveLeftOutOfBounds stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test14_playerCannotMoveBackwardsOutOfBounds stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test15_playerHasCorrectHP stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test16_playerHasCorrectHP stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test17_cannotHaveLittleBombOutOfBounds stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test18_littleBombCorrectlyReducesPlayersHP stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test19_littleBombPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test20_cannotHaveLightArmorOutOfBounds stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test21_lightArmorPositionShouldBeIntegers stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test22_1_playerIsNotArmoredInNewGame stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test22_lightArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test23_lightArmorCorrectlyProtectsPlayerFromLightBomb stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test24_lightArmorWearsOffAfterLightBomb stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test25_bigBombCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test26_bigBombDecreasesPlayersHPBy2 stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test27_BigBombMovesPlayer stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test28_LightArmorReducesPlayersMovementWhenSteppingOnBigBomb stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test29_LightArmorWearsOffAfterSteppingOnBigBomb stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test30_heavyArmorCannotHaveInvalidPosition stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test31_playerDoesNotStartWithHeavyArmor stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test32_heavyArmorCanBeGrabbedByPlayer stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test33_heavyArmorProtectsAgainstLittleBomb stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test34_heavyArmorProtectsAgainstTwoLittleBombsAndWearsOff stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test35_lastGrabbedArmorPersists stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test36_heavyArmorProtectsAgainstBigBomb stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test37_heavyArmorProtectsAgainstTwoBigBombs stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test38_ItemsCanBeGrabbedMovingInAllDirections stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test39_TunnelCannotHaveInvalidPositions stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test40_TunnelPositionsHaveToBePointsOfIntegers stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

!testRun: #MineFieldTests #test41_tunnelTransportsPlayerInOneDirection stamp: 'MS 11/30/2023 21:52:44'!
PASSED!

----SNAPSHOT----(30 November 2023 21:52:47) CuisUniversity-5981.image priorSource: 10863571!

----SNAPSHOT----(30 November 2023 21:53:50) CuisUniversity-5981.image priorSource: 10875756!